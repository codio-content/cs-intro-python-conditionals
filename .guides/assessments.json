[
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2859062537",
  "source": {
   "name": "For Loop",
   "showName": false,
   "instructions": "Rearrange the commands below to make a for loop that find the sum of the numbers between 0 and 100, and then prints the sum.",
   "initial": "total = 0\nfor i in range(101):\n    total = total + i\nprint(total)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "First, the variable `total` is declared and set to 0. Next, write the loop that goes from 0 to 100. Add the value of `i` to `total`. Once the loop has finished running, print `total`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-turtle-2.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": ""
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-turtle-2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT Construct a for loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-859845509",
  "source": {
   "name": "Range",
   "showName": false,
   "instructions": "Which of the following code snippets will loop through all number between 0 and 100 (including 100)?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "7b77b400-74ba-fa6f-9ce6-5bff613aca93",
     "correct": false,
     "answer": "range(100)"
    },
    {
     "_id": "1c071e4c-5f1a-09fd-8eac-273ba4821b73",
     "correct": true,
     "answer": "range(101)"
    },
    {
     "_id": "cd681509-d98d-b530-806d-3dafbc21303f",
     "correct": false,
     "answer": "range(0, 100)"
    },
    {
     "_id": "61101006-f7df-1c26-d544-d9d921e3139a",
     "correct": true,
     "answer": "range(0, 101, 1)"
    }
   ],
   "guidance": "Remember, the `range` function does not include the ending number. So `range(100)` does not include 100. `range(0, 101, 1)` is correct because this means you increment from 0 to 100 by 1.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how the range function works"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-678412407",
  "source": {
   "name": "While Loop",
   "showName": false,
   "instructions": "Arrange the following lines of code such that the while loop will print \"Python\" 10 times.",
   "initial": "count = 0\nwhile count < 10:\n    print(\"Python\")\n    count = count + 1",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "The variable `count` is declared to keep track of how many times the loop has run. Next, test to see if `count` is less than 10. Finally, print \"Python\" if the above statement is true.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-break-statement.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct a while loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-13057091",
  "source": {
   "name": "Break Statement",
   "showName": false,
   "instructions": "Fill in the blanks such that the loop will stop after it has run 100 times.",
   "text": "```python\ntotal = <<<0>>>\nwhile True:\n    total = total + 1\n    if <<<total>>> > 100<<<:>>>\n        <<<break>>>\n```",
   "guidance": "First, initialize the variable `total` to 0. Then check to see if `total` is greater than 100. Don't forget that if statements end with an `:`. Finally, use a `break` statement to end the loop.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT properly use a break statement to end a loop",
   "tokens": {
    "blank": [
     "0",
     "total",
     ":",
     "break"
    ],
    "text": [
     "```python\ntotal = ",
     0,
     "\nwhile True:\n    total = total + 1\n    if ",
     0,
     " > 100",
     0,
     "\n        ",
     0,
     "\n```"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1166034184",
  "source": {
   "name": "Nested Loops",
   "showName": false,
   "instructions": "Arrange the lines of code such that you have a correctly coded nested loop. **Hint:** the print statement goes directly after its respective loop.",
   "initial": "for outer in range(5):\n    print(\"Outer loop\")\n    for inner in range(5):\n        print(\"Inner loop\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "The outer loop goes first. The `print` statement that says \"Outer loop\" goes next and is indented four spaces. Now comes the inner loop, which is also indented four spaces. Finally, the `print` statement that says \"Inner loop\" is indented eight spaces.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-nested-loops.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-nested-loops.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT properly indent a nested loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1575521773",
  "source": {
   "name": "Nested Loops",
   "showName": false,
   "instructions": "Fill in the blanks such that the nested loop would print out:\n\n```\n&&\n*\n*\n*\n&&\n*\n*\n*\n&&\n*\n*\n*\n&&\n*\n*\n*\n```",
   "text": "```\nfor i in range(<<<4>>>):\n    print(\"<<<&&>>>\")\n    for j in range(<<<3>>>):\n        print(\"<<<*>>>\")\n```",
   "guidance": "Since the outer loop controls what is printed first, which is `&&`. Since that occurs four times, the outer loop should run four times. Now print the `&&` symbols. The next thing to be printed is the `*`, which occurs three times per `&&`. So the inner loop should run three times. Finally, print the `*`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT mentally understand the order of a nested loop",
   "tokens": {
    "blank": [
     "4",
     "&&",
     "3",
     "*"
    ],
    "text": [
     "```\nfor i in range(",
     0,
     "):\n    print(\"",
     0,
     "\")\n    for j in range(",
     0,
     "):\n        print(\"",
     0,
     "\")\n```"
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1829566628",
  "source": {
   "name": "Lab Challenge - Loops",
   "showName": true,
   "instructions": "Once your program produces the output above, submit it for a grade.",
   "command": "python3 code/loops/lab-challenge.py",
   "preExecuteCommand": "",
   "guidance": "This problem is tricky in that there are two sets of alternating output. Within a row, the output alternates between `X` and `O`. Then each row itself alternates between starting with `X` or starting with `O`. The alternating pattern will be handled by asking if a number modulo 2 returns 0. That is, if a number is odd do one thing, if the number is even do something else.\n\nStart by creating the outer loop with `row` as the index. Use an if-else statement to determine if `row` is even or odd.\n\n```python\nfor row in range(8):\n  if row % 2 == 0:\n\n  else:\n```\n\nPrinting a row of characters requires another loop, this time with the index `column`. The first row starts with `X` and then prints `O`. So if `column` is even print an `X` and if it is odd print `O`.\n\n```python\nfor row in range(8):\n  if row % 2 == 0:\n    for column in range(8):\n      if column % 2 == 0:\n        print(\"X\", end='')\n      else:\n        print(\"O\", end='')\n    print()\n  else:\n```\n\nIf `row` is odd you are going copy/paste the loop with `column` but be sure to change the order of `X` and `O`.\n\n```python\nfor row in range(8):\n  if row % 2 == 0:\n    for column in range(8):\n      if column % 2 == 0:\n        print(\"X\", end='')\n      else:\n        print(\"O\", end='')\n    print()\n  else:\n    for column in range(8):\n      if column % 2 == 0:\n        print(\"O\", end='')\n      else:\n        print(\"X\", end='')\n    print()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "XOXOXOXO\nOXOXOXOX\nXOXOXOXO\nOXOXOXOX\nXOXOXOXO\nOXOXOXOX\nXOXOXOXO\nOXOXOXOX",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/loops/lab-challenge.py",
     "code/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3013013327",
  "source": {
   "name": "What is the purpose of `range` in a for loop?",
   "showName": false,
   "instructions": "## What is the purpose of `range` in a for loop?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6d2776a8-9432-ffae-aead-79711e05aef3",
     "correct": true,
     "answer": "It sets up the number of iterations the loop will execute."
    },
    {
     "_id": "e2117c44-a075-64a6-b4ee-3892ad21dc95",
     "correct": false,
     "answer": "It limits the values a user can enter."
    },
    {
     "_id": "8df286f8-ef4e-473f-d822-f83a7fdd410d",
     "correct": false,
     "answer": "It is used to constrain the for loop to a minimum number of iterations."
    },
    {
     "_id": "36efab39-1506-fd37-5be3-05429b2c6f9b",
     "correct": false,
     "answer": "It indicates how much memory a for loop can use."
    }
   ],
   "guidance": "The `range` function tells the for loop how many times it will run before ending.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the role of `range` in a for loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3053795523",
  "source": {
   "name": "Syntax troubleshooting",
   "showName": false,
   "instructions": "## Syntax troubleshooting\nWhat is wrong with this code snippet?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8c52c185-eec5-4226-d05f-774cf447f99b",
     "correct": false,
     "answer": "The 0 should be a 1 so the loop executes correctly."
    },
    {
     "_id": "27671322-0427-7df5-caa9-026ea3f7f267",
     "correct": false,
     "answer": "The comma should be a semi-colon."
    },
    {
     "_id": "14625554-ebaf-7a4f-2025-88f5d65e4fbc",
     "correct": false,
     "answer": "The comma should be a colon."
    },
    {
     "_id": "2abfe746-c528-335d-e29a-e352e9cca756",
     "correct": true,
     "answer": "There should be a colon after the `(0,4)` portion of the code."
    }
   ],
   "guidance": "When declaring a for loop, a colon (`:`) follows the `range` function.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT properly declare a for loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2284610587",
  "source": {
   "name": "While Predicates",
   "showName": false,
   "instructions": "## While predicates\nTrue of False: the following code snippet is valid for a while loop.\n\n```python\nwhile True\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c7d05757-f64d-deb0-91c7-0317f1e21506",
     "correct": true,
     "answer": "True"
    },
    {
     "_id": "bb9492d1-bdcd-7d6e-5b09-a1f7d42fac11",
     "correct": false,
     "answer": "False"
    }
   ],
   "guidance": "`while True` is a valid statement.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the validity of `while True`"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4153609342",
  "source": {
   "name": "Interrupt a While Loop",
   "showName": false,
   "instructions": "## Interrupt a while loop\nWhat keyword can you use to interrupt, or end, the execution of a while loop?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6a5ed49a-3f22-e293-e0b6-ebd61d16195d",
     "correct": false,
     "answer": "pause"
    },
    {
     "_id": "184b0fd7-24cc-9a3c-ccf7-5bd4f8d561f0",
     "correct": true,
     "answer": "break"
    },
    {
     "_id": "d13f8ed8-3ef1-c27f-0d42-1e1e1c6f7af5",
     "correct": false,
     "answer": "halt"
    },
    {
     "_id": "c2fc5267-fe4f-275d-4ba5-d2e1337058ef",
     "correct": false,
     "answer": "stop"
    }
   ],
   "guidance": "The `break` statement is used to stop a while loop.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recall the use of `break` to end a while loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3308526727",
  "source": {
   "name": "Interrupt a while loop 2",
   "showName": false,
   "instructions": "## Interrupt a while loop\nWhat is the result of running the following code?\n\n```python\ntime = 2\nwhile True:\n    print('The time is ', str(time))\n    if time == 2:\n        time = 6\n    else:\n        break\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c198d68c-8029-5162-b3df-a6f113e7c7f3",
     "correct": false,
     "answer": "'The time is 2'"
    },
    {
     "_id": "8fe5ec1d-3e42-0fd4-a563-2b4373d799b0",
     "correct": false,
     "answer": "'The time is 6'"
    },
    {
     "_id": "3fef2416-08a0-0a69-c0c3-0173f04d1c5b",
     "correct": false,
     "answer": "A syntax error is generated"
    },
    {
     "_id": "1dbcf270-195d-25d3-7f8c-82ff671a13d1",
     "correct": true,
     "answer": "'The time is 2' and 'The time is 6'"
    }
   ],
   "guidance": "The first time the loop runs, it prints `The time is 2`. Since `time` is equal to 2, `time` is updated to 6. The loop runs a second time and prints `The time is 6`. Since `time` is not equal to 2, the loop ends with the `break` statement.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/loops/lab-break.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/lab-break.py"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT mentally walk through a loop and determine its result"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1993921012",
  "source": {
   "name": "Exercise 1",
   "showName": false,
   "instructions": "## Drawing with turtle graphics\n\nRearrange the code blocks below to draw a triangle. Click on the **Model Drawing** to see the turtle animation.",
   "initial": "t = turtle.Turtle()\n\nfor i in range(3):\n    t.forward(100)\n    t.lt(120)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"turtleModelCode\": \"modelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\",\n  \"grader\": \"ParsonsWidget._graders.TurtleGrader\",\n  \"executable_code\": \"for i in range(0,3):\\nmyTurtle.forward(100)\\nmyTurtle.left(120)\\npass\",\n  \"programmingLang\": \"pseudo\"\n}",
   "grader": "5",
   "guidance": "The first thing to do is to declare the variable `t` as a Turtle object. Then start the loop. In the model drawing, the turtle advances forward before turning. Use the `forward` block before the `lt` block. Don't forget to indent the commands that are a part of the loop.\n\n```python\nt = turtle.Turtle()\nfor i in range(3):\n    t.forward(100)\n    t.lt(120)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Turtle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT draw a triangle with a for loop and Python turtle"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2041964435",
  "source": {
   "name": "Exercise 5",
   "showName": false,
   "instructions": "## Submit your work\nOnce you get your code working properly, submit it by clicking the button below.",
   "command": "python3 code/exercise-5.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "....1\n...2\n..3\n.4\n5",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/exercise-5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/exercise-5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT use nested loops"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2688734983",
  "source": {
   "name": "While loop",
   "showName": false,
   "instructions": "## Create a while loop\nFrom the code blocks below, create a while loop that will iterate ten times. **Note:** not all code blocks will be used.",
   "initial": "\ncount = 0\nwhile count < 10:\n    count = count + 1\ncount = 1 #distractor\nwhile count < range(10): #distractor\n    count = count #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Start by creating the variable `count` and setting its value to 0. If you set its value to 1, the loop will not run 10 times. Use the line `while count < 10` for the loop. While loops do not use the `range` keyword; for loops do. Finally, `count` needs to increase so that this is not an infinite loop. Use the code block `count = count + 1`.\n\n```python\ncount = 0\nwhile count < 10:\n    count = count + 1\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4155526204",
  "source": {
   "name": "While True",
   "showName": false,
   "instructions": "## While loop\nUsing `while True:`, create a loop that prints the sum of all the numbers between 0 and 100. **Note:** the sum should include the number 100.",
   "command": "python3 code/loops/exercise-3.py",
   "preExecuteCommand": "",
   "guidance": "There are several ways to solve this problem. Here is one of them. You will need two variables; one for the while loop and another for the total. Declare `total` and `count` and set them both to 0. The loop needs to include the number 100. That means the loop should run as long as `count` is less than 101. The `total` variable is assigned itself plus the value of `count`. Finally, increment `count` by 1.\n\n```python\ntotal = 0\ncount = 0\nwhile count < 101:\n  total = total + count\n  count += 1\nprint(total)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "5050",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/loops/exercise-3.py",
     "code/exercise-3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/exercise-3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT create a while true loop that breaks when a certain condition is met"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1303194131",
  "source": {
   "name": "Turtle Graphic",
   "showName": false,
   "instructions": "## Turtle graphic\nRearrange the code blocks below so that their output would be the image above. If you need to practice, use the code editor to the left and press the `TRY IT` button to see your output in the tab entitled `Preview https:/...`. **Note:** it is not important that your colors match.",
   "initial": "for j in range(4):\n    for i in range(4):\n        t.forward(50)\n        t.rt(90)\n    t.forward(100)\nfor i in range(4):\n        t.forward(50)\n        t.rt(90)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/exercise-4.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/exercise-4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT use loops while taking into account a fence post issue"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2318046941",
  "source": {
   "name": "Python Print Statement",
   "showName": false,
   "instructions": "## Print Statement\nWhat does the `print` statement do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8d434707-f06e-b243-0255-e907d93f0070",
     "correct": false,
     "answer": "Sends your output to the printer"
    },
    {
     "_id": "384abd09-2074-9d98-7a37-0d1a4d0117af",
     "correct": false,
     "answer": "Sends your output to a file"
    },
    {
     "_id": "25e0febb-abe7-7958-8b77-77e694128374",
     "correct": true,
     "answer": "Sends your output to the screen"
    },
    {
     "_id": "5010b36f-4055-fdc4-8681-3d0f640b737a",
     "correct": false,
     "answer": "Sends your output to the compiler"
    }
   ],
   "guidance": "The `print` command sends your output to the screen.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Fundametals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-printing2.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recognize what the print command does"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2419368717",
  "source": {
   "name": "Python Variables",
   "showName": false,
   "instructions": "## Variables\nWhich of the following items is a correct variable name?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "86d55fed-5e50-dc95-0c39-457ed5470948",
     "correct": false,
     "answer": "`my-variable`"
    },
    {
     "_id": "508b2e1b-57a8-14d4-43bd-4fc3bf7d3bb4",
     "correct": true,
     "answer": "`_my_variable`"
    },
    {
     "_id": "b6f5b9aa-1eaa-a93a-7587-3db734c3a1e0",
     "correct": false,
     "answer": "`1_my_variable`"
    },
    {
     "_id": "5b84c7bc-ffe0-98bb-5a35-e0665a15500a",
     "correct": false,
     "answer": "`my_variable!`"
    }
   ],
   "guidance": "Here are the basic rules for variable names:\n* Must start with an underscore or a letter\n* The rest of the variable can contain letters, numbers, or underscores\n* May not use a Python keyword",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variable"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT declare a valid variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3378723738",
  "source": {
   "name": "Python Data Types",
   "showName": false,
   "instructions": "What are the four basic data types of Python?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "23aedede-9c0e-a742-d588-877fd749727a",
     "correct": true,
     "answer": "strings, boolean, ints, and floats"
    },
    {
     "_id": "6d566a80-d985-7ef4-7eec-af61579092a5",
     "correct": false,
     "answer": "strings, true/false, numbers, decimals"
    },
    {
     "_id": "fcb187e2-6e33-2526-d969-e53194ba9fe3",
     "correct": false,
     "answer": "boolean, hexadecimal, ints, strings"
    },
    {
     "_id": "788a6d19-7c1c-2c68-4928-59dd1c6c90c2",
     "correct": false,
     "answer": "numbers, images, audio, video"
    }
   ],
   "guidance": "The four basic data types that you have learned so far are:\n* strings - collections of letters, numbers, and symbols\n* boolean - true or false\n* ints - integers (no decimal)\n* floats - numbers with a decimal",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-types.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the four basic data types"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1021258373",
  "source": {
   "name": "Python print without newline character",
   "showName": false,
   "instructions": "## Printing Without the Newline Character\nFill in the blank with the missing text that will print the text `Hi!` without adding a newline character?",
   "text": "`print(\"Hi!\", end=<<<''>>>)`",
   "guidance": "To remove the newline character from the `print` command, you need to add `end=''` to the command. The correct answer looks like this: `print(\"Hi!\", end='')`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Print"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT write a print command without a newline character",
   "tokens": {
    "blank": [
     "''"
    ],
    "text": [
     "`print(\"Hi!\", end=",
     0,
     ")`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2557587753",
  "source": {
   "name": "reading question print command",
   "showName": false,
   "instructions": "## Reading Question\nWhat is wrong with the code snippet below?\n\n```python\nprint(Hello world)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a4930806-2307-6729-d50e-1f8bb9609c32",
     "correct": false,
     "answer": "Capitalize `print`"
    },
    {
     "_id": "8b03a313-48be-379b-ff85-deb7f21f3994",
     "correct": false,
     "answer": "Use `{ }` instead of `( )`"
    },
    {
     "_id": "06d9d513-0a6f-51a3-283a-09f0aa106f60",
     "correct": true,
     "answer": "Missing `\" \"` around `Hello world`"
    },
    {
     "_id": "efa1bc6a-4f01-07e8-12e1-1193809940b2",
     "correct": false,
     "answer": "Add a `;` at the end of the line of code"
    }
   ],
   "guidance": "After the `print` command use parentheses and quotation marks around the words to be printed.\n\n`print(\"Hello world\")`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Print command"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Using quotes in the print command"
     }
    ],
    "files": [
     "code/fundamentals/playground-printing.py",
     "code/playground-printing.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/playground-printing.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the components needed to print a string to the console"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3628483659",
  "source": {
   "name": "print command newline character",
   "showName": false,
   "instructions": "## Reading Question\nTrue or False: Python automatically inserts a newline character when you use the `print` command.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8f73bf45-99c3-450a-452e-85625551e7eb",
     "correct": true,
     "answer": "True"
    },
    {
     "_id": "c62f86a2-eac6-8045-0fc0-c01fb52e4d39",
     "correct": false,
     "answer": "False"
    }
   ],
   "guidance": "True. When you use the `print` command, Python inserts a newline character automatically.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Print command"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character"
     }
    ],
    "files": [
     "code/playground-printing2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-printing2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT understand that newline characters are added by default"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-928839981",
  "source": {
   "name": "case sensitive variables",
   "showName": false,
   "instructions": "## Reading Question\nTrue or False: the two names refer to the same variable.\n`My_Variable`\n`my_variable`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "10c3413a-b154-12da-35f4-8ed296ebf23b",
     "correct": false,
     "answer": "True"
    },
    {
     "_id": "2c6ce430-cd1c-3a03-7cdd-cb10b9c0a23e",
     "correct": true,
     "answer": "False"
    }
   ],
   "guidance": "False. Python is a case sensitive language. That means variable names with capital letters are different those with lowercase letters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variable names"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Case sensitive"
     }
    ],
    "files": [
     "code/playground-variables1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-variables1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the case sensitive nature of variable names"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2757362999",
  "source": {
   "name": "declaring and overwriting variables",
   "showName": false,
   "instructions": "## Reading Question\nFrom the collection of code blocks, drag out **two** such that the first block declares the variable `my_variable` and assigns it the value of `\"red\"` and the second code block overwrites this with `\"blue\"`.",
   "initial": "my_variable = \"red\"\nmy_variable = \"blue\"\nvar my_variable = \"red\" #distractor\nmy_variable = red #distractor\nvar my_variable = \"blue\" #distractor\nmy_variable = blue #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Since you have to declare the variable with the value `\"red\"`, this line of code must come first. The second line will assign the value `\"blue\"` to the variable.\n\nPython does not use the `var` keyword to declare variables.\n\n```python\nmy_variable = \"red\"\nmy_variable = \"blue\"\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Declare and overwrite values"
     }
    ],
    "files": [
     "code/fundamentals/playground-assign-value.py",
     "code/playground-assign-value.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/playground-assign-value.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT understand the difference between declaring a variable and overwriting its value"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3755866164",
  "source": {
   "name": "string reading question",
   "showName": false,
   "instructions": "## Reading Question\nComplete the line of code below so that variable declaration is correct.",
   "text": "`my_string = \"This is a string<<<\">>>`",
   "guidance": "Since the beginning of the string starts with a double-quotation mark, you need to end the string with a double-quotation mark.\n\n`my_string = \"This is a string\"`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Using appropriate quotation mark (\" or ')"
     }
    ],
    "files": [
     "code/playground-types.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize the need to be consistent with the type of quotation mark used",
   "tokens": {
    "blank": [
     "\""
    ],
    "text": [
     "`my_string = \"This is a string",
     0,
     "`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-397882862",
  "source": {
   "name": "boolean reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the rule regarding boolean values in Python?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2a14a4dd-e0a9-583a-7863-c0e4c545a482",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be lowercase. "
    },
    {
     "_id": "223f2866-8e5d-a1ae-1313-f28924cb7da4",
     "correct": false,
     "answer": "Boolean values are not case sensitive and can be either uppercase or lowercase."
    },
    {
     "_id": "5032ef8c-2720-52c3-24fe-13242794a627",
     "correct": true,
     "answer": "Boolean values are case sensitive and must be uppercase. "
    },
    {
     "_id": "e91a8a64-a81f-ec1b-61ff-85a3e9a7a276",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be all caps."
    }
   ],
   "guidance": "Boolean values in Python are case sensitive. They must start with a capital letter.\n`True` and `False`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Boolean"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Capitalization"
     }
    ],
    "files": [
     "code/playground-types.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT properly capitalize boolean values"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-744756114",
  "source": {
   "name": "float reading question",
   "showName": false,
   "instructions": "## Reading Question\nFrom the lines of text below, drag **two** of them into answer space. Your answer should explain the difference between a float and an int.",
   "initial": "A float is a decimal number,\nwhile an int is a whole number.\nA float is a whole number, #distractor\nwhile an int is a decimal number. #distractor\nA float is an irrational number, #distractor\nwhile an int is a rational number. #distractor",
   "options": "{\n  \"searchId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "A floating point number is one with a decimal. An int is a whole number (or integer).",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Difference between float and int"
     }
    ],
    "files": [
     "code/playground-types-float.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types-float.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT describe the difference between a float and an int"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3707172048",
  "source": {
   "name": "fundamentals lab challenge",
   "showName": false,
   "instructions": "## Fundamentals Lab Challenge\nYou now know how to declare variables with four different data types and print these variables.\n\nRearrange the code blocks below such that you have a program that prints the output below. Note, you **will not** use all of the code blocks for your solution.\n\n```python\nPython fundamentals are very useful\n```",
   "initial": "variable_1 = \"Python fundamentals are very useful\"\nvariable_2 = variable_1\nprint(variable_2)\nvariable_1 = variable_2 #distractor\nvariable_1 = Python fundamentals are very useful #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There is only one `print` command, and it prints the value of `variable_2`. So, `variable_2` must contain the phrase `Python fundamentals are very useful`. Since this phrase is stored in `variable_1`, then you need to set the value of `variable_2` to that of `variable_1`.\n\n```python\nvariable_1 = \"Python fundamentals are very useful\"\nvariable_2 = variable_1\nprint(variable_2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Variables and Print"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Combine print and variable assignments"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use variable declarations and a print statement to output a particular phrase"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1001048360",
  "source": {
   "name": "fundamentals exercise 1",
   "showName": false,
   "instructions": "## Exercise 1\nDeclare a variable `my_boolean` and assign it the boolean value of true. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-1-helper.py",
   "preExecuteCommand": "",
   "guidance": "```python\nmy_boolean = True\nprint(my_boolean)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "True\nTrue",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a boolean variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1343612139",
  "source": {
   "name": "fundamentals exercise 2",
   "showName": false,
   "instructions": "## Exercise 2\nDeclare a variable `my_int` and assign it the integer value of 3. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-2-helper.py",
   "preExecuteCommand": "",
   "guidance": "```python\nmy_int = 3\nprint(my_int)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "True\n3",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Interger variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise2.py",
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print an integer variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2882174987",
  "source": {
   "name": "fundamentals exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nDeclare a variable `my_string` and assign it the string value of:\n\n`This is a string`\n\nPrint the variable.",
   "command": "python3 code/fundamentals/exercise3.py",
   "preExecuteCommand": "",
   "guidance": "```python\nmy_string = \"This is a string\"\nprint(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "This is a string",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String varaibles"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a string variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1795615497",
  "source": {
   "name": "fundamentals exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nDeclare a variable `my_float` and assign it the floating point value of 3. Print the variable.",
   "command": "python3 code/fundamentals/exercise4.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "3.0",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Float variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a float variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1941220880",
  "source": {
   "name": "fundamentals exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nUse **two** print statements to write the following string:\n\n`Okay, it is time to learn about operators.`",
   "command": "python3 code/fundamentals/exercise5.py",
   "preExecuteCommand": "",
   "guidance": "The trick is to remove the newline character that is implicit with a `print` command. The sentence can be divided any way you want, but you need to use `end=''` in the first `print`.\n\n```python\nprint(\"Okay, it is time to \", end='')\nprint(\"learn about operators.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Okay, it is time to learn about operators.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Print"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character"
     }
    ],
    "files": [
     "code/fundamentals/exercise5.py",
     "code/fundamentals/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT remove the newline character from print"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3865967629",
  "source": {
   "name": "reading question addition",
   "showName": false,
   "instructions": "## Reading Question\nWhat happens when you add an int and a float?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "b1a59626-783a-6336-761b-f3b4aa999ab1",
     "correct": false,
     "answer": "You get a syntax error"
    },
    {
     "_id": "b5dede3c-94db-a929-49fb-f39d0ad735b6",
     "correct": false,
     "answer": "You get an int"
    },
    {
     "_id": "48599ce6-654e-13f6-67d6-28d4ab07d3fd",
     "correct": true,
     "answer": "You get a float"
    }
   ],
   "guidance": "Since a float can represent the same value as an integer (`2.0` is the same value as `2`), the result will be a float. For example:\n\n`7.0 + 3 = 10.0`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Addition"
     }
    ],
    "files": [
     "code/operators/playground-addition.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-addition.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize that a float plus an int returns a float"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2430243078",
  "source": {
   "name": "string concatenation reading question",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below so that code will print:\n\n`I love string concatenation!`",
   "text": "```python\na = \"I love\"\nb = <<<\" string concatenation!\">>>\nc = <<<a + b>>>\nprint(c)\n```",
   "guidance": "Since there is not trailing space in the first line of code, the value of `b` must start with a leading space:\n\n`b = \" string concatenation!\"`\n\n`c` should be the resulting string when you concatenate `a` and `b`:\n\n`c = a + b`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Concatenation"
     }
    ],
    "files": [
     "code/operators/playground-concatenation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-concatenation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT concatenate strings",
   "tokens": {
    "blank": [
     "\" string concatenation!\"",
     "a + b"
    ],
    "text": [
     "```python\na = \"I love\"\nb = ",
     0,
     "\nc = ",
     0,
     "\nprint(c)\n```"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1387852852",
  "source": {
   "name": "reading question increment",
   "showName": false,
   "instructions": "## Reading Question\nComplete the code below so that the variable `a` is incremented by 1.",
   "text": "a = 0\na = <<<a + 1>>>",
   "guidance": "Remember, when incrementing, the new value of `a` is assigned the old value of `a` plus 1.\n\n`a = a + 1`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Increment a variable"
     }
    ],
    "files": [
     "code/operators/playground-addition.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-addition.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT increment a variable by 1",
   "tokens": {
    "blank": [
     "a + 1"
    ],
    "text": [
     "a = 0\na = ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3899963352",
  "source": {
   "name": "type casting reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following lines of code is **not** an example of type casting?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "66f7e47a-7dba-a926-6702-660251d3f2ce",
     "correct": false,
     "answer": "int(a)"
    },
    {
     "_id": "23dca353-32a9-56ad-eeab-d914be1a5e39",
     "correct": true,
     "answer": "string(a)"
    },
    {
     "_id": "4c5026ed-05b3-cc26-dfd8-5126758264c1",
     "correct": false,
     "answer": "float(a)"
    },
    {
     "_id": "4b46c010-2b52-566a-faaf-763312280742",
     "correct": false,
     "answer": "bool(a)"
    }
   ],
   "guidance": "Python uses abbreviations for type casting:\n* `int` is an integer\n* `float` is a floating point number\n* `str` is a string\n* `bool` is a boolean",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Type casting"
     }
    ],
    "files": [
     "code/operators/playground-type-cast.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-type-cast.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize type casting statements"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1960280201",
  "source": {
   "name": "subtraction reading question",
   "showName": false,
   "instructions": "## Reading Question\nRewrite the code below using the `-=` operator.\n\n```python\na = 42\nb = 17\na = a - b\n```",
   "text": "a = 42\nb = 17\na <<<-= b>>>",
   "guidance": "Using the `-=` operator means you do not need to use the `a` variable twice.\n\n`a -= b`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Subtraction"
     }
    ],
    "files": [
     "code/operators/playground-subtract.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-subtract.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the -= operator",
   "tokens": {
    "blank": [
     "-= b"
    ],
    "text": [
     "a = 42\nb = 17\na ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2775133348",
  "source": {
   "name": "division reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following statements about division in Python is **FALSE**?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6e07ef85-6277-b5d2-4df4-30213fb5a672",
     "correct": false,
     "answer": "You can divide a number by `True`."
    },
    {
     "_id": "a9e6eb0e-e55f-18cd-6808-35593f081805",
     "correct": true,
     "answer": "The `/` operator sometimes returns an integer."
    },
    {
     "_id": "8f30e985-771d-ea99-724c-de031c939e0e",
     "correct": false,
     "answer": "You are not allowed to divide by 0."
    },
    {
     "_id": "30a5ed15-b870-71c0-b094-e256d823aaaa",
     "correct": false,
     "answer": "The `//` operator never returns a float."
    }
   ],
   "guidance": "The `/` operator never returns an integer. It always returns a float. Use the `//` operator if you want an integer.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Division"
     }
    ],
    "files": [
     "code/operators/playground-division.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-division.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT understand how Python evaluates division"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2879887257",
  "source": {
   "name": "multiplication reading question",
   "showName": false,
   "instructions": "## Reading Question\nComplete the code below so that the program prints the product of `a` and `b`.",
   "text": "```\na = 9\nb = 3\nprint(a <<<* b>>>)\n```",
   "guidance": "Use `*` for multiplication. You also need to add the variable `b`, multiplication requires two numbers.\n\n`print(a * b)`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiplication"
     }
    ],
    "files": [
     "code/operators/playground-multiply.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-multiply.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the multiplication operator",
   "tokens": {
    "blank": [
     "* b"
    ],
    "text": [
     "```\na = 9\nb = 3\nprint(a ",
     0,
     ")\n```"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3925273068",
  "source": {
   "name": "order of operations reading question",
   "showName": false,
   "instructions": "## Reading Question\nDrag the blocks that reflect the order of operations for Python.",
   "initial": "Parentheses\nExponents\nMultiplication\nDivision\nAddition\nSubtraction",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Python uses PEMDAS for order of operations: **P**arentheses, **E**xponents, **M**ultiplication, **D**ivision, **A**ddition, and **S**ubtraction.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [
     "code/operators/playground-pemdas.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-pemdas.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use PEMDAS for order of operations"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2995934469",
  "source": {
   "name": "powers reading question",
   "showName": false,
   "instructions": "## Reading Question\nWrite a line of code that raises 7 to the power of 4.",
   "text": "<<<7 ** 4>>>",
   "guidance": "The power operator in Python is `**`. Since 7 is being raised to the power of 4, the answer is:\n\n`7 ** 4`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Powers"
     }
    ],
    "files": [
     "code/operators/playground-powers.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-powers.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the power operator",
   "tokens": {
    "blank": [
     "7 ** 4"
    ],
    "text": [
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-517993150",
  "source": {
   "name": "modulo reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhat does modulo do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "b0d51429-3aed-01ca-92ad-ce20cbc0e65f",
     "correct": false,
     "answer": "Determines if a number is even or odd"
    },
    {
     "_id": "be60e267-1540-5a7d-b705-874825e51125",
     "correct": false,
     "answer": "Is another name for division"
    },
    {
     "_id": "7f6f426e-a8f5-8703-e695-57f28c61f927",
     "correct": false,
     "answer": "Determines the percentage of two numbers"
    },
    {
     "_id": "6cd89e95-d353-b8e1-9171-f09a48854a72",
     "correct": true,
     "answer": "Returns the remainder after division is performed"
    }
   ],
   "guidance": "Modulo is the remainder after division is performed. So division is a part of modulo, but modulo is not division. Modulo can be used to determine if a number is even or odd, but modulo can do more than that. Finally, the `%` is used with modulo, but modulo does not deal with percentages.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Modulo"
     }
    ],
    "files": [
     "code/operators/playground-modulo.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-modulo.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT understand the function of modulo"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3881232648",
  "source": {
   "name": "operators formative assessment 1",
   "showName": false,
   "instructions": "## Python Operators\nWhat is the result of the following line of code?\n\n`7 / 2 + (5 % 2 * 5) ** 2 - 3`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "7cf56c31-8bde-0880-4f1a-86a3b2ed4866",
     "correct": false,
     "answer": "-2"
    },
    {
     "_id": "b946dd72-cd91-06fb-0307-67afe9df169f",
     "correct": false,
     "answer": "3.7"
    },
    {
     "_id": "48a58ed6-f9f0-9a4c-7136-9cf3f3cf6e98",
     "correct": true,
     "answer": "25.5"
    },
    {
     "_id": "70c9da1e-96b4-9af0-0904-c855a6864bc7",
     "correct": false,
     "answer": "69.25"
    }
   ],
   "guidance": "Using PEMDAS, here is the order in which the operations should be completed.\n\n1) `5 % 2 * 5` because it is in parentheses. The result is `5`.\n2) `5 ** 2` because exponents come next. The result is `25`\n3) `7 / 2` comes next because it is division. The result is `3.5`.\n4) `3.5 + 25 - 3` because addition and subtraction are last. The result is `25.5`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Synthesis of operators"
     }
    ],
    "files": [
     "code/operators/playground-modulo.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT combine order of operations and the different Python operators"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1458125378",
  "source": {
   "name": "operations formative assessment",
   "showName": false,
   "instructions": "## Order of Operations\nDrag the blocks below into the proper order of operations. You **will not** use all of the blocks.",
   "initial": "Parentheses\nExponents\nMultiplication and Division\nAddition and Subtraction\nTop to bottom #distractor\nGo from left to right #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Order of operation is determined by PEMDAS - Parentheses, Exponents, Multiplication and Division, and Addition and Subtraction.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [
     "code/operators/playground-modulo.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-modulo.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT determine the order of operations"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4192662618",
  "source": {
   "name": "Equality operator reading question",
   "showName": false,
   "instructions": "## Reading Question\nEnter the appropriate operator for each definition.",
   "text": "This operator checks if two values are equal - <<<==>>>\nThis operator assigns a value to a variable - <<<=>>>\nThis operator checks if two values are not equal - <<<!=>>>",
   "guidance": "* The `=` operator assigns a value to a variable\n* The `==` operator checks equality between two values\n* The `!=` operator checks inequality between two values",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Equality and inequality"
     }
    ],
    "files": [
     "code/operators/playground-equality.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-equality.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT differentiate between the assignment, equality, and inequality operators",
   "tokens": {
    "blank": [
     "==",
     "=",
     "!="
    ],
    "text": [
     "This operator checks if two values are equal - ",
     0,
     "\nThis operator assigns a value to a variable - ",
     0,
     "\nThis operator checks if two values are not equal - ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2569267396",
  "source": {
   "name": "less than reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following conditions would cause the expression `a <= b` to equate to true? **Hint:** there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "fdac3ba8-fbec-6f47-cefc-827e7a8d333a",
     "correct": true,
     "answer": "If `a` is less than `b`"
    },
    {
     "_id": "997aa2a9-3831-2839-25ea-6d7677089e45",
     "correct": false,
     "answer": "If `a` is less than and equal to `b`"
    },
    {
     "_id": "a4353528-7b00-96c9-23d0-cffcfa040a38",
     "correct": true,
     "answer": "If `a` is equal to `b`"
    },
    {
     "_id": "9eb481f4-8332-5a08-544c-055f149e9845",
     "correct": false,
     "answer": "If `a` is not equal to `b`"
    }
   ],
   "guidance": "There are two conditions that would case `a <= b` to be true. One is if `a` is less than `b` and the other is `a` is equal to `b`. As long as one of those conditions is true, then `a <= b` will be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operator"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Less than or equal to"
     }
    ],
    "files": [
     "code/operators/playground-less-than.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-less-than.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT determine when <= will be true"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3351578008",
  "source": {
   "name": "greater than reading question",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the statements below that are true.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "e2ad137b-2509-3b8b-aca0-e0642e0d5a9b",
     "correct": true,
     "answer": "19 >= 19"
    },
    {
     "_id": "7b70e6e8-0315-379c-4b28-37eb5a5e5c75",
     "correct": false,
     "answer": "18.9 >= 19"
    },
    {
     "_id": "05ab013a-fc51-8da0-31a5-0e7405a59b8d",
     "correct": false,
     "answer": "-19 >= 19"
    },
    {
     "_id": "1a56cffc-f8ae-09ab-8372-3158a8216901",
     "correct": true,
     "answer": "19 >= 9"
    }
   ],
   "guidance": "The `>=` operator only returns `True` if the first number is greater than or equal to the second number. So the follow statements would evaluate to true:\n`19 >= 19` and `19 >= 9`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Greater than or equal to"
     }
    ],
    "files": [
     "code/operators/playground-greater-than.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-greater-than.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the >= operator"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-583769072",
  "source": {
   "name": "and statement reading question",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks for the following two statements.",
   "text": "For an `and` statement to be true, all of the boolean expressions must be <<<true>>>.\n\nFor an `and` statement to be false, only one of the boolean expressions needs to be <<<false>>>.",
   "guidance": "All of the boolean expressions must be true if an `and` statement is true.\n\nOnly one boolean expression needs to be false for an `and` statement to be false.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "And operator"
     }
    ],
    "files": [
     "code/operators/playground-and.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-and.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT understand how the and statement works",
   "tokens": {
    "blank": [
     "true",
     "false"
    ],
    "text": [
     "For an `and` statement to be true, all of the boolean expressions must be ",
     0,
     ".\n\nFor an `and` statement to be false, only one of the boolean expressions needs to be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-855373313",
  "source": {
   "name": "or reading question",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks for the following two statements.",
   "text": "For an `or` statement to be false, all of the boolean expressions must be <<<false>>>.\n\nFor an `or` statement to be true, only one of the boolean expressions needs to be <<<true>>>.",
   "guidance": "The `or` operator requires that all boolean expressions be false for the whole thing to be false.\n\nHowever, only one boolean expressions needs to be true for an `or` operator to be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Or operator"
     }
    ],
    "files": [
     "code/operators/playground-or.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-or.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT understand how the or operator works",
   "tokens": {
    "blank": [
     "false",
     "true"
    ],
    "text": [
     "For an `or` statement to be false, all of the boolean expressions must be ",
     0,
     ".\n\nFor an `or` statement to be true, only one of the boolean expressions needs to be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-496869741",
  "source": {
   "name": "not reading question",
   "showName": false,
   "instructions": "## Reading Question\nEvaluate the two expressions below.",
   "text": "`5 != 4` returns <<<true>>>\n`not 5 == 4` returns <<<true>>>",
   "guidance": "`5 != 4` returns `True`\n`not 5 == 5` returns `True`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Not operator"
     }
    ],
    "files": [
     "code/operators/playground-not.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-not.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the not operator",
   "tokens": {
    "blank": [
     "true",
     "true"
    ],
    "text": [
     "`5 != 4` returns ",
     0,
     "\n`not 5 == 4` returns ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-841167959",
  "source": {
   "name": "short circuiting reading question",
   "showName": false,
   "instructions": "## Reading Question\nUse the dropdown menus to complete the text below.",
   "text": "## `or` Operator\nWhen using the `or` operator, Python checks to see if the first boolean expression is <<<true>>>. If it is <<<true>>>, Python returns <<<true>>> and ignores the second boolean expression.\n\n## `and` Operator\nWhen using the `and` operator, Python checks to see if the first boolean expression is <<<false>>>. If it is <<<false>>>, Python returns <<<false>>> and ignores the second boolean expression.",
   "guidance": "If the first boolean expression for the `or` operator is true, then the entire thing is true. The second boolean expression is ignored.\n\nIf the first boolean expression for the `and` operator is false, then the entire thing is false. The second boolean expression is ignored.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Short circuiting"
     }
    ],
    "files": [
     "code/operators/playground-short-circuiting.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-short-circuiting.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT explain what short circuiting means",
   "tokens": {
    "blank": [
     "true",
     "true",
     "true",
     "false",
     "false",
     "false"
    ],
    "text": [
     "## `or` Operator\nWhen using the `or` operator, Python checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", Python returns ",
     0,
     " and ignores the second boolean expression.\n\n## `and` Operator\nWhen using the `and` operator, Python checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", Python returns ",
     0,
     " and ignores the second boolean expression."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3233497894",
  "source": {
   "name": "boolean operators formative assessment 1",
   "showName": false,
   "instructions": "## Evaluating Expressions\nUsing your knowledge of boolean operators and order of operations, determine the result of the code below.\n\n```python\n5 ** 2 > (8 / 2) ** 2 and 10 % 4 > 3 \n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c00dc6c3-1896-aa9a-6a73-627f1edb1adc",
     "correct": false,
     "answer": "True"
    },
    {
     "_id": "060153d7-36f3-19ce-d533-a4485b847cfc",
     "correct": true,
     "answer": "False"
    }
   ],
   "guidance": "Using PEMDAS, here are steps to solving the arithmetic expressions:\n\n1) `5 ** 2` returns `25`\n2) `(8 / 2) ** 2` returns `16.0`\n3) `10 % 4` returns `2`\n4) `25 + 16 - 2` returns `39.0`\n\nSo the boolean expressions are:\n`25 > 16 and 2 > 3`\n\nThe first boolean expression is `True` and the second is `False`. True and False is `False`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations, boolean"
     }
    ],
    "files": [
     "code/operators/playground-short-circuiting.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT evaluate complex boolean expressions using order of operations"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2562209496",
  "source": {
   "name": "boolean operators formative assessment",
   "showName": false,
   "instructions": "## Boolean Operators\nDetermine if the code below returns true or false.\n\n```python\n(7 >= 7) and (True or 99 < 1) or not (3 > 5 and 7 < 10) and 2 != 4\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "319b6e0c-0a29-907c-61f7-3395068b94bf",
     "correct": true,
     "answer": "True"
    },
    {
     "_id": "d85892ee-63c8-90e2-7502-dff0b03690f0",
     "correct": false,
     "answer": "False"
    }
   ],
   "guidance": "First, start by evaluating the expressions in the parentheses. \n* `( 7 >= 7)` returns `True`. \n* (true or 99 < 1) returns `True`\n* `not (3 > 5 and 7 < 10)` returns `True`\n* `2 != 4` returns `True`\n\nSo the boolean expression is now `True and True or True and True`, which returns `True`.\n",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean operators"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT compute a complex boolean expression"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3436122489",
  "source": {
   "name": "input test",
   "showName": false,
   "instructions": "## Lab Challenge - Operators",
   "command": "python3 code/operators/lab-challenge.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "False",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1248082587",
  "source": {
   "name": "operators lab",
   "showName": false,
   "instructions": "## Lab Challenge - Operators",
   "text": "(3 <<<!=>>> 2) or (10 <<<%>>> < 1) and (5 <<<//>>> 2 <<<==>>> and not 9 <<<<=>>> 9)",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "!=",
     "%",
     "//",
     "==",
     "<="
    ],
    "text": [
     "(3 ",
     0,
     " 2) or (10 ",
     0,
     " < 1) and (5 ",
     0,
     " 2 ",
     0,
     " and not 9 ",
     0,
     " 9)"
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2739191035",
  "source": {
   "name": "lab challenge operators",
   "showName": false,
   "instructions": "## Lab Challenge\nWrite a boolean expression that incorporates one of the equality operators, one of the less than operators, one of the greater than operators, and two of the logical operators (see the table above). The result of your boolean expression must be `False`.",
   "command": "python3 .guides/secure/operators-lab-challenge-test.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "False",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean expressions"
     }
    ],
    "files": [
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT write code using a complex boolean expression"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-977027531",
  "source": {
   "name": "self-check operators 1",
   "showName": false,
   "instructions": "## Identify the operators that match the given description",
   "text": "<<<*>>> is the operator for multiplication\n<<<%>>> is the operator for modulo\n<<<//>>> is the operator for floor division (returns an integer)",
   "guidance": "* `*` is the operator for multiplication\n* `%` is the operator for modulo\n* `//` is the operator for floor division",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Modulo, Equality, Floor Division"
     }
    ],
    "files": [
     "code/operators/lab-arithmetic-operators.py",
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-arithmetic-operators.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize the operators which do not align with operators found in math class",
   "tokens": {
    "blank": [
     "*",
     "%",
     "//"
    ],
    "text": [
     0,
     " is the operator for multiplication\n",
     0,
     " is the operator for modulo\n",
     0,
     " is the operator for floor division (returns an integer)"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3217952406",
  "source": {
   "name": "self-check oder of operations",
   "showName": false,
   "instructions": "## Drag the blocks into the correct order of operations",
   "initial": "Parentheses\nExponents\nMultiplication and Division\nAddition and Subtraction",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Order of operations starts with any expression in parentheses. Next, any exponents are calculated. Then multiplication and division are done moving from left to right. Finally, addition and subtraction are done moving from left to right.",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the order of operations"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1366112161",
  "source": {
   "name": "self-check boolean",
   "showName": false,
   "instructions": "## What value do the following operators return?\n\n```\n==, !=, <, <=, >, >=\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c350bcd4-4026-ddc4-a5f1-896af661e4ff",
     "correct": false,
     "answer": "Float"
    },
    {
     "_id": "9af0561a-e9c4-4b73-6ad7-e1ec109e6b3e",
     "correct": false,
     "answer": "Integer"
    },
    {
     "_id": "d9e4085d-d941-5e1c-8e1d-8c661329afc6",
     "correct": false,
     "answer": "String"
    },
    {
     "_id": "6affa083-651d-3fac-2cf1-9a9119775d0c",
     "correct": true,
     "answer": "Boolean"
    }
   ],
   "guidance": "```\n==, !=, <, <=, >, >=\n```\n\nThe operators above are boolean operators. That means they return either true or false.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Opeators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean operators"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the return value of boolean operators"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2558245384",
  "source": {
   "name": "self-check",
   "showName": false,
   "instructions": "## Complete the sentences below with the appropriate operator",
   "text": "The <<<or>>> operator returns `True` when at least one of the boolean expressions is true.\n\nThe <<<and>>> operator returns `True` when all of the boolean expressions are true.",
   "guidance": "As long as one boolean expression is true, then the `or` operator will return `True`.\n\nOnly if all boolean expressions are true will, then the `and` operator will return `True`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Logical operators"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand when and & or return true",
   "tokens": {
    "blank": [
     "or",
     "and"
    ],
    "text": [
     "The ",
     0,
     " operator returns `True` when at least one of the boolean expressions is true.\n\nThe ",
     0,
     " operator returns `True` when all of the boolean expressions are true."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1194669827",
  "source": {
   "name": "self-check operators",
   "showName": false,
   "instructions": "## What is the result of the following expression?\n\n```python\nnot (5 != 3) and (5 % 3 >= 2)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "861885c2-296e-b8e0-3ffa-20efcf92d218",
     "correct": false,
     "answer": "True"
    },
    {
     "_id": "330f5f4b-c244-758c-524a-a014f77d5c97",
     "correct": true,
     "answer": "False"
    }
   ],
   "guidance": "Starting with parentheses, `5 != 3` is `True`. So `not True` would be `False`. Using the short circuit principal, we can stop evaluating the problem. Because we are using the `and` operator, both boolean expressions must be true for it to return `True`. Since we have `False` for the first expression, it cannot be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean expressions"
     }
    ],
    "files": [
     "code/operators/lab-boolean-operators.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-boolean-operators.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT evaluate a complex boolean expression"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3495364913",
  "source": {
   "name": "operators exercise 1",
   "showName": false,
   "instructions": "## Exercise 1\nDrag the code blocks into order such that the code returns `17.0`. Not all of the blocks will be used.",
   "initial": "a = 4\nb = 9\na = 10 #distractor\nb = 1 #distractor\na = 9 #distractor\nb = 4 #distractor\n\nprint(a * 3 + b - 8 / 2)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The correct answer is:\n\n```python\na = 4\nb = 9\nprint(a * 3 + b - 8 / 2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use the order of operations"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2974434701",
  "source": {
   "name": "operators exercise 2",
   "showName": false,
   "instructions": "## Exercise 2\nGiven the variables below, determine which `print` statement would return `False`.\n\n```python\na = True or False\nb = False and True\nc = False and False\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "e4d1f53d-fd77-9583-f0e2-e4feafa0ee5e",
     "correct": false,
     "answer": "`print(not c and b or a)`"
    },
    {
     "_id": "d2a314fb-c61c-d74d-c389-2b38b82b777e",
     "correct": false,
     "answer": "`print(a and b and c or True)`"
    },
    {
     "_id": "8b90da71-007e-2888-bed9-2a09a3bd50af",
     "correct": true,
     "answer": "`print(not b and not a or not not c)`"
    },
    {
     "_id": "fd77e604-a64f-3f03-f24f-e674e0ea9b13",
     "correct": false,
     "answer": "`print(a or c and not b)`"
    }
   ],
   "guidance": "The correct answer is:\n\n`print(not b and not a or not not c)`\n\nHere are the steps to resolve this expression:\n\n* `print(True and not a or not not c)`\n* `print(True and False or not not c)`\n* `print(True and False or not True)`\n* `print(True and False or False)`\n* `print(False or False)`\n* `print(False)`\n* `False`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Logical operators"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use logical operators"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-173449371",
  "source": {
   "name": "operators exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nWrite a program that outputs `Hello world`. Your program must do the following things:\n\n* Use two variables, one with `Hello ` and the other with `world`.\n* Use a single print statement.",
   "command": "python3 code/operators/exercise3.py",
   "preExecuteCommand": "",
   "guidance": "The variables names can be anything you want. One needs to contain the string `Hello ` and the other `world`. Don't forget that there needs to be a space separating the two words. To print both variables at once, use the `+` operator to concatenate the strings.\n\n```python\nvar_1 = \"Hello \"\nvar_2 = \"world\"\nprint(var_1 + var_2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": false,
    "ignoreNewline": false,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Hello world",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String concatenation"
     }
    ],
    "files": [
     "code/operators/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT concatenate two strings"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-240549419",
  "source": {
   "name": "operators exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nWrite a program that divides 7 by 2, but returns `3`.",
   "command": "python3 code/operators/exercise4.py",
   "preExecuteCommand": "",
   "guidance": "Division in Python always returns a float, but your program is expected to return an int. Use the floor division operator (`//`) to return an int. Floor division also truncates `3.5` to `3`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "3",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Floor division"
     }
    ],
    "files": [
     "code/operators/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use floor division"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4228136689",
  "source": {
   "name": "operators exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nWrite a program that produces the following output:\n\n```python\nIs the following boolean true or false?\n5 <= 7 or 7 % 4 < 0 and not 3 != 2\nThe answer is False\n```\n\nYour program must have a boolean expression.",
   "command": "python3 code/operators/exercise5.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Is the following boolean expression true or false?\n5 <= 7 or 7 % 4 < 0 and not 3 != 2\nThe answer is False",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean expressions"
     }
    ],
    "files": [
     "code/operators/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT evaluate a complex boolean expression"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2790602047",
  "source": {
   "name": "if statement syntax",
   "showName": false,
   "instructions": "## Reading Question\nRearrange the code blocks below to create an if statement. Not all of the code blocks will be used. **Hint:** do not forget about indenting.",
   "initial": "if 5 > 4 #distractor\nif (5 > 4) #distractor\nif 5 > 4:\n    print(\"1st command if true\")\n    print(\"2nd command if true\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "If statements in Python do not have parentheses and end with a `:`. Code that will run if the statement is true must be indented.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Selection statement"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If statement syntax"
     }
    ],
    "files": [
     "code/selection/if-statement-syntax.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/if-statement-syntax.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT understand the basic structure of an if statement"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1352008565",
  "source": {
   "name": "if statement reading questions",
   "showName": false,
   "instructions": "## Reading Question",
   "initial": "grade = 90\nif grade >= 70:\n    print(\"You passed\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Code that should run when the if statement is true should **always** be indented. The Python community indents four spaces.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditinals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Indenting code in an if statement"
     }
    ],
    "files": [
     "code/selection/if-statement.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/if-statement.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT structure an if statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-969795572",
  "source": {
   "name": "formative assessment if statement",
   "showName": false,
   "instructions": "## If Statement\nWhat does an if statement **not** do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a7db6a03-c448-8858-cea1-09b6bc38a703",
     "correct": false,
     "answer": "Allows specific code to run only when the boolean expression is true."
    },
    {
     "_id": "8d0b5862-4883-7f40-a39a-99e671924520",
     "correct": true,
     "answer": "If statements do not do anything if the boolean expression is false."
    },
    {
     "_id": "c6de5aa5-0f84-2082-8027-1d8c90cccca5",
     "correct": false,
     "answer": "Allows your program to make decisions about what to do."
    },
    {
     "_id": "cb24b48a-44c1-3662-5bb4-26aaf018b894",
     "correct": false,
     "answer": "Checks to see if a certain condition is true."
    }
   ],
   "guidance": "An if statement does not do anything if the boolean expression is false. It only tests to see if a condition is true. A false expression skips the indented code.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If statement"
     }
    ],
    "files": [
     "code/selection/if-statement.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/if-statement.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the purpose of an if statement"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-131952751",
  "source": {
   "name": "Formative assessment if statement",
   "showName": false,
   "instructions": "## Even Numbers\nComplete the if statement below so that it will determine if the variable `num` is greater than 100.",
   "text": "<<<if>>> num > 100<<<:>>>\n        print(\"num is greater than 100\")",
   "guidance": "The boolean expression is already provided. To complete the if statement, the keyword `if` should be used in the first blank, and a `:` should be used in the second.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean expression"
     }
    ],
    "files": [
     "code/selection/if-statement.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct the first line of an if statement",
   "tokens": {
    "blank": [
     "if",
     ":"
    ],
    "text": [
     0,
     " num > 100",
     0,
     "\n        print(\"num is greater than 100\")"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3776588336",
  "source": {
   "name": "if else syntax reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhat are the requirements of using an `else` statement? **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ce4a5aea-41fc-29aa-611d-a6ba0cf471e0",
     "correct": true,
     "answer": "There is no indentation"
    },
    {
     "_id": "817234b7-ee3f-0842-b52d-9405ae6a4cfa",
     "correct": true,
     "answer": "Use a `:` at the end"
    },
    {
     "_id": "382044fa-4cef-171d-8a8b-6e41d152400d",
     "correct": true,
     "answer": "Do not use another boolean expression"
    },
    {
     "_id": "81f3ca45-bbfe-2757-1011-6f1a4ca11174",
     "correct": true,
     "answer": "Code after the `else` must be indented"
    }
   ],
   "guidance": "All of the statements are true:\n* `else` should not be indented, i.e. it is aligned with the preceding `if` statement\n* Use a `:` after `else`\n* You do not declare another boolean expression\n* All code that runs if the boolean expression is false should be indented",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else syntax"
     }
    ],
    "files": [
     "code/selection/if-else-statement-syntax.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/if-else-statement-syntax.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the syntax of an if else statement"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2713895980",
  "source": {
   "name": "if else reading question",
   "showName": false,
   "instructions": "## Reading Question\nPlace the following code blocks in their proper place.",
   "initial": "if 10 < 7:\n    print(\"The boolean expression is false\")\nelse:\n    print(\"The boolean expression is true\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The if statement comes first. Of the two print statements, the one that prints `true` comes first. Then comes the else statement. Finally, the print statement that prints `false` comes last.\n\n```python\nif 10 < 7:\n    print(\"The boolean expression is true\")\nelse:\n    print(\"The boolean expression is false\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [
     "code/selection/if-else-statement.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/if-else-statement.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT understand the order of if else statements"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3628765968",
  "source": {
   "name": "Formative assessment 1 if else statement",
   "showName": false,
   "instructions": "## Debug the Code\nWhat is wrong with the code below? **Hint**, there is more than one right answer.(added for QA purposes ) (another try from macOS 10.14.16, Chrome 77)\n\n```python\nif 3 > 4\nprint(\"This is true\")\nelse\nprint(\"This is false\")\n```",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "0a882f4e-161b-79d9-c1cc-d64ebc600e5e",
     "correct": false,
     "answer": "There needs to be parentheses around the boolean expression"
    },
    {
     "_id": "8f5a52ab-2dc0-d360-0a71-e946567c1adb",
     "correct": true,
     "answer": "There needs to be a `:` after the if statement and the else"
    },
    {
     "_id": "252fa73d-2122-6f43-c1b6-081fde8368ac",
     "correct": true,
     "answer": "The print statements need to be indented"
    },
    {
     "_id": "f4a19333-2152-f731-f648-27b31f7c7f6f",
     "correct": false,
     "answer": "There needs to be a variable in the boolean expression"
    }
   ],
   "guidance": "A `:` should be used after the boolean expression and after the `else`. The print statements should be indented because they are to be run if the boolean expression is true (the first print statement) or false (the second print statement).\n\n```python\nif 3 > 4:\n    print(\"This is true\")\nelse:\n    print(\"This is false\")\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct an if else statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1573332278",
  "source": {
   "name": "elif syntax reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following `elif` statements is correct?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2be02c67-04df-db32-be6d-7617db6ffa3b",
     "correct": false,
     "answer": "`elif:`"
    },
    {
     "_id": "251bb5fc-5dc0-b4a9-154f-50dc2eb5f6a3",
     "correct": false,
     "answer": "`else if a < 10:`"
    },
    {
     "_id": "1c8847df-f40d-5a0c-44c8-d42ce4495a2e",
     "correct": true,
     "answer": "`elif a < 10:`"
    },
    {
     "_id": "36a614ca-33a3-78af-dc62-7eb54cf48c6a",
     "correct": false,
     "answer": "`elif a < 10`"
    }
   ],
   "guidance": "The `elif` statement is followed by a boolean expression and a `:`. That is why `elif a < 10:` is the correct answer.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statement"
     }
    ],
    "files": [
     "code/selection/elif-syntax.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/elif-syntax.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand syntax of the elif statement"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2639153112",
  "source": {
   "name": "elif efficiency reading question",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks of the passage below. Use the information above to help find the correct answers.",
   "text": "A series of elif statements can be more efficient that a series of if statements because the <<<elif>>> statements will <<<stop>>> as soon as there is a <<<true>>> boolean expression. The <<<if>>> statement, however, will keep going even if there is a <<<true>>> boolean expression.",
   "guidance": "A series of elif statements can be more efficient that a series of if statements because the **elif** statements will **stop** as soon as there is a **true** boolean expression. The **if** statement, however, will keep going even if there is a **true** boolean expression.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statement"
     }
    ],
    "files": [
     "code/selection/elif-efficiency.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/elif-efficiency.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand why elif statements can be more efficient",
   "tokens": {
    "blank": [
     "elif",
     "stop",
     "true",
     "if",
     "true"
    ],
    "text": [
     "A series of elif statements can be more efficient that a series of if statements because the ",
     0,
     " statements will ",
     0,
     " as soon as there is a ",
     0,
     " boolean expression. The ",
     0,
     " statement, however, will keep going even if there is a ",
     0,
     " boolean expression."
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3606655636",
  "source": {
   "name": "elif formative assessment",
   "showName": false,
   "instructions": "## Constructing an Elif Statement\nRearrange the code blocks below to build a proper elif statement.",
   "initial": "my_var = 7\nif my_var < 5:\n    print(\"Less than 5.\")\nelif my_var <= 10:\n    print(\"Between 5 and 10.\")\nelse:\n    print(\"Greater than 10.\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Start by declaring the variable. You cannot use a variable before creating it. Elif statements must have an if statement before it, so the if statement comes next. After that comes the elif statement. The else statement must come after the elif statement.\n\n```python\nmy_var = 7\nif my_var < 5:\n    print(\"Less than 5.\")\nelif my_var <= 10:\n    print(\"Between 5 and 10.\")\nelse:\n    print(\"Greater than 10.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditonals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statement"
     }
    ],
    "files": [
     "code/selection/elif-efficiency.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/elif-efficiency.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct an elif statement"
  }
 },
 {
  "type": "free-text-auto",
  "taskId": "free-text-auto-1329636127",
  "source": {
   "name": "stdin practice",
   "showName": false,
   "instructions": "## Convert If Statements to Elif Statements\nConvert the code below into a series of elif statements.\n\n```python\nif my_var == 1:\n    print(\"my_var is 1\")\nif my_var == 2:\n    print(\"my_var is 2\")\nif my_var == 3:\n    print(\"my_var is 3\")\nif my_var == 4:\n    print(\"my_var is 4\")\nif my_var == 5:\n    print(\"my_var is 5\")\n```",
   "command": "python3 .guides/secure/convert-if-to-elif.py",
   "timeoutSeconds": 40,
   "guidance": "Explanation",
   "showGuidanceAfterResponse": true,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "previewType": "RAW",
   "points": 1,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Free Text Autograde"
     }
    ],
    "files": [
     "code/selection/elif-efficiency.py"
    ],
    "opened": [
     {
      "type": "terminal",
      "panelNumber": 0,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-139432121",
  "source": {
   "name": "elif formative assessment 2",
   "showName": false,
   "instructions": "## Constructing an Elif Statement\nLook at the code below:\n\n```python\nif my_var == 1:\n    print(\"my_var is 1\")\nif my_var == 2:\n    print(\"my_var is 2\")\nif my_var == 3:\n    print(\"my_var is 3\")\nif my_var == 4:\n    print(\"my_var is 4\")\nif my_var == 5:\n    print(\"my_var is 5\")\n```\n\nUse the code blocks to create an equivalent program that uses elif statements instead of if statement. **Hint**, you will not use all of the code blocks.",
   "initial": "if my_var == 1:\n    print(\"my_var is 1\")\nelif my_var == 2:\n    print(\"my_var is 2\")\nelif my_var == 3:\n    print(\"my_var is 3\")\nelif my_var == 4:\n    print(\"my_var is 4\")\nelse:\n    print(\"my_var is 5\")\nelif my_var == 1: #distractor\nelse my_var == 5: #distractor\nelse if my_var == 2: #distractor\nelse if my_var == 3: #distractor\nelse if my_var == 4: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "All of the print statements are correct, so they can all be used. The if statement should be first since elif statements required one be first. `elif` is an abbreviation for `else it`, so all of statements with `else if` can be ignored. Finally, the program should end with `else`.\n\n```python\nif my_var == 1:\n    print(\"my_var is 1\")\nif my_var == 2:\n    print(\"my_var is 2\")\nif my_var == 3:\n    print(\"my_var is 3\")\nif my_var == 4:\n    print(\"my_var is 4\")\nif my_var == 5:\n    print(\"my_var is 5\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statements"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT create an elif statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2216399909",
  "source": {
   "name": "compound conditional reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhat is a compound conditional?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "f36a55e0-e7ef-6e0b-682d-7559b22f96af",
     "correct": false,
     "answer": "Two conditional statements but with only the `and` operator."
    },
    {
     "_id": "991415dd-0e6b-2f5c-bb3d-f98335ce8668",
     "correct": false,
     "answer": "Two if statements, one after the other."
    },
    {
     "_id": "29575170-c626-9aea-e4f4-81e2a5714f5f",
     "correct": true,
     "answer": "A conditional that has two or more boolean expressions."
    },
    {
     "_id": "c595f1b9-7213-8643-e01b-bf4600f24c6e",
     "correct": false,
     "answer": "Two conditional statements but with only the `or` operator."
    }
   ],
   "guidance": "A compound conditional is a conditional (an if statement) with two or more boolean expressions. Either of the keywords `and` and `or` can be used to link the boolean expressions together.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditionals"
     }
    ],
    "files": [
     "code/selection/compound-conditional-syntax.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/compound-conditional-syntax.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a compound conditional"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3946834266",
  "source": {
   "name": "compound conditional reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhy would you want to use a compound conditional? **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "674fd320-8af5-c8e7-3235-d9b78bae83c9",
     "correct": true,
     "answer": "If two or more thing have to be true."
    },
    {
     "_id": "f9529a87-bc47-7241-d090-27a406419b5d",
     "correct": false,
     "answer": "When you want your code to be faster."
    },
    {
     "_id": "4cc65d8f-88bd-44c5-01e6-e67acf0ca9c5",
     "correct": false,
     "answer": "You will get an error message if you don't use a compound conditional."
    },
    {
     "_id": "93a5675c-240e-fa6b-fca4-7bceeb6d52e1",
     "correct": true,
     "answer": "When you want your code to be more concise and easy to read."
    }
   ],
   "guidance": "Compound conditionals allow you to test two or more things to be true, and they make your code more concise and easy to read.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditionals"
     }
    ],
    "files": [
     "code/selection/compound-conditionals.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/compound-conditionals.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use compound conditionals"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3789781260",
  "source": {
   "name": "compound conditional assessment 1",
   "showName": false,
   "instructions": "## Compound Conditionals\nDrag the code blocks below to create a compound conditional that prints `Hello World`. **Hint**, not all of the code blocks will be used.",
   "initial": "if True or True:\n    print(\"Hello World\")\nif True: #distractor\nif True not True: #distractor\nif not True: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "A compound conditional requires two boolean expressions joined by either `and` or `or`. \n\n```python\nif True or True:\n    print(\"Hello World\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditional"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditional"
     }
    ],
    "files": [
     "code/selection/compound-conditionals.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/compound-conditionals.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a compound conditional"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-888446590",
  "source": {
   "name": "compound conditional assessment 2",
   "showName": false,
   "instructions": "## Compound Conditionals\n```python\nif x > 5:\n    if x < 20:\n        print(x)\n```\nUse the code blocks to convert the code above into a compound conditional. **Hint**, not all of the code blocks will be used.",
   "initial": "if x > 5 and x < 20:\n    print(x)\nif x < 5 and x > 20: #distractor\nif x > 5 or x < 20: #distractor\nif x > 5 not x < 20: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "If `x > 5` is true, then you get to ask if `x < 20`. If that is true, then you get to `print(x)`. So x must be greater and 5 **and** less than 20.\n\n```python\nif x > 5 and x < 20:\n    print(x)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditionals"
     }
    ],
    "files": [
     "code/selection/compound-conditionals.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/compound-conditionals.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT converta a nested conditional  to a compound conditional"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-14693278",
  "source": {
   "name": "parsons sample",
   "showName": false,
   "instructions": "Parsons with executable code",
   "initial": "if x $$toggle::/::%::+$$ 2 == 0:\n    print(\"Even\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"vartests\": [{\"initcode\": \"x = 8\", \"code\": \"\", \"message\": \"Testing with initial variable values x = 0 and y = 2\", \"variables\": {\"x\": 2}}]\n}",
   "grader": "2",
   "guidance": "Blah",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "terminal",
      "panelNumber": 0,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1838402046",
  "source": {
   "name": "moths challenge (conditionals)",
   "showName": false,
   "instructions": "## Month of the Year\nYour program should handle a variable `month` that has a number value between 1 and 12. Print the month of the year based on this number (1 is January, etc.).\n\n**Remember**, do not declare the variable `month` in your code when you submit it. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/conditionals_lab_test.py",
   "preExecuteCommand": "",
   "guidance": "The simplest way to solve this problem is to make a series of 12 if-statements.\n\n```python\nif month == 1:\n  print(\"January\")\nif month == 2:\n  print(\"February\")\nif month == 3:\n  print(\"March\")\nif month == 4:\n  print(\"April\")\nif month == 5:\n  print(\"May\")\nif month == 6:\n  print(\"June\")\nif month == 7:\n  print(\"July\")\nif month == 8:\n  print(\"August\")\nif month == 9:\n  print(\"September\")\nif month == 10:\n  print(\"October\")\nif month == 11:\n  print(\"November\")\nif month == 12:\n  print(\"December\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "3",
     "input": "",
     "output": "March",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "12",
     "input": "",
     "output": "December",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "10",
     "input": "",
     "output": "October",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "1",
     "input": "",
     "output": "January",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "11",
     "input": "",
     "output": "November",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "6",
     "input": "",
     "output": "June",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "8",
     "input": "",
     "output": "August",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/selection/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3257214820",
  "source": {
   "name": "self check conditionals definitions",
   "showName": false,
   "instructions": "## Self-Check Definitions\nThe sentences below are definitions for the different conditionals introduced this unit. Fill in the blanks with the appropriate conditional.",
   "text": "<<<If>>> statements only performs actions if the boolean expression is true. Nothing happens if it is false.\n\n<<<Compound conditional>>> statements test multiple boolean expressions at once. The expressions are linked together with `and` or `or`.\n\n<<<If else>>> statements checks to see if a boolean expression is true, and also allows for action if the expression is false.\n\n<<<If elif else>>> statements start with an if statement. They then have a series of boolean expressions. This conditional give you the most precision.",
   "guidance": "The if statement only performs an action if the boolean expression is true. Nothing is done if the expression is false.\n\nCompound conditionals are more than one boolean expression linked together with the keywords `and` or `or`.\n\nIf else statements perform a set of actions if the boolean expression is true. It performs another set of actions if the expression is false.\n\nIf elif else statements have a series of boolean expressions. A set of actions are performed if one of these expressions is true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Comparing the 4 different types of conditionals"
     }
    ],
    "files": [
     "code/selection/lab_challenge.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between the different types of conditionals",
   "tokens": {
    "blank": [
     "If",
     "Compound conditional",
     "If else",
     "If elif else"
    ],
    "text": [
     0,
     " statements only performs actions if the boolean expression is true. Nothing happens if it is false.\n\n",
     0,
     " statements test multiple boolean expressions at once. The expressions are linked together with `and` or `or`.\n\n",
     0,
     " statements checks to see if a boolean expression is true, and also allows for action if the expression is false.\n\n",
     0,
     " statements start with an if statement. They then have a series of boolean expressions. This conditional give you the most precision."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-946441677",
  "source": {
   "name": "self-check compound conditionals",
   "showName": false,
   "instructions": "## Self-Check Compound Conditionals\nSelect all of the compound conditionals that are correctly written. **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "0c7b92fb-5f63-62d3-7568-aba822ce815c",
     "correct": true,
     "answer": "if True and False:"
    },
    {
     "_id": "57b7eb2f-0dc6-015c-4aeb-7cbedc54781f",
     "correct": false,
     "answer": "if False not True:"
    },
    {
     "_id": "fd309319-5f88-aead-31ca-fba624aad8b7",
     "correct": true,
     "answer": "if not False or True:"
    },
    {
     "_id": "440b6906-cd90-4ea0-0eb5-b83bc79a6dcb",
     "correct": false,
     "answer": "if True, True:"
    }
   ],
   "guidance": "`if True and False:` - This is a correct answer because the keyword `and` is connecting more than one boolean expression.\n\n`if False not True:` - This not a correct answer because the keyword `not` cannot connect boolean expressions.\n\n`if not False or True:` - This is a correct answer because the keyword `or` is connecting two boolean expressions. The keyword `not` can be used in addition to `and` and `or`, but not by itself.\n\n`if True, True:` - This is not a correct answer because commas are not used to link boolean expressions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditionals"
     }
    ],
    "files": [
     "code/selection/lab_challenge.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT properly construct a compound conditional"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2074845473",
  "source": {
   "name": "self-check if else",
   "showName": false,
   "instructions": "## Self-Check 3\n\nDrag the appropriate code blocks into the box below. Your program should check to see if a number is even and print \"Even\". If the number is odd, then print \"Odd\". Assume the variable `x` represents the number to be tested.",
   "initial": "if x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\nif x % 2 = 0 #distractor\nif x // 2 == 0: #distractor\nelif: #distractor\nelse #distractor\nprint(Even) #distractor\nprint(Odd) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here is the correct answer:\n\n```python\nif x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n```\n\nHere is why the other options are incorrect:\n\n* `if x % 2 = 0` - The equality operator (`==`) is not used.\n* `if x // 2 == 0` - The `//` operator is floor division. To be even, there can be no remainder. The modulo operator (`%`) must be used instead.\n* `elif:` - First, `elif` required a boolean expression. Since a number can be either even or odd, `else:` is the better choice.\n* `else` - The `:` is missing.\n* `print(Even)` - The quotation marks are missing. Without them, Python will try to print the variable `Even`, which has not been declared. \n* `print(Odd)` - The quotation marks are missing. Without them, Python will try to print the variable `Odd`, which has not been declared. ",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [
     "code/selection/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT construct an if else statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3649559415",
  "source": {
   "name": "self check conditionals if",
   "showName": false,
   "instructions": "## Self-Check If Statements\nSelect all of the statements below that are true with regards to if statements. **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ae9339af-fb42-8d8e-417c-fb46b58232bf",
     "correct": true,
     "answer": "If statements only ask if a boolean expression is true."
    },
    {
     "_id": "3acea470-c092-f47c-fa6f-d2e9cda607a7",
     "correct": false,
     "answer": "If statements will perform a set of actions  if the boolean expression is false."
    },
    {
     "_id": "2aefb536-6703-74bd-6e97-314c0d90dd7b",
     "correct": false,
     "answer": "If statements provide the most precision of all the conditional statements."
    },
    {
     "_id": "279c31cc-b47f-1756-d5ef-c97da61a6514",
     "correct": true,
     "answer": "If statements are the simplest of all the conditionals."
    }
   ],
   "guidance": "The correct answers are:\n\n```\nIf statements only ask if a boolean expression is true.\n\nIf statements are the simplest of all the conditionals.\n```\n\nIf statements can only ask if a boolean expression is true. An else statement takes into account a false boolean expression.\n\nIf statements are the simplest because they ignore when a boolean expression is false, and they do not ask subsequent boolean expressions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Pyh"
     },
     {
      "name": "Category",
      "value": "If statement"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the characteristics of an if statement"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3355268222",
  "source": {
   "name": "self check conditionals elif",
   "showName": false,
   "instructions": "## Self-Check If Elif Else\nImagine that the variable `x` contains a number between 0 and 20. Rearrange the code blocks below to create  a program that see if `x` is between 0 and 5, 5 to 10, 10 to 15, or between 15 and 20.",
   "initial": "if x <= 5:\n    print(\"x is between 0 and 5\")\nelif x <= 10:\n    print(\"x is between 5 and 10\")\nelif x <= 15:\n    print(\"x is between 10 and 15\")\nelse:\n    print(\"x is between 15 and 20\")",
   "options": "{\n  \"sortableId\": \"sortable\"\n}",
   "grader": "",
   "guidance": "```python\nif x <= 5:\n    print(\"x is between 0 and 5\")\nelif x <= 10:\n    print(\"x is between 5 and 10\")\nelif x <= 15:\n    print(\"x is between 10 and 15\")\nelse:\n    print(\"x is between 15 and 20\")\n```\n\nThe order of the code is important. If the order were different, you could get a false positive. Take a look at the code below:\n\n```python\nx = 8\n\nif x <= 5:\n    print(\"x is between 0 and 5\")\nelif x <= 15:\n    print(\"x is between 10 and 15\")\nelif x <= 10:\n    print(\"x is between 5 and 10\")\nelse:\n    print(\"x is between 15 and 20\")\n```\n\nThe incorrect code would print `x is between 10 and 15` even though that is not true. The boolean expressions should go in ascending order.",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statements"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize that order is important with elif statements"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2805811716",
  "source": {
   "name": "conditionals exercise 1",
   "showName": false,
   "instructions": "**Remember**, do not declare the variable `x` in your code when you submit it. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/conditionals_exercise_1_test.py",
   "preExecuteCommand": "",
   "guidance": "Since you are testing if `x` is between two ranges, you need a compound conditional. Also, `x` can fall into either of the ranges, so use the `or` keyword to connect the two boolean expressions. Nothing is to be done if the compound conditional is false, so you do not need to use an `else` or `elif`. Here is one solution to the problem:\n\n```python\nif x > 0 and x < 25 or x > 75 and x < 100:\n    print(str(x) + \" is between 0 and 25 or 75 and 100\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "17",
     "input": "",
     "output": "17 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "93",
     "input": "",
     "output": "93 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound onditionals"
     }
    ],
    "files": [
     "code/selection/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to code a compound conditional"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2165783626",
  "source": {
   "name": "conditionals exercise 2",
   "showName": false,
   "instructions": "**Remember**, do not declare the variable `x` in your code when you submit it. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/conditionals_exercise_2_test.py",
   "preExecuteCommand": "",
   "guidance": "The question is asking a single question, is `x` divisible by 5? You do not need a compound conditional. Since you have to print two separate messages (one for true, the other for false), you will need to use `else`. There are no more questions about `x`, so you do not need to use `elif` Here is a possible solution:\n\n```python\nif x % 5 == 0:\n    print(str(x) + \" is divisible by 5\")\nelse:\n    print(str(x) + \" is not divisible by 5\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "5",
     "input": "",
     "output": "5 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "550",
     "input": "",
     "output": "550 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "17",
     "input": "",
     "output": "17 is not divisible by 5",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [
     "code/selection/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to code an if else conditional"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-662068084",
  "source": {
   "name": "conditionals exercise 3",
   "showName": false,
   "instructions": "**Remember**, do not declare the variable `x` in your code when you submit it. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/conditionals_exercise_3_test.py",
   "preExecuteCommand": "",
   "guidance": "Two things have to be true (divisible by 5 and even), so you need to use a compound conditional. Since both of these need to be true, use the `and` keyword to connect the boolean expressions. You will also need to print a message if the compound conditional is false, so use the `else` keyword. There are no more questions so do not use `elif`. Here is one possible solution:\n\n```python\nif x % 5 == 0 and x % 2 == 0:\n    print(str(x) + \" is divisible by 5 and even\")\nelse:\n    print(str(x) + \" is not divisible by 5 or it is odd\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "10",
     "input": "",
     "output": "10 is divisible by 5 and even",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "25",
     "input": "",
     "output": "25 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "7",
     "input": "",
     "output": "7 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditional, if else statement"
     }
    ],
    "files": [
     "code/selection/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT code a compound conditional with an else statement"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3603717044",
  "source": {
   "name": "conditionals exercise 4",
   "showName": false,
   "instructions": "**Remember**, do not declare the variable `x` in your code when you submit it. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/conditionals_exercise_4_test.py",
   "preExecuteCommand": "",
   "guidance": "The problem states that you have to use an `elif` statement. You also do not need a compound conditional because of the `elif`. Here is one possible solution:\n\n```python\nif x == \"red\":\n    print(x + \" is a primary color\")\nelif x == \"blue\":\n    print(x + \" is a primary color\")\nelif x == \"yellow\":\n    print(x + \" is a primary color\")\nelse:\n    print(x + \" is not a primary color\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "\"red\"",
     "input": "",
     "output": "red is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "yellow",
     "input": "",
     "output": "yellow is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "black",
     "input": "",
     "output": "black is not a primary color",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "if elif else statement"
     }
    ],
    "files": [
     "code/selection/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT code a conditional with elif"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3156139445",
  "source": {
   "name": "conditionals exercise 5",
   "showName": false,
   "instructions": "**Remember**, do not declare the variable `x` in your code when you submit it. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/conditionals_exercise_5_test.py",
   "preExecuteCommand": "",
   "guidance": "The problem does not specify how to code the solution. Like Exercise 4, you can use a series of `elif` statements to determine if `x` is a vowel. It is also possible to use a long compound conditional. Here is one possible solution:\n\n```python\nif x == \"a\" or x == \"e\" or x ==\"i\" or x == \"o\" or x == \"u\":\n    print(x + \" is a vowel\")\nelse:\n    print(x + \" is not a vowel\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "e",
     "input": "",
     "output": "e is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "f",
     "input": "",
     "output": "f is not a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "i",
     "input": "",
     "output": "i is a vowel",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditiona, elif statement"
     }
    ],
    "files": [
     "code/selection/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a conditional comparing strings"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3464309383",
  "source": {
   "name": "reading question list basics",
   "showName": false,
   "instructions": "## Reading Question\nSelect the code snippet that correctly declares the variable `my_list` as a list with the elements `1`, `2`, and `3`.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2699ee10-cf57-cea8-4327-011fe8a74bc8",
     "correct": false,
     "answer": "`my_list = (1, 2, 3)`"
    },
    {
     "_id": "65e5fa1c-7b27-151d-6852-e07eaf4b671a",
     "correct": false,
     "answer": "`my_list = {1, 2, 3}`"
    },
    {
     "_id": "4f54cae4-d5a6-b258-6e47-599ad3e9a4ec",
     "correct": false,
     "answer": "`my_list = [1 2 3]`"
    },
    {
     "_id": "8d815c2c-315b-6362-49ff-e9c3d63a07f6",
     "correct": true,
     "answer": "`my_list = [1, 2, 3]`"
    }
   ],
   "guidance": "Lists in Python are created with the `[]` brackets and each element is separated with a comma.\n\n```python\nmy_list = [1, 2, 3]\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List declaration"
     }
    ],
    "files": [
     "code/lists/list-basics.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-basics.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT to declare a list"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-853377932",
  "source": {
   "name": "reading question list operators",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks for the following sentences.",
   "text": "The assignment operator (`=`) <<<modifies>>> the original list.\n\nThe slice operator (`:`) <<<does not modify>>> the original list.",
   "guidance": "```\nThe assignment operator (`=`) modifies the original list.\n```\n The assignment operator does not return a new list. It modifies the original list.\n\n```\nThe slice operator (`:`) does not modify the original list.\n```\n\nThe slice operator does return a new list. It does not modify the original list.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List operators"
     }
    ],
    "files": [
     "code/lists/list-operators.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-operators.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how slice and the assignment operator affects the original list",
   "tokens": {
    "blank": [
     "modifies",
     "does not modify"
    ],
    "text": [
     "The assignment operator (`=`) ",
     0,
     " the original list.\n\nThe slice operator (`:`) ",
     0,
     " the original list."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2442920593",
  "source": {
   "name": "reading question list indecies",
   "showName": false,
   "instructions": "## Reading Question\nUse the list below to answer the following questions.\n\n```python\nmy_list = [32, 17, 89, 16, 5]\n```",
   "text": "The value of `my_list[1]` is <<<17>>>.\n\nThe value of `my_list[4]` is <<<5>>>.",
   "guidance": "Start counting with 0 when determining the index. So `my_list[1]` is `17` and `my_list[4]` is `5`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "List"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List index"
     }
    ],
    "files": [
     "code/lists/list-basics-2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-basics-2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT the proper index in a list",
   "tokens": {
    "blank": [
     "17",
     "5"
    ],
    "text": [
     "The value of `my_list[1]` is ",
     0,
     ".\n\nThe value of `my_list[4]` is ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-962382299",
  "source": {
   "name": "list basics formative assessment 1",
   "showName": false,
   "instructions": "## List Index\nUsing the list below, select the code snippet that references the third element in the array.\n\n```python\nmy_list = [1, 2, 3, 4, 5]\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6c8dd49e-6705-ce47-a5bd-a980c68dfff2",
     "correct": false,
     "answer": "`my_list[3]`"
    },
    {
     "_id": "ffa5f2d6-89c6-9c61-6d01-a89ec5285491",
     "correct": true,
     "answer": "`my_list[2]`"
    },
    {
     "_id": "933c6577-046c-db23-01dd-3620adbfd9d1",
     "correct": false,
     "answer": "3"
    },
    {
     "_id": "79a0357c-b82b-23f8-472a-400179edb1db",
     "correct": false,
     "answer": "`my_list[third]`"
    }
   ],
   "guidance": "The index of a list starts with 0. So we count 0, 1, 2. Index 2 represents the third element. When writing this in code, start with the list's name, square brackets, and the index in between the brackets.\n\n```\nmy_list[2]\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List index"
     }
    ],
    "files": [
     "code/lists/list-basics-2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-basics-2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT reference an element in a list with an index"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1857560190",
  "source": {
   "name": "formative assessment list basics 2",
   "showName": false,
   "instructions": "## Modifying a List\nEdit the list `my_list` so that it contains the elements `\"red\"`, `\"green\"`, and `\"blue\"` in that order.",
   "initial": "my_list[0] = \"red\"\nmy_list[1] = \"green\"\nmy_list[2] = \"blue\"\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"vartests\": {\"initcode\": \"my_list = [1, 2, 3]\", \"code\": \"\", \"message\": \"Checking your work\", \"variables\": {\"my_list\": [\"red\", \"green\", \"blue\"]}},\n  \"lang\":\"en\"\n}",
   "grader": "1",
   "guidance": "The key to solving this problem is to remember that the index starts with 0. Since `\"red\"` needs to the first element, use `my_list[0] = \"red\"`. The second element is `\"green\"`, so use `my_list[1] = \"green\"`. Finally, `\"blue\"` is the third element. Use `my_list[2] = \"blue\"`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List index, modify element"
     }
    ],
    "files": [
     "code/lists/list-basics-2.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT modify the value of list elements"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-760334949",
  "source": {
   "name": "test",
   "showName": true,
   "instructions": "test",
   "initial": "my_list[0] = \"red\"\nmy_list[1] = \"green\"\nmy_list[2] = \"blue\"",
   "options": "{\n \"sortableId\": \"sortable\",\n \"trashId\": \"sortableTrash\",\n \"vartests\": {\"initcode\": \"my_list = [1, 2, 3]\", \"code\": \"\", \"message\": \"Checking your work\", \"variables\": {\"my_list[0]\":\"red\", \"my_list[1]\":\"green\", \"my_list[2]\":\"blue\"}},\n \"lang\":\"en\"\n}",
   "grader": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4059727614",
  "source": {
   "name": "reading question list concatenation",
   "showName": false,
   "instructions": "## Reading Question\nWhat data types are used with the list concatenation operator (`+`)?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "3bb1b4a3-69ef-9da2-fdf2-5e616bd00db8",
     "correct": false,
     "answer": "The list concatenation operator requires a list and a string."
    },
    {
     "_id": "6551f611-a64b-440c-cb7a-dac25ffb64fb",
     "correct": false,
     "answer": "The list concatenation operator requires a list and a number."
    },
    {
     "_id": "d00b4308-df84-1e14-55d2-72215394b48f",
     "correct": true,
     "answer": "The list concatenation operator requires two lists."
    },
    {
     "_id": "d35b3611-581f-e6ef-839c-f965ca226a39",
     "correct": false,
     "answer": "The list concatenation operator requires a list and a boolean."
    }
   ],
   "guidance": "Only a list can be concatenated to a list. Trying to use any other data type will cause an error message.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Concatenation"
     }
    ],
    "files": [
     "code/lists/list-concat.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-concat.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT concatenate two lists"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-592043842",
  "source": {
   "name": "reading question list repetition",
   "showName": false,
   "instructions": "## Reading Question\nSelect the appropriate code blocks that will create the list:\n\n```python\n['Hello', 'Hello', 'Hello']\n```\n**Hint**, not all of the code blocks will be used.",
   "initial": "my_list = [\"Hello\"]\nprint(my_list * 3)\nmy_list = (\"Hello\") #distractor\nprint(my_list x 3) #distractor\nprint(my_list + 3) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List repetition"
     }
    ],
    "files": [
     "code/lists/list-repeat.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-repeat.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT repeat a list with the * operator"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-622392417",
  "source": {
   "name": "reading question in operator lists",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to complete the sentence about the `in` operator.",
   "text": "The `in` operator returns a <<<boolean>>> value.",
   "guidance": "The `in` operator returns a **boolean** value, which means either **true** or **false**.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "In operator, lists"
     }
    ],
    "files": [
     "code/lists/list-in.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-in.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the return value of the in operator",
   "tokens": {
    "blank": [
     "boolean"
    ],
    "text": [
     "The `in` operator returns a ",
     0,
     " value."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1182301890",
  "source": {
   "name": "reading question list length",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the relationship of the length of a list and the value of its last index?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2f5b5d7e-916d-679c-0f69-8d4d5299ec8b",
     "correct": true,
     "answer": "The length of a list is always 1 greater than the value of the last index."
    },
    {
     "_id": "7397b5b4-e78d-4e3b-f01f-691da82278fd",
     "correct": false,
     "answer": "The value of the length is equal to the value of the last index."
    },
    {
     "_id": "43316445-2692-ab9a-81b6-53533f80139f",
     "correct": false,
     "answer": "The value of the last index is 1 greater than the length."
    }
   ],
   "guidance": "Because you start counting at 0 for the index, it is always 1 smaller than the length of a list. For example, a list with the length of 4 will have 3 as the last index.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Length"
     }
    ],
    "files": [
     "code/lists/list-length.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-length.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the difference between the length of a list and its last index"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2278057412",
  "source": {
   "name": "reading question lists slice",
   "showName": false,
   "instructions": "## Reading Question\nChoose the correct list and select the correct values for the slice operator so that you will have a list of:\n\n```\n[98, 10, 1]\n```",
   "initial": "my_list = [32, 98, 10, 1, 77]\nmy_list[1:4]\nmy_list[98, 32, 10, 1, 77] #distractor\nmy_list[32, 98, 10, 77, 1] #distractor\nmy_list[0:3] #distractor\nmy_list[1:3] #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "The first step is to define the list. The slice operator returns consecutive elements in a list. That means you need a list with `98, 10, 1` in that order. So the list should be `my_list = [32, 89, 10, 1, 77]`. Next is to select the proper slice command. The slice operator includes the first number, but does not include the second number. Since we want elements 1, 2, and 3 from `my_list`, the slice command should be `my_list[1:4]`.\n\n```python\nmy_list[32, 98, 10, 1, 77]\nmy_list[1:4]\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/lists/list-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2706687738",
  "source": {
   "name": "list operators assessemtn 1",
   "showName": false,
   "instructions": "## Which Operator?\nWhich operator will tell if a list contains a certain value?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "d9f4a5a0-773b-6069-ebb0-d305a5e6aad8",
     "correct": false,
     "answer": "The `len` function"
    },
    {
     "_id": "df182e62-4198-61cd-b46c-bbd0d3e7ccd5",
     "correct": false,
     "answer": "The concatenation (`+`) operator"
    },
    {
     "_id": "bc8d3c6e-a11a-f2c5-5b0a-8f8f3fad03f1",
     "correct": false,
     "answer": "The slice (`:`) operator"
    },
    {
     "_id": "6a861429-1fab-b866-4d9b-0ccef4b0e54d",
     "correct": true,
     "answer": "The `in` operator"
    }
   ],
   "guidance": "To see if a value is an element of a list, use the `in` operator.\n\nThe 'len' function tells you the length of a list. The concatenation operator appends one list to another. Finally, the slice operator returns a subset of a list.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "in operator, list operators"
     }
    ],
    "files": [
     "code/lists/list-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate what each of the operators do"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2772542203",
  "source": {
   "name": "list operators assessment 2",
   "showName": false,
   "instructions": "## List Operators\nDrag the appropriate blocks and place them in the correct order. Your program should do the following things:\n\n* Check to see if the length of `list_1` is an element of `list_2`\n* If yes, print `yes`\n* If no, print `no`\n\n**Hint**, you will not use all of the blocks.",
   "initial": "if len(list_1) in list_2:\n    print(\"yes)\nelse:\n    print(\"no\")\nelif: #distractor\nif length(list_1) in list_2: #distractor\nif len(list_1) on list_2: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Use `len` to check the length of a list. Use `in` to see if a value is an element of a list. Use `else` since there is only question to answer. Putting this together, you get:\n\n```python\nif len(list_1) in list_2:\n    print(\"yes)\nelse:\n    print(\"no\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/lists/list-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use in and len "
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1778093803",
  "source": {
   "name": "list append reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following code snippets is the correct way to append `red` to the list `colors`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "1d522dee-ce1a-6136-66ba-d94a60fec6dc",
     "correct": false,
     "answer": "`my_list.append(\"red\")`"
    },
    {
     "_id": "ce698671-62a3-a2ea-631f-05d9cbf37960",
     "correct": true,
     "answer": "`colors.append(\"red\")`"
    },
    {
     "_id": "cb34396a-23cc-796d-4a77-4ac5747563de",
     "correct": false,
     "answer": "`colors[append(\"red\")]`"
    },
    {
     "_id": "5794c6bd-83f4-258e-de22-d86eec821c04",
     "correct": false,
     "answer": "`colors,append(\"red\")`"
    }
   ],
   "guidance": "The pattern for using a list method is:\n\nlist name + period + method + parameters\n\nThe answer is: `colors.append(\"red\")`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Methods, append"
     }
    ],
    "files": [
     "code/lists/list-append.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-append.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use the append method for lists"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2033383199",
  "source": {
   "name": "reading question pop list method",
   "showName": false,
   "instructions": "## Reading Question\nRearrange the code blocks below to create a loop that creates the following output:\n\n```python\n[1, 2, 3, 4]\n[1, 2, 3]\n[1, 2]\n[1]\n```\n**Hint**, you will not use all of the blocks.",
   "initial": "my_list = [1, 2, 3, 4]\nfor i in range(4):\n    print(my_list)\n    my_list.pop()\npop(my_list) #distractor\npop,my_list() #distractor\npop.my_list[] #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "1) Declare the variable, `my_list`. \n2) Create the loop that runs four times. It has to run four times because there are four lines of output.\n3) Print `my_list`. If the `pop` statement comes first, then the first line of output would be `[1, 2, 3]`. This does not match the output in the problem.\n4) Pop off the last element of the list.\n\n```python\nmy_list = [1, 2, 3, 4]\nfor i in range(4):\n    print(my_list)\n    my_list.pop()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Pop method"
     }
    ],
    "files": [
     "code/lists/list-pop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-pop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the pop method inside a loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3805979875",
  "source": {
   "name": "reading question list insert",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below so that the string `\"brown\"` will become the fourth element of the list `colors`.",
   "text": "`colors.insert(<<<3>>>, <<<\"brown\">>>)`",
   "guidance": "The `insert` method always starts with the index. Since the new object should appear fourth, the index is 3 (indexes start counting with 0). The object to be inserted is the string `\"brown\"`\n\n```python\ncolors.insert(3, \"brown\")\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Insert method"
     }
    ],
    "files": [
     "code/lists/list-insert.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-insert.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT insert an object into a list",
   "tokens": {
    "blank": [
     "3",
     "\"brown\""
    ],
    "text": [
     "`colors.insert(",
     0,
     ", ",
     0,
     ")`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4061005599",
  "source": {
   "name": "reading question lists remove method",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of reasons why you would want to use the `remove` method. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ec2c9a8f-dea9-9aaa-ac98-6569d0af7b1d",
     "correct": true,
     "answer": "You want to remove an element from a list"
    },
    {
     "_id": "25eb6abf-836d-4641-513e-f9cab617a329",
     "correct": false,
     "answer": "You want to have access to the element that was removed from the list"
    },
    {
     "_id": "c052529a-c80d-19c5-7ac6-7fb5faa894dd",
     "correct": true,
     "answer": "You want to remove an element by its value, not its index"
    }
   ],
   "guidance": "All of the options are reasons to use the `remove` method.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Remove method"
     }
    ],
    "files": [
     "code/lists/list-remove.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-remove.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand why to use the remove method"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3051307281",
  "source": {
   "name": "reading question count method",
   "showName": false,
   "instructions": "## Reading Question\nDrag the appropriate code blocks to the box below. Your program should print the string \"It appeared more than three times.\" **Hint**, you will not use all of the code blocks, and declaring `my_list` should come first.",
   "initial": "my_list = [2, 4, 4.0, 6, 16/4, 12 % 5, 2.0, 4 * 0.5]\nx = my_list.count(2)\nif x > 3:\n    print(\"It appeared more than three times.\")\nx = my_list.count(4) #distractor\nx = list.count(2) #distractor\nx = my_list.count(\"2\") #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Declaring the variable `my_list` is the first step. The next step is to determine the value of `x`. `x = my_list.count(\"2\")` can be discarded because the string `\"2\"` does not appear in `my_list`. `x = list.count(2)` can be discarded because there is no variable named `list` (`list` is also a keyword, you can't use it for a variable name). Finally, `x = my_list.count(4)` can be discarded because this returns `3` which is not greater than `3`. So the string would not print to the screen. That leaves `x = my_list.count(2)` as the correct answer.\n\n```python\nmy_list = [2, 4, 4.0, 6, 16/4, 12 % 5, 2.0, 4 * 0.5]\nx = my_list.count(2)\nif x > 3:\n    print(\"It appeared more than three times.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Count method"
     }
    ],
    "files": [
     "code/lists/list-count.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-count.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the count method in a conditional"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3349955060",
  "source": {
   "name": "reading question index method",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blank below so that the code snippet returns the string `4`.",
   "text": "my_list = [flower, 3, True, 16.4, \"flower\", 32]\nmy_list.index(<<<\"flower\">>>)",
   "guidance": "The answer is not `flower` because that would return index 0. The string \"flower\" is located at index 4. So `my_list.index(\"flower\")`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Index method"
     }
    ],
    "files": [
     "code/lists/list-index.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-index.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use index to find a particular element in a list",
   "tokens": {
    "blank": [
     "\"flower\""
    ],
    "text": [
     "my_list = [flower, 3, True, 16.4, \"flower\", 32]\nmy_list.index(",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1411581104",
  "source": {
   "name": "reading question list sort",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the statements that are true about the `sort` method. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "cded748f-68ee-e71d-2803-9063cd0d7361",
     "correct": true,
     "answer": "The `sort` method can sort a list with mixed datatypes (i.e. floats, ints, strings, etc.)"
    },
    {
     "_id": "173584f7-ad4e-b871-f33a-1decfe00984c",
     "correct": false,
     "answer": "The `sort` method can only sort numbers"
    },
    {
     "_id": "588d723c-a360-8df6-f37f-320bab544789",
     "correct": true,
     "answer": "The `sort` method can sort lists in ascending and descending order"
    },
    {
     "_id": "7a9484ed-1413-9d58-e38e-75856f80593b",
     "correct": false,
     "answer": "The `sort` method returns a new list"
    }
   ],
   "guidance": "The correct answers are:\n\n* The `sort` method can sort a list with mixed datatypes (i.e. floats, ints, strings, etc.)\n* The `sort` method can sort lists in ascending and descending order\n\nThe `sort` method works with lists that have datatypes other than numbers. The `sort` method does not return a new list. It modifies the original list.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Sort method"
     }
    ],
    "files": [
     "code/lists/list-sort.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-sort.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand what the sort method can do"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2518298496",
  "source": {
   "name": "reading question reverse method",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blank with the result of performing the `reverse` method on the list `my_list`.\n\n**Important**, put spaces between each element in the new list. It will be counted as wrong if not.",
   "text": "```python\nmy_list = [\"hat\", 421, 37.2, False, \"zebra\"]\n```\nThe new value of `my_list` is:\n[<<<\"zebra\", False, 37.2, 421, \"hat\">>>]",
   "guidance": "The correct answer is:\n[\"zebra\", False, 37.2, 421, \"hat\"]\n",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse method"
     }
    ],
    "files": [
     "code/lists/list-reverse.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-reverse.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT reverse a list",
   "tokens": {
    "blank": [
     "\"zebra\", False, 37.2, 421, \"hat\""
    ],
    "text": [
     "```python\nmy_list = [\"hat\", 421, 37.2, False, \"zebra\"]\n```\nThe new value of `my_list` is:\n[",
     0,
     "]"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1820692199",
  "source": {
   "name": "Formative assessment 1 list methods",
   "showName": false,
   "instructions": "## List Methods\nDrag the appropriate code blocks to the box below. Your program should print a list that looks like this:\n\n`[\"Python\", \"List\", \"Methods\"]`\n\n**Hint**, not all of the code blocks will be used.",
   "initial": "my_list = [\"DELETE ME\", \"Python\", \"List\", \"Methods\"]\nmy_list.remove(\"DELETE ME\")\nprint(my_list)\nmy_list.pop() #distractor\nmy_list.remove(0) #distractor\nmy_list.pop(\"DELETE ME\") #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The difference between `pop` and `remove` is that `remove` searches for the object to remove. `pop` searches for an index and then removes the element at that index. `pop` also returns the element removed from the list.\n\nWhen dealing with an unsorted list, using `remove` is easier than using `pop`. ",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Remove method"
     }
    ],
    "files": [
     "code/lists/list-reverse.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT differentiate the usage between pop and remove"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2068019503",
  "source": {
   "name": "formative assessment 2 list methods",
   "showName": false,
   "instructions": "## List Methods\nDrag the appropriate code blocks to the box below. Your program should print a list that looks like this:\n\n`[\"Python\", \"List\", \"Methods\"]`\n\n**Hint**, not all of the code blocks will be used.",
   "initial": "my_list = [\"Methods\", \"Python\"]\nmy_list.reverse()\nmy_list.insert(1, \"List\")\nprint(my_list)\nmy_list.sort() #distractor\nmy_list.insert(\"List\", 1) #distractor\nmy_list.append(\"List\") #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here are the steps needed to print the correct list:\n\n1) Declare the list\n2) Sort the list to make `\"Python\"` the first element in the list\n3) Insert the string `\"List\"` into `my_list`. Remember, the `insert` method takes two parameters. The first one is the index to be used, and the second is the object to add to the list.\n4) Print the newly modified list\n\n```python\nmy_list = [\"Methods\", \"Python\"]\nmy_list.reverse()\nmy_list.insert(1, \"List\")\nprint(my_list)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse method, insert method"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use the reverse and insert methods to modify a list"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3133020826",
  "source": {
   "name": "reading question sum function",
   "showName": false,
   "instructions": "Drag the appropriate code blocks to the box below. Your program should calculate the average value of a list of numbers.",
   "initial": "my_list = [5, 17, 2, 3, 3]\ntotal = sum(my_list)\nnum_elements = len(my_list)\navg = total / num_elements\nprint(avg)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"vartests\": [{\"initcode\": \"avg = 0\",\n                \"code\": \"\",\n                \"message\": \"Testing...\",\n                \"variables\": {\"avg\": 6}\n               }\n              ],\n  \"executable_code\": \"my_list = [5, 17, 2, 3, 3]\\ntotal = sum(my_list)\\nnum_elements = len(my_list)\\navg = total / num_elements\\nprint(avg)\"\n}",
   "grader": "4",
   "guidance": "Here are the steps to solving the problem:\n1) Declare the variable `my_list`.\n2) Declare the variable `total` as the sum of `my_list`. This could also be done as step 3.\n3) Declare the variable `num_elemets` as the length of `my_list`. This could also be done as step 2.\n4) Declare `avg` and assign it the sum divided by the number of elements in the list.\n5) Print `avg`\n\n```python\nmy_list = [5, 17, 2, 3, 3]\ntotal = sum(my_list)\nnum_elements = len(my_list)\navg = total / num_elements\nprint(avg)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Sum function"
     }
    ],
    "files": [
     "code/lists/list-sum.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-sum.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use the sum function to help calculate the average of a list"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2224587180",
  "source": {
   "name": "reading question min function",
   "showName": false,
   "instructions": "## Reading Question\nDrag the appropriate code blocks to the box below. Select the a value for `my_var` so that the variable `smallest` has the same value as `my_var`.",
   "initial": "myVar = $$toggle::1::2::3$$\nmyList = [1.75, 4, my_var, 2, 5]\nsmallest = min(my_list)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"vartests\": {\n    \"initcode\": \"\",\n    \"code\": \"\",\n    \"message\": \"Testing...\",\n    \"variables\": {\"smallest\": 1}\n  },\n  \"executable_code\": \"myVar = 1\\nmyList = [1.75, 4, 1, 2, 5]\\nsmallest = min(myList)\"\n}",
   "grader": "4",
   "guidance": "Only the value of `1` will cause",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/lists/list-min.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-min.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-643226606",
  "source": {
   "name": "min function reading question",
   "showName": false,
   "instructions": "## Reading Question\nImagine that you have a list that has all of the golf scores for you and your friends. In which scenario would you use the `min` function?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "bd247410-ca67-76b2-9d43-243f90e11651",
     "correct": false,
     "answer": "To find out who had the highest score"
    },
    {
     "_id": "b74223ab-acbc-913a-fe1b-1e2078da8de3",
     "correct": false,
     "answer": "To find the total of all the scores"
    },
    {
     "_id": "540543ca-6a9d-d5d9-a69a-b13cd08eb734",
     "correct": true,
     "answer": "To find out who had the lowest score"
    },
    {
     "_id": "2218197f-44d0-1283-23c4-b855e94a2149",
     "correct": false,
     "answer": "To find the average score"
    }
   ],
   "guidance": "The `min` function returns the smallest value, so it would be used to find out who had the lowest score.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Min function"
     }
    ],
    "files": [
     "code/lists/list-min.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-min.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine the right situation for the min function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4085522795",
  "source": {
   "name": "reading question max function",
   "showName": false,
   "instructions": "## Reading Question\nClick on all of the data types that work with the `max` functions. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "e7cd3666-662d-2473-8fc1-67901b53cdea",
     "correct": true,
     "answer": "When the list is composed of only strings."
    },
    {
     "_id": "93b47ab7-7809-7936-01b9-31e2bb88e991",
     "correct": false,
     "answer": "When the list is composed of numbers and strings."
    },
    {
     "_id": "0f6222fa-4e18-958b-ff62-147a4213576f",
     "correct": true,
     "answer": "When the list is composed of floats and ints."
    },
    {
     "_id": "a9007604-15d4-88e3-1f78-3be76bbe5ad1",
     "correct": true,
     "answer": "When the list is composed of just ints."
    }
   ],
   "guidance": "The `max` function can work with numbers, both floats and ints. The `max` function can also work with strings, but the list must be entirely strings. Mixing numbers and strings will cause an error.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Max function"
     }
    ],
    "files": [
     "code/lists/list-max.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-max.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the data types that work with the max function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3889301665",
  "source": {
   "name": "formative assessment 1 list of numbers",
   "showName": false,
   "instructions": "## List of Numbers\nFill in the blanks with the proper code for each of the variables below. You are given the list `my_list` to help you write your code.",
   "text": "my_list = [14, 56, 71, 29 ,40, 11]\ntotal = <<<sum(my_list)>>>\nlargest = <<<max(my_list)>>>\nsmallest = <<<min(my_list)>>>",
   "guidance": "The variable `total` is looking for the sum of the elements in the list. `total = sum(my_list)`\n\nThe variable `largest` is looking for the largest element in the list. `largest = max(my_list)`\n\nThe variable `smallest` is looking for the smallest element in the list. `smallest = min(my_list)`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Min, max, and sum functions"
     }
    ],
    "files": [
     "code/lists/list-max.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-max.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use min, max, and sum in the appropriate context",
   "tokens": {
    "blank": [
     "sum(my_list)",
     "max(my_list)",
     "min(my_list)"
    ],
    "text": [
     "my_list = [14, 56, 71, 29 ,40, 11]\ntotal = ",
     0,
     "\nlargest = ",
     0,
     "\nsmallest = ",
     0
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3902608667",
  "source": {
   "name": "formative assessment 2 list of numbers",
   "showName": false,
   "instructions": "## List of Numbers\nDrag the appropriate code blocks to the box below. Your code will end with the block `print(result)`. Arrange the code blocks in such a way that `result` would be 11. **Hint**, not all of the blocks will be used.",
   "initial": "my_list = [1, 2, 3, 4, 5]\nresult = sum(my_list) + min(my_list) - max(my_list)\nprint(result)\nresult = min(my_list) + max(my_list) - sum(my_list) #distractor\nresult = sum(my_list) - min(my_list) - max(my_list) #distractor\nresult = sum(my_list) + min(my_list) + max(my_list) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "First start with defining the variable `my_list`. Next, calculate the sum, min, and max of `my_list`. The sum is 15, the min is 1, and the max is 5. To make `result` equal 11, you add the min to the sum (16) and then subtract the max.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Min, max, and sum functions"
     }
    ],
    "files": [
     "code/lists/list-max.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT to do calculations using the min, max, and sum functions"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-608694394",
  "source": {
   "name": "formative assessment 2 list of numbers",
   "showName": false,
   "instructions": "## List of Numbers\nImagine that you have a list called `my_list`. Which code sample would calculate the min, the max, and the average of `my_list`.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "81c6d598-750a-9ca6-b1b5-d143babe8a5f",
     "correct": false,
     "answer": "```\nminimum = min(my_list)\nmaximum = max(my_list)\naverage = avg(my_list)\n```"
    },
    {
     "_id": "9c88b89d-263d-abf3-50e8-333c6c4a0619",
     "correct": true,
     "answer": "```\nminimum = min(my_list)\nmaximum = max(my_list)\naverage = sum(my_list) / len(my_list)\n```"
    },
    {
     "_id": "da7b947d-6317-c80e-96a9-66cf11c62d7d",
     "correct": false,
     "answer": "```\nminimum = max(my_list)\nmaximum = min(my_list)\naverage = sum(my_list) / len(my_list)\n```"
    },
    {
     "_id": "df112b04-f903-6d14-692d-12a55d25ed72",
     "correct": false,
     "answer": "```\nminimum = min(my_list)\nmaximum = max(my_list)\naverage = len(my_list) / sum(my_list)\n```"
    }
   ],
   "guidance": "To calculate the minimum value of the list, use `minimum = min(my_list)`.\nTo calculate the maximum value of the list, use `maximum = max(my_list)`.\nTo calculate the average value of the list, find the sum of the list and then divide by the length of the list - `avg = sum(my_list) / len(my_list)`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4088401606",
  "source": {
   "name": "reading question list iteration",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to complete the for loop that iterates over the list `colors` and prints each item in the list.",
   "text": "colors = [\"red\", \"green\", \"blue\", \"yellow\", \"black\"]\nfor <<<color>>> in <<<colors>>>:\n    print(<<<color>>>)",
   "guidance": "The solution to this problem is based on the naming convention that the variable for iteration is the singular of the list. Since the list is `colors`, then the iteration variable is `color`. The iteration variable is also used with the `print` statement.\n\n```python\ncolors = [\"red\", \"green\", \"blue\", \"yellow\", \"black\"]\nfor color in colors:\n    print(color)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "List"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List iteration"
     }
    ],
    "files": [
     "code/lists/list-iterate.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-iterate.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT to apply the naming convention for list iteration",
   "tokens": {
    "blank": [
     "color",
     "colors",
     "color"
    ],
    "text": [
     "colors = [\"red\", \"green\", \"blue\", \"yellow\", \"black\"]\nfor ",
     0,
     " in ",
     0,
     ":\n    print(",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4064533170",
  "source": {
   "name": "reading question while loop list iteration",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich of the following things must you do manually when iterating over a list with a while loop? **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "461692ef-82b8-8d5b-786b-47d6b280ec88",
     "correct": true,
     "answer": "Create a variable for the length of the list."
    },
    {
     "_id": "0f94deec-1165-dfb2-3a70-5121455b314a",
     "correct": true,
     "answer": "Create a variable for the index."
    },
    {
     "_id": "324284dc-52db-317a-f074-85f84d85624e",
     "correct": true,
     "answer": "Reference a list element with the list name and index."
    },
    {
     "_id": "647a95fc-0d22-0c3d-ef62-6e093389321c",
     "correct": true,
     "answer": "Increment the index variable."
    }
   ],
   "guidance": "All of the listed tasks must be done manually when using a while loop to iterate over a list.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List iteration while loop"
     }
    ],
    "files": [
     "code/lists/list-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how to iterate over a list with a while loop"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-172255665",
  "source": {
   "name": "formative assessment 1 list iteration",
   "showName": false,
   "instructions": "## List Iteration\nDrag the appropriate code blocks to the box below. Your code should be a for loop that iterates over a list called `animals` and prints each element in the list.",
   "initial": "for animal in animals:\n    print(animal)\nwhile animal in animals: #distractor\nprint(animals[i]) #distractor\nfor animals in animals: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "```python\nfor animal in animals:\n    print(animal)\n```\n\nThe convention is for loops is to use a variable that is the singular of the list. This same variable is used to reference the element in the list.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Iteration for loop"
     }
    ],
    "files": [
     "code/lists/list-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a for loop that iterates over a list"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1661992395",
  "source": {
   "name": "formative assessment 2 list iteration",
   "showName": false,
   "instructions": "## List Iteration\nFill in the blanks below to make a while loop that iterates over a list called `colors` and prints each element in the list.",
   "text": "length = <<<len(colors)>>>\ni = <<<0>>>\n\nwhile <<<i>>> < <<<length>>>:\n    print(<<<colors[i]>>>)\n    i += <<<1>>>",
   "guidance": "While loops require that you determine the length of a list, create an index variable, check to see if the index is greater than the length of the list, reference the element with the list name and index, and increment the index variable.\n\n```python\nlength = len(colors)\ni = 0 \n\nwhile i < length:\n    print(colors[i]) \n    i += 1 \n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List iteration while loop"
     }
    ],
    "files": [
     "code/lists/list-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT iterate over a list with a while loop",
   "tokens": {
    "blank": [
     "len(colors)",
     "0",
     "i",
     "length",
     "colors[i]",
     "1"
    ],
    "text": [
     "length = ",
     0,
     "\ni = ",
     0,
     "\n\nwhile ",
     0,
     " < ",
     0,
     ":\n    print(",
     0,
     ")\n    i += ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-798976136",
  "source": {
   "name": "lab question list operators",
   "showName": false,
   "instructions": "## Append versus Concatenate\nWhy does the program above use the `append` method instead of the concatenate operator (`+`) when adding a number to either the `odd` or `even` lists?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a3ee2078-9661-73a7-6807-423818a0c568",
     "correct": false,
     "answer": "You cannot concatenate lists"
    },
    {
     "_id": "c6756a90-897a-55e9-b872-264bdf2ca710",
     "correct": false,
     "answer": "Either `append` or `+` would work"
    },
    {
     "_id": "46c59224-ebd9-3b5a-da03-fa8de8fde545",
     "correct": true,
     "answer": "Because you need two lists in order to concatenate"
    },
    {
     "_id": "e26e0b47-cf7e-9b29-501e-0ef46b144a8c",
     "correct": false,
     "answer": "Because `append` comes first alphabetically"
    }
   ],
   "guidance": "The `append` method adds a value to a list. The concatenate operator combines two lists. Since `number` is an int and not a list, you must use the `append` method.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Append method"
     }
    ],
    "files": [
     "code/lists/lab-odd-even.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-odd-even.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize when to use append and not concatenate"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2639349764",
  "source": {
   "name": "lab question sum",
   "showName": false,
   "instructions": "## Calculating Sum\nWhy was the variable called `total` and not `sum`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6e0628da-5e35-ee38-659c-3197464c31f9",
     "correct": false,
     "answer": "Using `total` causes the program to run faster."
    },
    {
     "_id": "8016f561-8aa8-dc61-2e69-8f94ac7dc7c0",
     "correct": false,
     "answer": "`total` is a more descriptive variable name than `sum`."
    },
    {
     "_id": "1af540ac-3834-ef7a-b546-7b10bb55d8d4",
     "correct": true,
     "answer": "`sum` is a keyword reserved for the `sum` function. Variable names cannot be a keyword."
    },
    {
     "_id": "ec571b34-c1c7-73a2-49b6-7dde777cbcad",
     "correct": false,
     "answer": "Python mandates that cumulative totals must be stored in a variable called `total`."
    }
   ],
   "guidance": "`sum` is a reserved keyword in Python. Variable names cannot be one of these keywords. `total` is used because it is an accurate description of the job of the variable, and it is not a keyword.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variable"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Keyword, naming"
     }
    ],
    "files": [
     "code/lists/lab-sum.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-sum.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT choose a variable name that is not a keyword"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1589399517",
  "source": {
   "name": "lab list slicing a list",
   "showName": false,
   "instructions": "Fill in the blanks below. Using the list `my_list`, complete the `slice` operator so that it returns `[21, 17, 33]`.",
   "text": "my_list = [45, 99, 21, 17, 33, 7]\nmy_list[<<<2>>>:<<<5>>>]",
   "guidance": "The first element in the answer is `21`. Starting with 0, the index of `21` is 2. The third element in the answer is `33`. The index for `33` is 4. However, the second parameter of the `slice` operator does not include the element. Use 5 to ensure the slice includes `33`.\n\n`my_list[2:5]`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/lists/lab-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "2",
     "5"
    ],
    "text": [
     "my_list = [45, 99, 21, 17, 33, 7]\nmy_list[",
     0,
     ":",
     0,
     "]"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1990229047",
  "source": {
   "name": "lab sorting colors",
   "showName": true,
   "instructions": "Drag the appropriate code blocks to the box below. Your program should use a list, the `in` operator, and a conditional to print `\"True\"`. **Hint**, not all of the code blocks will be used.",
   "initial": "my_list = [11, 71, 65, 42, 3]\nif 3 in my_list:\n    print(\"True\")\nif 6 in list: #distractor\nmy_list = [13, 33, 23, 88, 9] #distractor\nlist_1 = [3, 52, 198, 76, 20] #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here is the solution:\n```python\nmy_list = [11, 71, 65, 42, 3]\nif 3 in my_list:\n    print(\"True\")\n```\n\n* `if 6 in list:` - 6 does exist in any of the lists\n* `my_list = [13, 33, 23, 88, 9]` - does not have the element 3\n* `list_1 = [3, 52, 198, 76, 20]` - there is no `in` statement that references `list_1`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "In statement"
     }
    ],
    "files": [
     "code/lists/lab-color-sort.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-color-sort.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the in statement to find an element in a list"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3211690469",
  "source": {
   "name": "list lab challenge",
   "showName": false,
   "instructions": "When you are ready, submit your code to be graded.",
   "command": "python3 code/lists/lab-challenge.py",
   "preExecuteCommand": "",
   "guidance": "There are several ways to solve this problem. Here is one solution. Start by declaring an empty list `final_result` that will hold the final result of your program. Iterate through the list `numbers`. Use modulo to determine if the element in `numbers` is odd or even. If it is odd, append the string `\"odd\"` to `final_result`. If the element is even, append the string `\"even\"` to`final_result`. After iterating through `numbers`, print `final_result`.\n\n```python\nfinal_result =[]\nfor number in numbers:\n    if number % 2 == 0:\n      final_result.append(\"even\")\n    else:\n      final_result.append(\"odd\")\nprint(final_result)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "5 6 7 8",
     "input": "",
     "output": "['odd', 'even', 'odd', 'even']",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "4 3 7 6 8 9 10 23 44",
     "input": "",
     "output": "['even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'odd', 'even']",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "7 7 7 7 7",
     "input": "",
     "output": "['odd', 'odd', 'odd', 'odd', 'odd']",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Iterate, append method, modulo"
     }
    ],
    "files": [
     "code/lists/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT iterate over a list, append to another list, use modulo"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3095758084",
  "source": {
   "name": "lists exercise 1",
   "showName": false,
   "instructions": "Submit your code when you are ready.",
   "command": "python3 code/lists/exercise1.py",
   "preExecuteCommand": "",
   "guidance": "The trick to this problem is being able to access the index of the list. The basic format of this is `list[index]`. However, you will need to use the `index` method to find the index of `number`.\n\n```python\nfor number in numbers:\n    if number > 10:\n        numbers[numbers.index(number)] = '*'\n\nprint(numbers)\n```\n\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "10 50 60 9",
     "input": "",
     "output": "[10, '*', '*', 9]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5 10 5 10 5 10 5 10",
     "input": "",
     "output": "[5, 10, 5, 10, 5, 10, 5, 10]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "17 8 16 5 42 3 21",
     "input": "",
     "output": "['*', 8, '*', 5, '*', 3, '*']",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "For loop, index method"
     }
    ],
    "files": [
     "code/lists/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT use a for loop and iteration variable to modify elements in a list"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2183474331",
  "source": {
   "name": "exercise 2 lists",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/lists-exercises-2-test.py",
   "preExecuteCommand": "",
   "guidance": "Test the length of the list. If it is greater than 5, use the `*` operator to repeat the list 3 times. Else, print the list once.\n\n\n```python\nif len(my_list) < 5:\n  print(my_list * 3)\nelse:\n  print(my_list)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "'cat' 'dog'",
     "input": "",
     "output": "['cat', 'dog', 'cat', 'dog', 'cat', 'dog']",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "1 2 3 4 5 6",
     "input": "",
     "output": "['1', '2', '3', '4', '5', '6']",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "1 2 3",
     "input": "",
     "output": "['1', '2', '3', '1', '2', '3', '1', '2', '3']",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Category",
      "value": "Repeat list, * operator"
     }
    ],
    "files": [
     "code/lists/exercise2.py",
     "code/lists/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "SWBAT repeat a list with the `*` operator"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4058655817",
  "source": {
   "name": "exercise 3 lists",
   "showName": false,
   "instructions": "**Do not** submit your code to be graded with the variable strings. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/lists-exercises-3-test.py",
   "preExecuteCommand": "",
   "guidance": "To arrange a list in alphabetical order, use the `sort` method. To remove the first element from the list, you can use the `pop` method, but don't forget to pass 0 as the parameter so you will remove the first element. If you don't pass 0 as a parameter, `pop` will remove the last element. You can also use `print(strings[0])` as well.\n\n```python\nstrings.sort()\nprint(strings.pop(0))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "cat dog bird zebra apple",
     "input": "",
     "output": "apple",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "zebra act boy 1 nest",
     "input": "",
     "output": "1",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "aaa apple ask announce about",
     "input": "",
     "output": "aaa",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Sort method, pop method"
     }
    ],
    "files": [
     "code/lists/exercise3.py",
     "code/lists/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT sort a list and remove the first element"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3335272242",
  "source": {
   "name": "exercise 4 lists",
   "showName": false,
   "instructions": "**Do not** submit your code to be graded with the variable `numbers`. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/lists-exercises-4-test.py",
   "preExecuteCommand": "",
   "guidance": "First, you need to find what is the last element in the list. There are several ways to do this, but the most concise is `numbers[-1]`. You are going to append a number that is 1 greater than `numbers[-1]` to the list `numbers`. Do this a second time. Since an action is repeated, a loop would work well. Finally, print the newly modified list.\n\n```python\nfor i in range(2):\n  numbers.append(numbers[-1] +1)\n\nprint(numbers)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "3 4 5 6",
     "input": "",
     "output": "[3, 4, 5, 6, 7, 8]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "9 10 11 12",
     "input": "",
     "output": "[9, 10, 11, 12, 13, 14]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "20 21 22 23 24",
     "input": "",
     "output": "[20, 21, 22, 23, 24, 25, 26]",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Append method, -1 index"
     }
    ],
    "files": [
     "code/lists/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT reference the last element in a list, and append elements to the list"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1616286894",
  "source": {
   "name": "lists exercise 5",
   "showName": false,
   "instructions": "**Do not** submit your code to be graded with the variable `numbers`. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/lists-exercises-5-test.py",
   "preExecuteCommand": "",
   "guidance": "The solution that works best is one in which you can easily access the index of element as you iterate through the list. The traditional for loop that uses `numbers[numbers.index(number)]` to access the index can cause a problem when the list `numbers` is full of the same number. The `index` method returns the lowest index for repeating elements in a list.\n\nThis solution will use a while loop. First, calculate the length of the list and declare a variable for the index as 0. Set up your while loop and ask if the index is an odd number. If yes, insert a `'*'` at the location of `index`. Once you insert a new element in the list, you need to increment the `length` variable to reflect this change. Because this is a while loop, you need to manually increment the `index` variable. Finally, print the list.\n\n```python\nlength = len(numbers)\nindex = 0\n\nwhile index < length:\n  if index % 2 != 0:\n    numbers.insert(index, '*')\n    length += 1\n  index += 1\n    \nprint(numbers)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "1 2 3 4",
     "input": "",
     "output": "[1, '*', 2, '*', 3, '*', 4]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "9 2 5 6",
     "input": "",
     "output": "[9, '*', 2, '*', 5, '*', 6]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "2 4 6 8",
     "input": "",
     "output": "[2, '*', 4, '*', 6, '*', 8]",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Iteration, insert method"
     }
    ],
    "files": [
     "code/lists/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT iterate over a list without the traditional for loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3547173064",
  "source": {
   "name": "formative assessment 2 list basics",
   "showName": false,
   "instructions": "## List Basics\nComplete the code below such that the second element becomes `7`.",
   "text": "my_list[1, 2, 3, 4]\nmy_list[<<<1>>>] <<<=>>> 7",
   "guidance": "The second element of an array uses the index of 1 (start counting with 0). The assignment operator (`=`) is used to modify the element.\n\n`my_list[1] = 7`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Modify a list"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT change the value of an element",
   "tokens": {
    "blank": [
     "1",
     "="
    ],
    "text": [
     "my_list[1, 2, 3, 4]\nmy_list[",
     0,
     "] ",
     0,
     " 7"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-976098584",
  "source": {
   "name": "lab question 1 fundamentals",
   "showName": false,
   "instructions": "## Lab Question\nSelect all of the correct ways a string can be declared. **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "63a1dad0-c1c9-fb74-0e42-1e1e86175ea9",
     "correct": true,
     "answer": "my_string = \"I am a string\""
    },
    {
     "_id": "83112ff9-d5a2-7f91-8f67-ba29549e16d9",
     "correct": false,
     "answer": "my_string = \"I am a string'"
    },
    {
     "_id": "e8c05ead-5430-47fe-8c0d-5c35681328fd",
     "correct": true,
     "answer": "my_string = '\"I am a string\"'"
    },
    {
     "_id": "2cf7c3e6-9347-43d3-d3d3-d0d085c31952",
     "correct": true,
     "answer": "my_string = 'I am a string'"
    }
   ],
   "guidance": "Strings can be declared with either single or double quotes. However, you must be consistent. If you start with a single quote, end with a single quote. The same is true for double quotes. \n\n```python\nmy_string = 'I am a string'\nmy_string = \"I am a string\"\n```\n\nYou can have both single and double quotes as long as you are consistent. The outer quotes must match just as the inner quotes must match. That is why the line of code below is also correct.\n\n```python\nmy_string = '\"I am a string\"'\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Declaring strings"
     }
    ],
    "files": [
     "code/fundamentals/lab-print.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/lab-print.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify which quotes can be used to declare a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1694007804",
  "source": {
   "name": "lab question 2 fundamentals",
   "showName": false,
   "instructions": "## Lab Question\nWhat are the rules for variable names in Python? **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "72d06037-074e-55b3-89b2-6dd02a3439c3",
     "correct": true,
     "answer": "You cannot use a keyword"
    },
    {
     "_id": "1939e00e-a091-a19f-fd64-a1063f17eac5",
     "correct": false,
     "answer": "You must use capital letters"
    },
    {
     "_id": "df338ea4-bb95-9f98-6627-6976decc967b",
     "correct": true,
     "answer": "The variable name must start with a letter or an underscore"
    },
    {
     "_id": "77af80f6-81e7-9a06-5db7-8680a85cd8c9",
     "correct": false,
     "answer": "Variable names must be a noun"
    },
    {
     "_id": "ebfc943b-5e7d-c5d6-89ba-0950f13924f5",
     "correct": true,
     "answer": "The rest of the variable name can only be letters, numbers, or an underscore"
    }
   ],
   "guidance": "There are three rules for creating a variable name:\n1) You cannot use a Python keyword\n2) The variable name must start with a letter or an underscore\n3) The rest of the variable name can be letters, numbers, or an underscore",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Declaring Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Variable naming rules"
     }
    ],
    "files": [
     "code/fundamentals/lab-variables.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/lab-variables.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the rules for making a variable name"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2141727151",
  "source": {
   "name": "lab question 2 operators",
   "showName": false,
   "instructions": "## Lab Question\nWhich of the following operators **cannot** be used with strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "afe9075a-3566-5f07-9d5e-aab0268de4bf",
     "correct": false,
     "answer": "`+`"
    },
    {
     "_id": "0734ebf1-f20c-3e6e-a8c3-8037f02d472a",
     "correct": false,
     "answer": "`*`"
    },
    {
     "_id": "6e9c9b0a-05fc-1372-e9b4-af78f734b840",
     "correct": true,
     "answer": "`/`"
    }
   ],
   "guidance": "The `/` (division) operator can only be used with numbers. When used with strings, the `+` operator becomes concatenation and the `*` operator repeats a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String operators"
     }
    ],
    "files": [
     "code/operators/lab-strings.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-strings.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the operators that can be used with strings"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3300199222",
  "source": {
   "name": "lab question 1 loops",
   "showName": false,
   "instructions": "Arrange the blocks below so that the output will be:\n\n```python\nHere is the word 'Hello' 15 times:\nHello Hello Hello\nHello Hello Hello\nHello Hello Hello\nHello Hello Hello\nHello Hello Hello\n```",
   "initial": "my_string = \"Here is the word 'Hello' 15 times:\"\nprint(my_string)\nfor i in range(0, 5):\n    print(\"Hello \" * 3)",
   "options": "{\n  \"sortableId\": \"sortable\"\n}",
   "grader": "",
   "guidance": "1) Declare the variable `my_string`\n2) Print `my_string`\n3) Create a for loop that runs 5 times\n4) Print `Hello Hello Hello`\n\n```python\nmy_string = \"Here is the word 'Hello' 15 times:\"\nprint(my_string)\nfor i in range(0, 5):\n    print(\"Hello \" * 3)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "For loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "for loop syntax"
     }
    ],
    "files": [
     "code/loops/lab-1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/lab-1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT construct a for loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2436923214",
  "source": {
   "name": "reading question string basics",
   "showName": false,
   "instructions": "## Reading Question\nAnswer the following questions about strings by filling in the blanks.",
   "text": "Strings are composed of a sequence of <<<characters>>>.\nAll strings have a <<<length>>>.\nIndividual characters are referenced with an <<<index>>>.",
   "guidance": "Here are the three properties of strings:\n1) All strings are a sequence of characters\n2) All strings have a length (the total number of characters).\n3) Characters in a string are referenced with an index.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String properties"
     }
    ],
    "files": [
     "code/strings/string-properties.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-properties.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the three properties of a string",
   "tokens": {
    "blank": [
     "characters",
     "length",
     "index"
    ],
    "text": [
     "Strings are composed of a sequence of ",
     0,
     ".\nAll strings have a ",
     0,
     ".\nIndividual characters are referenced with an ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2380152059",
  "source": {
   "name": "reading question multiline strings",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the difference between using `\\` and `\"\"\"` when making multiline strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "acdd2ade-a3b5-674f-c1fe-3e0ee400cc2f",
     "correct": false,
     "answer": "There is no difference."
    },
    {
     "_id": "ed02d033-7c5c-57d7-e578-ea8deb895048",
     "correct": false,
     "answer": "The `\\` preserves whitespace, while the `\"\"\"` allows you to continue writing the string on the next line."
    },
    {
     "_id": "6453e77c-faeb-5eff-306a-c6cfdd8d7031",
     "correct": false,
     "answer": "`\"\"\"` limits you to 79 characters, while `\\` adds a newline character."
    },
    {
     "_id": "fbf62b74-d503-8430-9711-ebd12e428552",
     "correct": true,
     "answer": "The `\"\"\"` preserves whitespace, while the `\\` allows you to continue writing the string on the next line."
    }
   ],
   "guidance": "The triple quote (`\"\"\"`) is used to create a string that preserves whitespace. Your string can go across multiple lines and have whatever indentation you would like.\n\nThe backslash (`\\`) is used to continue writing a string on the next line. The Python community typically types 79 characters per line. Use the backslash if your string is longer than 79 characters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/strings/string-multiline.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-multiline.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT write a multiline string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2460911919",
  "source": {
   "name": "reading question immutability",
   "showName": false,
   "instructions": "## Reading Question\nWhat does it mean that a string is immutable?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6ca2cb22-2d0a-16bb-40a0-04da97dc82eb",
     "correct": false,
     "answer": "You cannot assign a variable a new string value"
    },
    {
     "_id": "37e8fcb6-305f-60c4-7043-c413e0df189a",
     "correct": true,
     "answer": "You cannot modify characters in a string"
    },
    {
     "_id": "35b1f717-408f-5a69-ae6c-0cbd63f03cf1",
     "correct": false,
     "answer": "You can change the individual characters in a string"
    },
    {
     "_id": "f462d4c6-e0a4-f6f4-2067-1b1c2ccf28d2",
     "correct": false,
     "answer": "You can assign a variable a new string value"
    }
   ],
   "guidance": "A string is immutable because you cannot alter individual characters. For example, `my_string[0] = \"A\"` is trying to change the first character of a string to `A`. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Immutability"
     }
    ],
    "files": [
     "code/strings/immutability.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/immutability.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define string immutability"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2648320213",
  "source": {
   "name": "reading question escape characters",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the ways to make a contraction (`It's`) inside a string declaration. **Hint**, there are more than one correct response.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "59ece00c-b9e7-c44c-cabc-6ffd4c853435",
     "correct": true,
     "answer": "`my_string = \"It's my birthday today!\"`"
    },
    {
     "_id": "a30b5bb0-ec9d-3d11-935d-700822749c39",
     "correct": false,
     "answer": "`my_string = 'It's my birthday today!'`"
    },
    {
     "_id": "e130b0de-cbf7-f5fc-e23a-2fa78d440b99",
     "correct": false,
     "answer": "`my_string = \"It/'s my birthday today!\"`"
    },
    {
     "_id": "7c61a796-06e0-ec3e-e51a-b1724a1704d5",
     "correct": true,
     "answer": "`my_string = 'It\\'s my birthday today!'`"
    }
   ],
   "guidance": "There are two possible ways to make a contraction inside a string.\n1) Use double quotation marks for the string declaration and a single quote for the contraction. `my_string = \"It's my birthday today!\"\n2) Use single quotation marks for the string declaration and the escape character for the contraction. `my_string = 'It\\'s my birthday today!'`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Escape characters"
     }
    ],
    "files": [
     "code/strings/escape-characters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/escape-characters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use quotes inside quotes"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3496110909",
  "source": {
   "name": "reading question strip method",
   "showName": false,
   "instructions": "## Reading Question\nAssume you have the string `my_string = \"The cat in the hat\"`. Which of the strip methods below **would not** modify `my_string`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9dcda578-dc17-b6e1-e1df-3fecf688d1e1",
     "correct": false,
     "answer": "my_string.strip(\"The\")"
    },
    {
     "_id": "5e4b42e3-709a-f745-393d-8e6113f4b750",
     "correct": true,
     "answer": "my_string.strip(\"cat\")"
    },
    {
     "_id": "8beaa416-aa23-7a11-6c8b-f9c344e1ebce",
     "correct": false,
     "answer": "my_string.strip(\"hat\")"
    },
    {
     "_id": "66f68856-57f0-9e72-2857-85b0440076ff",
     "correct": false,
     "answer": "my_string.strip(\"the hat\")"
    }
   ],
   "guidance": "The `strip` method only removes characters from the beginning or the end of a string. The only option that has characters not at the beginning or the end was `my_string.strip(\"cat\")`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "strip method, string methods"
     }
    ],
    "files": [
     "code/strings/join-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/join-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize the limits of the strip method"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2673636806",
  "source": {
   "name": "reading question upper method",
   "showName": false,
   "instructions": "## Reading Question\nHow does the `upper` method work if strings are immutable?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "0cf35663-7870-a8a7-957a-310fc8582d66",
     "correct": false,
     "answer": "`upper` is an exception, and modifies the original string"
    },
    {
     "_id": "4d0585af-0377-031f-d97c-ebce5e2093b2",
     "correct": false,
     "answer": "`upper` deletes the original string and replaces it with a modified string."
    },
    {
     "_id": "269d0514-ba60-947a-f4ca-5c67f1c15b25",
     "correct": false,
     "answer": "Because the string has all the same characters, it's not really modifying the original string."
    },
    {
     "_id": "f46365f5-5319-9fe2-95d3-f2fbe550d65c",
     "correct": true,
     "answer": "`upper` creates a copy of the original string and modifies the copy."
    }
   ],
   "guidance": "Because characters in a string cannot be modified (that includes converting them to uppercase), a copy of the original string is made, and it is the copy that is converted to uppercase.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String immutability"
     }
    ],
    "files": [
     "code/strings/upper-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/upper-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how methods do not violate the immutability of strings"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-493832508",
  "source": {
   "name": "reading question lower method",
   "showName": false,
   "instructions": "## Reading Question\nHow many parameters does the `lower` method have?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "7b3832a2-b813-4db8-5d14-8e65a90d9384",
     "correct": true,
     "answer": "0"
    },
    {
     "_id": "40252e54-288b-fe99-b9b4-fd39b86daf83",
     "correct": false,
     "answer": "1"
    },
    {
     "_id": "310c3373-14c5-64f8-99c4-304f288979fe",
     "correct": false,
     "answer": "2"
    },
    {
     "_id": "2f84456f-0d50-a7d2-ec4c-fec5f63e3333",
     "correct": false,
     "answer": "3"
    }
   ],
   "guidance": "Parameters are the information between the parentheses. Since there is nothing between the parentheses when the `lower` method is used, there are zero parameters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters, methods"
     }
    ],
    "files": [
     "code/strings/lower-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lower-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine the number of parameters for a method"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1257635771",
  "source": {
   "name": "reading question capitalize",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blank below so that the first letter of the string variable `my_string` is uppercase.",
   "text": "```python\nmy_string = \"governments of the Industrial World, you weary giants of flesh and steel, I \\\ncome from Cyberspace, the new home of Mind.\"\nprint(my_string<<<.capitalize()>>>)\n```",
   "guidance": "Since you only want to make the first character uppercase, use the `capitalize` method. Do not forget to put a `.` after the string name and before the method name. Methods also require parentheses with any parameters. `capitalize` does not have any paramenters.\n\n```python\nprint(my_string.capitalize())\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Methods, capitalize method"
     }
    ],
    "files": [
     "code/strings/capitalize-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/capitalize-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT call a string method",
   "tokens": {
    "blank": [
     ".capitalize()"
    ],
    "text": [
     "```python\nmy_string = \"governments of the Industrial World, you weary giants of flesh and steel, I \\\ncome from Cyberspace, the new home of Mind.\"\nprint(my_string",
     0,
     ")\n```"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2695027968",
  "source": {
   "name": "title method reading question",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the following that are true about the `title` method. **Hint** there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "c5301b59-6bab-27ec-0afa-a193ec3ee95b",
     "correct": true,
     "answer": "The `title` method makes a copy of the original string."
    },
    {
     "_id": "ff4093d2-4cd4-50e8-e22f-33946c730437",
     "correct": false,
     "answer": "The `title` method does not capitalize words like \"of\", \"the\", \"an\", etc."
    },
    {
     "_id": "09733c94-33bb-66ae-dc43-d4f8b70a32db",
     "correct": true,
     "answer": "The first letter of each word in a string is capitalized."
    },
    {
     "_id": "704b337c-855e-3760-1825-a79af1f72a28",
     "correct": true,
     "answer": "If the `title` method makes a letter uppercase, it will also make all of the other characters in the word lowercase."
    }
   ],
   "guidance": "The `title` method will do all of the following things:\n* Make a copy of the original string\n* Capitalize the first character of each word\n* Will make all characters after the first character lowercase",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Title method, string methods"
     }
    ],
    "files": [
     "code/strings/title-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/title-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify what the title method does"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1792875991",
  "source": {
   "name": "reading question starts with method",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below.",
   "text": "The `startswith` method has up to <<<3>>> parameters.\nThe first parameter is <<<required>>>.\nThe other two parameters are <<<optional>>>.\n\n ",
   "guidance": "The `startswith` method has up to 3 parameters.\nThe first parameter is required.\nThe other two parameters are optional.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "startswith method, parameters"
     }
    ],
    "files": [
     "code/strings/startswith-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/startswith-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT distinguish between required and optional parameters",
   "tokens": {
    "blank": [
     "3",
     "required",
     "optional"
    ],
    "text": [
     "The `startswith` method has up to ",
     0,
     " parameters.\nThe first parameter is ",
     0,
     ".\nThe other two parameters are ",
     0,
     ".\n\n "
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1923077265",
  "source": {
   "name": "reading question replace method",
   "showName": false,
   "instructions": "## Reading Question\nComplete the code below so that all instances of `\"house\"` in the string `my_string` are replaced with `\"mouse\"`.",
   "text": "my_string<<<.replace>>>(<<<\"house\">>>, <<<\"mouse\">>>) ",
   "guidance": "Use the `replace` method. The first parameter is the substring to search for, and the second parameter is what will be used in its place.\n\n```python\nmy_string.replace(\"house\", \"mouse\")\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Replace method"
     }
    ],
    "files": [
     "code/strings/replace-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/replace-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate how to use the replace method",
   "tokens": {
    "blank": [
     ".replace",
     "\"house\"",
     "\"mouse\""
    ],
    "text": [
     "my_string",
     0,
     "(",
     0,
     ", ",
     0,
     ") "
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4291022967",
  "source": {
   "name": "reading question find method",
   "showName": false,
   "instructions": "## Reading Question\nAssume that you have two strings, `original_string` and `search_term`. Rearrange the code blocks below to test if `search_term` is found in `original_string`. If true, print the message `\"I found it!\"`. **Hint**, not all of the code blocks will be used.",
   "initial": "if original_string.find(search_term) != -1:\n    print(\"I found it!\")\nif search_term.find(original_string) != -1: #distractor\nif original_string.find(search_term) == -1: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here are the steps to constructing the correct conditional statement:\n1) Start with a conditional\n```python\nif\n```\n2) Add the string that is being searched\n```python\nif original_string\n```\n3) Attach the `find` method\n```python\nif original_string.find()\n```\n4) Use `search_term` as the parameter for `find`\n```python\nif original_string.find(search_term)\n```\n5) If `search_term` is not found, it will return `-1`. So any number that is not `-1` means that `search_term` has been found\n```python\nif original_string.find(search_term) != -1:\n```\n6) Finally, add the `print` statement\n```python\nif original_string.find(search_term) != -1:\n    print(\"I found it!\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Find method, conditional"
     }
    ],
    "files": [
     "code/strings/find-method.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/find-method.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the find method in a conditional"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3945179489",
  "source": {
   "name": "reading question in operator",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the statements that are true about the `in` operator and strings. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "54b3d31e-22c9-548c-4a33-2ee4948b11eb",
     "correct": true,
     "answer": "`in` returns a boolean value"
    },
    {
     "_id": "a4bc5308-c1a8-5b20-ee29-9087ffb800b5",
     "correct": false,
     "answer": "`in` returns an index when a word is present in a string"
    },
    {
     "_id": "f94f58fc-500d-fb78-f284-0928902f3d12",
     "correct": true,
     "answer": "`in` will return `False` if a word is found in a string but one is lowercase and the other is uppercase"
    },
    {
     "_id": "48fbaa1e-e27c-e652-7973-9769e4342273",
     "correct": false,
     "answer": "`in` will return `True` if a word is found in a string even if one is lowercase and the other is uppercase"
    }
   ],
   "guidance": "The `in` operator will return a boolean value (`True` or `False`). The `in` operator is also case sensitive. That means the characters and case must match. If one is uppercase and the other is lowercase, `in` will return `False`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "String"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "In operator"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-in.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT summarize how the in operator works with strings"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-888736800",
  "source": {
   "name": "formative assessment 1 string basics",
   "showName": false,
   "instructions": "## String Basics\nRearrange the code blocks below to create a program that checks if `string1` is longer than `string2`. Then print the message `String1 is longer` if true. **Hint**, not all of the code blocks will be used.",
   "initial": "if len(string1) > len(string2):\n    print(\"String1 is longer\")\nif string1.len() > string2.len(): #distractor\nif length(string1) > length(string2): #distractor\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The Python command for the length of a string is `len()`. So the correct answer would be:\n\n```python\nif len(string1) > len(string2):\n    print(\"String1 is longer\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "len function"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-in.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT implement the len function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-404036681",
  "source": {
   "name": "formative assessment 2 string basics",
   "showName": false,
   "instructions": "## String Basics\nSelect all of the print statements below that will produce the following output:\n\n```python\nI am the first line,\nI am the second,\nand I am the third line!\n```\n\n**Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "16ac568a-48c5-9688-2a12-bac07e86da2c",
     "correct": true,
     "answer": "print(\"I am the first line,\\nI am the second,\\nand I am the third line!\")"
    },
    {
     "_id": "684dd722-5997-2892-8782-b2247e0d7fe6",
     "correct": false,
     "answer": "print(\"I am the first line,\nI am the second,\nand I am the third line!\")"
    },
    {
     "_id": "5f272bfb-fb85-fd8a-6b21-6df586381f53",
     "correct": true,
     "answer": "print(\"\"\"I am the first line,\nI am the second,\nand I am the third line!\"\"\")"
    },
    {
     "_id": "daae4d4d-ed71-1c13-4e01-573e7d66fdd7",
     "correct": false,
     "answer": "print(\"I am the first line, \\\\\nI am the second, \\\\\nand I am the third line!\")"
    }
   ],
   "guidance": "**Option 1**\nThis is a correct answer because `\\n` is the escape character for a newline.\n\n**Option 2**\nThis is **not** a correct answer because a `print` statement with one quotation mark must be on one line of code.\n\n**Option 3**\nThis is a correct answer because using triple quotation marks (`\"\"\"`) will preserve whitespace and line breaks.\n\n**Option 4**\nThis is **not** a correct answer because this will print everything on one line. Using the `\\` character allows you to have your `print` statement on several different lines, but the output will be on one line.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character, multiline strings"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize different ways to print output on several different lines"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3742978635",
  "source": {
   "name": "formative assessment 1 string methods",
   "showName": false,
   "instructions": "## String Methods\nLook at the before and after code samples below:\n* **Before:** `the brown dog jumps over the lazy fox`\n* **After:** `THE BROWN CAT JUMPS OVER THE LAZY FOX`\nWhat two string methods would you use to change the text?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c818582d-acc2-f323-4ade-195b6f30318e",
     "correct": false,
     "answer": "Swap and upper"
    },
    {
     "_id": "dd5730c3-fc8c-8214-f97d-152a60fe5206",
     "correct": true,
     "answer": "Replace and upper"
    },
    {
     "_id": "45202c15-df4f-f534-ae3f-78f2e0a3edc9",
     "correct": false,
     "answer": "Replace and capitalize"
    },
    {
     "_id": "d18e55c3-ddf8-03b6-6259-ac28771221ab",
     "correct": false,
     "answer": "Exchange and title"
    }
   ],
   "guidance": "You would use the `replace` method to change `dog` to `cat`, and the `upper` method to make all of the characters uppercase. There is not a string method named `replace`, `swap`, or `exchange`. The `capitalize` method only makes the first letter of the string upper case. The `title` method makes the first character of each word uppercase.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String methods"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-in.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize which string methods are needed to produce a given output"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2300466956",
  "source": {
   "name": "formative assessment 2 string methods",
   "showName": false,
   "instructions": "## String Methods\nImagine you have a string variable `sentence`. Rearrange the code blocks below to create a program that checks if `sentence` starts with blank spaces. If yes, print `sentence` without the blank spaces.",
   "initial": "if sentence.startswith(\" \"):\n    print(sentence.strip(\" \"))\nif sentence.beginswith(\" \"): #distractor\nif sentence.startswith(): #distractor\nprint(sentence.strip()) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "For the if statement, the method that checks the beginning of a string is `startswith`. The parameter for the method is `\" \"`. For the `print` statement, the method to use is `strip`, and it takes `\" \"` as a parameter. The final answer is:\n\n```python\nif sentence.startswith(\" \"):\n    print(sentence.strip(\" \"))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String methods"
     }
    ],
    "files": [
     "code/strings/string-in.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT combines the startswith and strip methods"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1321912568",
  "source": {
   "name": "reading question string functions",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the components that make up the syntax of a string function. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "18b5c68c-edcb-79f3-e1b0-d796c8dfb73d",
     "correct": false,
     "answer": "A `.`"
    },
    {
     "_id": "c447fb34-bdb2-4392-93cd-f17e73fb400a",
     "correct": true,
     "answer": "Function name"
    },
    {
     "_id": "5ca6bfa2-e1b5-e7b0-aa43-3e84989e4b71",
     "correct": true,
     "answer": "String parameter"
    },
    {
     "_id": "75074a28-b39e-be1b-8357-19326fe5f730",
     "correct": true,
     "answer": "Parentheses"
    }
   ],
   "guidance": "The three parts of string function syntax are:\n1) The function name\n2) Parentheses\n3) A string parameter between the parentheses",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String functions"
     }
    ],
    "files": [
     "code/strings/min-function.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/min-function.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the syntax of a string function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-409296030",
  "source": {
   "name": "reading question max string function",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to find the \"largest\" value in the string `my_string`.",
   "text": "<<<max>>>(<<<my_string>>>)",
   "guidance": "The function name comes first, followed by parentheses, and the string parameter between the parentheses.\n\n```python\nmax(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String functions"
     }
    ],
    "files": [
     "code/strings/max-function.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/max-function.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT properly write a string function",
   "tokens": {
    "blank": [
     "max",
     "my_string"
    ],
    "text": [
     0,
     "(",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3301082957",
  "source": {
   "name": "formative assessment 1 string functions",
   "showName": false,
   "instructions": "## String Functions\nRearrange the code blocks below so that your program prints the smallest value from the string `my_string`. **Hint**, you will not use all of the code blocks.",
   "initial": "my_string = \"av67!#\"\nsmallest = min(my_string)\nprint(smallest)\nprint(min) #distractor\nsmallest = my_string.min() #distractor\nsmallest = minimum(my_string) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here are the steps to solving this problem:\n1) Declare the variable `my_string`\n2) Declare the variable `smallest` and set its value to `min(my_string)`. The function `minimum` does not exist, and `min.my_string()` is not the proper syntax for a string function.\n3) Print `smallest`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String functions"
     }
    ],
    "files": [
     "code/strings/max-function.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT make use of the min string function"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2621745761",
  "source": {
   "name": "formative assessment 2 string functions",
   "showName": false,
   "instructions": "## String Functions\nAssume you have two strings, `string1` and `string2`. Rearrange the blocks below so that your program compares the \"biggest\" characters from each string and print either `string1 has the biggest character` or `string2 has the biggest character`. **Hint**, you will not use all of the code blocks.",
   "initial": "if max(string1) > max(string2):\n    print(\"string1 has the biggest character\")\nelse:\n    print(\"string2 has the biggest character\")\nif max.string1 > max.string2: #distractor\nif max(string1) > min(string2): #distractor\nif min(string1) > max(string2): #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The correct conditional is the one that compares the maximum values for `string1` and `string2`. The code blocks that use `min` can be ignored. The proper syntax for a string function is the name of the function, parentheses, and a string parameter between the parentheses. So `max.string1` can be ignored. The correct answer is:\n\n```python\nif max(string1) > max(string2):\n    print(\"string1 has the biggest character\")\nelse:\n    print(\"string2 has the biggest character\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String functions"
     }
    ],
    "files": [
     "code/strings/max-function.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/max-function.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate ability to find maximum value of a string"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1938628481",
  "source": {
   "name": "reading question string iteration for loops",
   "showName": false,
   "instructions": "## Reading Question\nAssume you have a string variable called `my_string`. Fill in the blanks below so that the program prints each character of `my_string`.",
   "text": "```python\nfor <<<char>>> in <<<my_string>>>:\n    print(char)\n```",
   "guidance": "The first blank is the variable `char`. We know this because `char` appears in the `print` statement. The second blank is the string variable, which was given as `my_string`.\n\n```python\nfor char in my_string:\n    print(char)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [
     "code/strings/string-for-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-for-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT construct a for loop that iterates over a string",
   "tokens": {
    "blank": [
     "char",
     "my_string"
    ],
    "text": [
     "```python\nfor ",
     0,
     " in ",
     0,
     ":\n    print(char)\n```"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-172748421",
  "source": {
   "name": "reading question while loop string iteration",
   "showName": false,
   "instructions": "## Reading Question\nAssume you have a string variable called `my_string`. Fill in the blanks below so that the program uses a while loop to iterate over `my_string` and print each character.",
   "text": "```python\nlength = len(<<<my_string>>>)\ni = 0\n\nwhile i < length:\n    print(<<<my_string[i]>>>)\n    i += 1\n```",
   "guidance": "The first blank is `my_string`. When using a while loop, you need to know how long the string is. So `length` should be equal to the length of `my_string`. The second blank is `my_string[i]`. Referencing a character with a while loop means using the string name and an index. The variable `i` represents the index.\n\n```python\nlength = len(<<<my_string>>>)\ni = 0\n\nwhile i < length:\n    print(<<<my_string[i]>>>)\n    i += 1\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [
     "code/strings/string-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT iterate on a string with a while loop",
   "tokens": {
    "blank": [
     "my_string",
     "my_string[i]"
    ],
    "text": [
     "```python\nlength = len(",
     0,
     ")\ni = 0\n\nwhile i < length:\n    print(",
     0,
     ")\n    i += 1\n```"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-661502728",
  "source": {
   "name": "formative assessment string iteration while loop",
   "showName": false,
   "instructions": "## String Iteration\nSelect all of the variables do you need to declare to iterate over a string with a while loop. **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "e2e2febc-d03d-7672-b117-683505f51e62",
     "correct": false,
     "answer": "You do not need any additional variables when iterating over a string with a while loop "
    },
    {
     "_id": "dae2a2ae-f965-f822-93a0-7b1375af98ff",
     "correct": true,
     "answer": "A variable to represent the length of the string"
    },
    {
     "_id": "c58335a6-11ee-31d7-53c1-8d8e98d7d87a",
     "correct": true,
     "answer": "A variable to represent the index"
    },
    {
     "_id": "6b66a5a5-d714-6911-ba31-2a34caad0cca",
     "correct": false,
     "answer": "A variable to represent the datatype of the string variable"
    }
   ],
   "guidance": "Using a while loop to iterate over a string requires a variable to represent the length of the string and another to represent the index.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify differences in using a while loop to iterate over a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3146014256",
  "source": {
   "name": "formative assessment for loop string iteration",
   "showName": false,
   "instructions": "## String Iteration\nUse the code below to help you answer the following question:\n\n```python\nmy_string = \"Hello world\"\nfor char in my_string:\n    print(char)\n```\n\nWhat does the variable `char` represent?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a0858321-e490-a995-14de-67b83e49e37b",
     "correct": false,
     "answer": "`char` represents the length of `my_string`"
    },
    {
     "_id": "3c76a3cf-1bd7-01a0-43ea-f9e602b139c9",
     "correct": false,
     "answer": "`char` represents a copy of `my_string`"
    },
    {
     "_id": "f705140a-8a1b-0373-b12b-a165dd8ee4b7",
     "correct": false,
     "answer": "`char` represents the datatype of `my_string`"
    },
    {
     "_id": "de25c800-8c4f-f93b-4ef9-0330abbbc4c9",
     "correct": true,
     "answer": "`char` represents each character in `my_string`"
    }
   ],
   "guidance": "The `char` variable represents each character in `my_string`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify the purpose of the variable in a for loop when iterating over a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2369717682",
  "source": {
   "name": "reading question string slicing",
   "showName": false,
   "instructions": "## Reading Question\nUse the code below to help you answer the following question:\n\n```python\nmy_string = \"Calvin and Hobbes\"\nmy_slice = my_string[3:8]\n```\n\nWhat is the value of `my_slice`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2df3f580-5283-ea71-3d93-bad686d08968",
     "correct": false,
     "answer": "\"vin an\""
    },
    {
     "_id": "07e75719-61cd-59c9-022a-9e1b51f33849",
     "correct": true,
     "answer": "\"vin a\""
    },
    {
     "_id": "18b6b639-6725-4b0c-d403-acc301cad695",
     "correct": false,
     "answer": "\"lvin \""
    },
    {
     "_id": "98b610dd-6930-807a-c31d-c88c7b10f636",
     "correct": false,
     "answer": "\"lvin a\""
    }
   ],
   "guidance": "The slice operator has start and stop values. The start value is inclusive, meaning this value is a part of the slice. The stop value is exclusive, meaning that this value is not a part of the slice. Since the slice is `[3:8]`, the answer will be the characters from indexes 3 to 7, which is `\"vin a\"`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String slice"
     }
    ],
    "files": [
     "code/strings/string-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify the result of slicing a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4155035086",
  "source": {
   "name": "reading question string interpolation",
   "showName": false,
   "instructions": "## Reading Question\nWhat does the term string interpolation mean?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "dab51c84-7842-ea4f-84b3-e803a59afd74",
     "correct": false,
     "answer": "Converting a variable to the type string"
    },
    {
     "_id": "e87cc517-6289-fa7b-71aa-bfe9aa58c9e3",
     "correct": true,
     "answer": "Inserting the value of variables into a string"
    },
    {
     "_id": "30cbe136-1174-522b-9c04-461ad83e32bb",
     "correct": false,
     "answer": "Printing a string"
    },
    {
     "_id": "71fb8ac6-2f3a-10ac-78ff-2508355956b1",
     "correct": false,
     "answer": "Assigning a string value to a variable"
    }
   ],
   "guidance": "String interpolation is the act of inserting the value of a variable into a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [
     "code/strings/string-interpolation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/string-interpolation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define string interpolation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1276437047",
  "source": {
   "name": "reading question string interpolation format",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to incorporate the variables `var1` and `var2` into the string `my_string` so that it reads \"The cat in the hat.\"",
   "text": "var1 = 'hat'\nvar2 = 'cat'\nmy_string = \"The {} in the {}.\".format(<<<var2>>>, <<<var1>>>)",
   "guidance": "Since there are no indexes in the `{}`, the order of the variables is important. The final string should have \"cat\" before \"hat\", so `var2` needs to come before `var1`.\n\n```python\nvar1 = 'hat'\nvar2 = 'cat'\nmy_string = \"The {} in the {}.\".format(var2, var1)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [
     "code/strings/format-string-interpolation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/format-string-interpolation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize the importance of order for string interpolation with format",
   "tokens": {
    "blank": [
     "var2",
     "var1"
    ],
    "text": [
     "var1 = 'hat'\nvar2 = 'cat'\nmy_string = \"The {} in the {}.\".format(",
     0,
     ", ",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2634811268",
  "source": {
   "name": "reading question f-strings",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to create a program that prints, `Calvin and Hobbes`.",
   "text": "var1 = \"Hobbes\"\nvar2 = \"Calvin\"\nphrase = <<<f>>>\"<<<{var2}>>> and <<<{var1}>>>\"\nprint(phrase)",
   "guidance": "The first blank should be an `f` since you want to create an f-string. Since `Calvin` comes before `Hobbes`, use `{var2}` and then `{var1}`.\n\n```python\nvar1 = \"Hobbes\"\nvar2 = \"Calvin\"\nphrase = f\"{var2} and {var1}\"\nprint(phrase)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation, f-strings"
     }
    ],
    "files": [
     "code/strings/f-strings.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/f-strings.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate to to use an f-string for string interpolation",
   "tokens": {
    "blank": [
     "f",
     "{var2}",
     "{var1}"
    ],
    "text": [
     "var1 = \"Hobbes\"\nvar2 = \"Calvin\"\nphrase = ",
     0,
     "\"",
     0,
     " and ",
     0,
     "\"\nprint(phrase)"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3263461860",
  "source": {
   "name": "reading question string interpolation %",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below so that the code will print, `Roses are red, violets are blue.`",
   "text": "var1 = \"blue\"\nvar2 = \"Roses\"\nvar3 = \"red\"\nphrase = \"<<<%s>>> are <<<%s>>>, violets are <<<%s>>>.\" % (<<<var2>>>, <<<var3>>>, <<<var1>>>)\nprint(phrase)",
   "guidance": "The first three blanks are all `%s` because all of the variables are strings. Since \"Roses\" comes first, the first variable is `var2`. The next word should be \"red\", so variable `var3` is next. `var1` is the final variable.\n\n```python\nvar1 = \"blue\"\nvar2 = \"Roses\"\nvar3 = \"red\"\nphrase = \"%s are %s, violets are %s.\" % (var2, var3, var1)\nprint(phrase)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation, %"
     }
    ],
    "files": [
     "code/strings/old-string-interpolation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/old-string-interpolation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT perform string interpolation with %",
   "tokens": {
    "blank": [
     "%s",
     "%s",
     "%s",
     "var2",
     "var3",
     "var1"
    ],
    "text": [
     "var1 = \"blue\"\nvar2 = \"Roses\"\nvar3 = \"red\"\nphrase = \"",
     0,
     " are ",
     0,
     ", violets are ",
     0,
     ".\" % (",
     0,
     ", ",
     0,
     ", ",
     0,
     ")\nprint(phrase)"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2951295692",
  "source": {
   "name": "Formative Assessment String Interpolation",
   "showName": false,
   "instructions": "## String Interpolation\nUse the code below to help you answer the following question. The program should print the phrase:\n\n**May it be more humane and fair than the world your governments have made before.**\n\n```python\nvar1 = \"governments\"\nvar2 = \"fair\"\nvar3 = \"humane\"\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9ec77a74-f9d5-bfb9-8522-6355b35c5992",
     "correct": true,
     "answer": "print(\"May it be more {} and {} than the world your {} have made before.\".format(var3, var2, var1))"
    },
    {
     "_id": "c157568b-f9a6-daf7-4bd5-350484cf1d79",
     "correct": false,
     "answer": "print(\"May it be more {2} and {1} than the world your {0} have made before.\".format(var3, var2, var1))"
    },
    {
     "_id": "c991b8b3-b021-e324-ab31-2df976c34b1d",
     "correct": false,
     "answer": "print(\"May it be more {var3} and {var1} than the world your {var2} have made before.\")"
    },
    {
     "_id": "8e78578f-3f50-edb3-183e-b6c7e6ce3a97",
     "correct": false,
     "answer": "print(\"May it be more {} and {} than the world your {} have made before.\".format(var1, var2, var3))"
    }
   ],
   "guidance": "The correct order for the words is \"humane\", \"fair\", and \"governments\". That would be `var3`, `var2`, `var1`. Here are the four options:\n\n1) This is the correct answer. The `format` method has the variables in the proper order.\n\n2) This is incorrect. The variables are in the correct order for the `format` method. However, `{}` have numbers inside which are the indexes of the variables. The order of the variables would be `var1`, `var2`, `var3`.\n\n3) This is incorrect. In addition to the variables being in the wrong order, there is no `f` for the f-string.\n\n4) This is incorrect. The syntax is correct, but the variables are in the wrong order.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Pyton"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [
     "code/strings/old-string-interpolation.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT compare the syntax of the various methods of string interpolation"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3596902440",
  "source": {
   "name": "formative assessment 2 string interpolation",
   "showName": false,
   "instructions": "## String Interpolation\nWhich of the following are recommended ways you should perform string interpolation in **Python 3**? **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "144fe549-943e-9fb4-b4de-902f25270a1f",
     "correct": true,
     "answer": "Using `+` or commas"
    },
    {
     "_id": "6a4ccf91-e0b7-bb6d-05a6-d668135ccdb9",
     "correct": false,
     "answer": "Using `%`"
    },
    {
     "_id": "fa94dc1c-a822-9996-14fe-61a2f532111c",
     "correct": true,
     "answer": "Using the `format` method"
    },
    {
     "_id": "af715cf8-6ee9-965d-75be-df8ff330b4b6",
     "correct": true,
     "answer": "Using f-strings"
    }
   ],
   "guidance": "You should not be using the `%` operator for string interpolation. Python has adopted other ways to integrate variables in a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "String"
     },
     {
      "name": "Programming Language",
      "value": "Pyt"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize that % should not be used for string interpolation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1789216035",
  "source": {
   "name": "reading question string comparison == and !=",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blank below so that the program will print `True`.",
   "text": "string1 = \"I love Python\"\nstring2 = \"I love Pyth0n\"\nprint(string1 <<<!=>>> string2)",
   "guidance": "The two strings are not equal; `string2` has a `0` instead of a `o` for the word `Python`. To print `True` then test to see if the two strings are not equal.\n\n```python\nstring1 = \"I love Python\"\nstring2 = \"I love Pyth0n\"\nprint(string1 != string2)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/boolean-comparison.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/boolean-comparison.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine which equality test (== or !=) to use",
   "tokens": {
    "blank": [
     "!="
    ],
    "text": [
     "string1 = \"I love Python\"\nstring2 = \"I love Pyth0n\"\nprint(string1 ",
     0,
     " string2)"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-124411320",
  "source": {
   "name": "reading question string comparison is & is not",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below.",
   "text": "The `is` keyword can be used to replace <<<==>>> for string comparisons.\nThe `is not` keywords can be used to replace <<<!=>>> for string comparisons.",
   "guidance": "The `is` keyword can be used to replace == for string comparisons.\nThe `is not` keywords can be used to replace != for string comparisons.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/is-comparison.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/is-comparison.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize which boolean expressions is and is not replace",
   "tokens": {
    "blank": [
     "==",
     "!="
    ],
    "text": [
     "The `is` keyword can be used to replace ",
     0,
     " for string comparisons.\nThe `is not` keywords can be used to replace ",
     0,
     " for string comparisons."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3362327903",
  "source": {
   "name": "reading question is versus ==",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the difference between using `is` and `==` for comparison?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "f041a35d-a997-e2ac-d10f-f3d57797fd0f",
     "correct": false,
     "answer": "Nothing, they both work the same way."
    },
    {
     "_id": "291e7e39-8275-f3d7-b952-5dc386a844b9",
     "correct": true,
     "answer": "The `is` keyword compares object IDs, while `==` compares values."
    },
    {
     "_id": "5f078dcf-e432-3e1f-5b5d-3f678cdec595",
     "correct": false,
     "answer": "The `==` operator does not work on strings, while `is` only works with strings."
    },
    {
     "_id": "5943539e-fc8c-fc1a-692e-2c9f637e8d37",
     "correct": false,
     "answer": "The `is` keyword compares values while `==` compares object IDs."
    }
   ],
   "guidance": "The `is` keyword compares object IDs, while `==` compares value.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/strings/why-is.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/why-is.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the difference between is and =="
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3617041259",
  "source": {
   "name": "reading question string comparison capitalization",
   "showName": false,
   "instructions": "## Reading Question\nWhy is converting strings to lowercase a helpful way to compare strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "64a8b8a5-2155-193d-5306-71d8f5b1a360",
     "correct": false,
     "answer": "You don't need to do this. Python doesn't care about capitalization."
    },
    {
     "_id": "c1f38a0b-fa50-794b-d376-6b2f9f41e707",
     "correct": false,
     "answer": "Comparing lowercase strings is faster than comparing uppercase strings."
    },
    {
     "_id": "1e464312-6f80-b699-8685-ae919f2d053c",
     "correct": true,
     "answer": "Python is case sensitive. Making strings all one case will compare the characters of a string and not capitalization."
    },
    {
     "_id": "c303c1c8-d37b-ea77-e87f-f7d1c85caa09",
     "correct": false,
     "answer": "Python cannot compare strings unless they are lowercase. Comparing uppercase strings will cause an error."
    }
   ],
   "guidance": "Python is case sensitive. Making strings all one case will compare the characters of a string and not capitalization.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Pyt"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/capitalization-comparison.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/capitalization-comparison.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT compare text regardless of capitalization"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4043915169",
  "source": {
   "name": "reading question alphabetical order strings",
   "showName": false,
   "instructions": "## Reading Question\nAssume that you have two string variables `string1` and `string2`. Fill in the blanks below.",
   "text": "Check to see if `string1` comes before `string2`:\n```python\nstring1 <<<<>>> string2\n```\n\nCheck to see if `string2` comes after `string1`:\n```python\nstring1 <<<>>>> string2\n```",
   "guidance": "If `string1` comes before `string2`, then `string1` is **less than** `string2`. If `string2` comes after `string1`, then `string2` is **greater than** `string1`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/alpha-order.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/alpha-order.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT compare two strings for alphabetical order",
   "tokens": {
    "blank": [
     "<",
     ">"
    ],
    "text": [
     "Check to see if `string1` comes before `string2`:\n```python\nstring1 ",
     0,
     " string2\n```\n\nCheck to see if `string2` comes after `string1`:\n```python\nstring1 ",
     0,
     " string2\n```"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1750024337",
  "source": {
   "name": "Python - Number Checker",
   "showName": true,
   "instructions": "Construct a program that will output `Confirmed, number is greater than 10` if a given variable `x` is greater than 10. If otherwise, output `Confirmed, number is NOT greater than 10`.\n\nClick on the boxes to toggle through the different options.",
   "initial": "$$toggle::if::else$$ $$toggle::x::>::<::10::<=::>==$$ $$toggle::x::>::<::10::<=::>==$$ $$toggle::x::>::<::10::<=::>==$$:\n    $$toggle::print(\"Confirmed, number is greater than 10\")::print(\"Confirmed, number is NOT greater than 10\")$$\n\n$$toggle::if::else$$:\n    $$toggle::print(\"Confirmed, number is greater than 10\")::print(\"Confirmed, number is NOT greater than 10\")$$",
   "options": "{\n                \"sortableId\": \"sortable\",\n                \"max_wrong_lines\": 1,\n                \"vartests\": [{\"initcode\": \"x = 11\", \"output\": \"\", \"message\": \"Testing...\", \"variables\": {\"output\": \"Confirmed, number is greater than 10\\n\"}},\n                             {\"initcode\": \"x = 9\", \"output\": \"\", \"message\": \"Testing\", \"variables\": {\"output\": \"Confirmed, number is NOT greater than 10\\n\"}}],\n                \"programmingLang\": \"python\"\n            }",
   "grader": "4",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Category",
      "value": "Number Checker"
     },
     {
      "name": "Content",
      "value": "program construction"
     },
     {
      "name": "Programming Language",
      "value": "python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct a program that will output x is greater than 10."
  },
  "linkedId": "0088cdf9-ec2c-4847-8506-9ae5fca49168",
  "libraryId": "7f9c49e5-5dbb-48ea-8006-6944447abbe6",
  "version": 0
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2169531553",
  "source": {
   "name": "Check String Equality",
   "showName": false,
   "instructions": "## String Comparison\nRearrange the code below to write a program that checks to see if two strings (`string1` and `string2`) are equal. If yes, print the message `The two strings are equal.`. If not, print the message `The two strings are not equal.` **Hint**, you will not use all of the code blocks.",
   "initial": "if string1 is string2:\n    print(\"The two strings are equal.\")\nelse:\n    print(\"The two strings are not equal.\")\nif string1 is = string2: #distractor\nif string1 == string1: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The two ways to compare a string for equality are with `is` and `==`. The only code block that used one of those operators and the variables `string1` and `string2` is `string1 is string2`.\n\n```python\nif string1 is string2:\n    print(\"The two strings are equal.\")\nelse:\n    print(\"The two strings are not equal.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/alpha-order.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/alpha-order.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT compare two strings for equality"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2925768874",
  "source": {
   "name": "Comparing Is and == for String Comparison",
   "showName": false,
   "instructions": "## String Comparison\nSelect all of the true statements about `is` and `==` regarding string comparison. **Hint**, there will be more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "eb7ce17e-0d12-b948-f7ae-b843765444c6",
     "correct": true,
     "answer": "Both `is` and `==` can be used to check string equality."
    },
    {
     "_id": "a56ed4ba-d4d6-98ad-09c2-44ef353aaed2",
     "correct": true,
     "answer": "`is` compares object IDs."
    },
    {
     "_id": "576ec1df-3322-f4b4-66b2-7fa8cb28e1f6",
     "correct": true,
     "answer": "`==` compares values."
    },
    {
     "_id": "385844e8-f6d9-dd2a-4129-72e4b0d59b05",
     "correct": true,
     "answer": "`is` is the preferred way to compare strings and other objects."
    }
   ],
   "guidance": "All of the statements are true. Both operators can check string equality. `is` compares object IDs while `==` compares values. Finally, `is` is the preferred way to compare strings and other objects in Python.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/alpha-order.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/alpha-order.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine the characteristics of is and == when comparing strings"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1188258348",
  "source": {
   "name": "String Iteration with a For Loop",
   "showName": false,
   "instructions": "## Lab Question\nUsing the code below, what does the variable `char` represent? Assume that `my_string` is a string variable.\n\n```python\nfor char in my_string:\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9351b53c-ba29-59ce-c796-036c26a3479f",
     "correct": false,
     "answer": "The variable `char` represents the string `my_string`."
    },
    {
     "_id": "b27ff65a-183a-a45c-368c-2aa815f2cfa4",
     "correct": false,
     "answer": "The variable `char` represents the index of each character in `my_string`."
    },
    {
     "_id": "2df998fe-3b61-a9b9-0085-6810c6b319e9",
     "correct": false,
     "answer": "The variable `char` represents the length of the string `my_string`."
    },
    {
     "_id": "3f4423f4-00b2-721b-a658-a52b1f354548",
     "correct": true,
     "answer": "The variable `char` represents each character in the string `my_string`."
    }
   ],
   "guidance": "In the for loop, Python will not go past the length of `my_string`, and Python will use an index to determine the value of `char`. However, the variable `char` represents each character in the string `my_string`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration"
     }
    ],
    "files": [
     "code/strings/lab1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT determine the purpose of the for loop variable when iterating over a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1456526025",
  "source": {
   "name": "String Immutability",
   "showName": false,
   "instructions": "## Lab Question\nWhat does \"string immutability\" mean?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4da39982-80f1-7ac4-14b5-c0a61be35a73",
     "correct": true,
     "answer": "You cannot change the contents of a string once you have created it. You can, however, overwrite a string variable with a new value."
    },
    {
     "_id": "383382b9-b9c0-8cf3-3558-faf0de235e33",
     "correct": false,
     "answer": "String variables can never, ever change once they have been created."
    },
    {
     "_id": "ca919cc6-bdb8-b3ea-9173-61a2984e04c3",
     "correct": false,
     "answer": "You can alter the first character of a string and leave the rest of the string intact."
    },
    {
     "_id": "bdcbe622-11d8-d89e-ccf9-35c117af3d1f",
     "correct": false,
     "answer": "You can modify a string any way you want."
    }
   ],
   "guidance": "You cannot change the contents of a string once you have created it. You can, however, overwrite a string variable with a new value.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String immutability"
     }
    ],
    "files": [
     "code/strings/lab2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define string immutability"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2677998262",
  "source": {
   "name": "string interpolation format method",
   "showName": false,
   "instructions": "## Lab Question\nWhat does the `format` method do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2538b9e9-3480-1081-81b9-c18c7c0f5801",
     "correct": false,
     "answer": "The `format` method converts the appropriate characters to uppercase."
    },
    {
     "_id": "d0bd4096-50bc-a55e-a60d-f9843215e288",
     "correct": false,
     "answer": "The `format` method right-justifies the string."
    },
    {
     "_id": "8078f30a-3951-8222-ccad-2f7c9fcbf835",
     "correct": true,
     "answer": "The `format` method is a form of string interpolation. It takes the variables in the parentheses and puts them in place of the `{}`."
    },
    {
     "_id": "43403725-2451-7d88-5b10-554c93db5292",
     "correct": false,
     "answer": "The `format` method makes the text nice and neat when printing it to the screen."
    }
   ],
   "guidance": "The `format` method is a form of string interpolation. It takes the variables in the parentheses and puts them in place of the `{}`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String interpolation"
     }
    ],
    "files": [
     "code/strings/lab3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify what the format method does to a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-887107274",
  "source": {
   "name": "Changing case for string comparison",
   "showName": false,
   "instructions": "## Lab Question\nWhy is it sometimes beneficial to change the case of a string before a comparison?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "1d0ad90c-4785-8bd8-0077-54a396297c90",
     "correct": false,
     "answer": "You can only compare strings if they are the same case. If not, you get an error message."
    },
    {
     "_id": "5b0cbef6-2e36-259d-afcb-56dd230e1491",
     "correct": false,
     "answer": "String comparison is fast when the strings are all the same case."
    },
    {
     "_id": "9964c49a-8d34-26d2-8cdb-51aa72a86469",
     "correct": false,
     "answer": "It is not beneficial. You can compare strings just fine without making any changes."
    },
    {
     "_id": "e5efaed5-31e6-df85-83d0-fe7d8395e512",
     "correct": true,
     "answer": "Python is case sensitive. Changing the case can reduce false negatives by only comparing strings in the same case."
    }
   ],
   "guidance": "Python is case sensitive. Changing the case can reduce false negatives by only comparing strings in the same case. For example, \"Red\" and \"red\" are the same words to a human. Python says these are not the same because one has a capital letter, while the other is all lowercase. Standardizing on a single case keeps Python from doing this.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String comparison"
     }
    ],
    "files": [
     "code/strings/lab4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT describe why standardizing on a single case is beneficial for string comparison"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3924836892",
  "source": {
   "name": "Swap Vowels for *",
   "showName": false,
   "instructions": "Remember, do not declare the variable `my_string` in your code when you submit it. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/lab-test-strings.py",
   "preExecuteCommand": "",
   "guidance": "There are many ways to solve this problem. Here are two possible solutions. One uses string iteration and the other uses the `replace` method.\n\n### String Iteration\nYou will need three variables: one is the original string (`my_string`), another string is all the vowels, and the third string is the modified string. In this method, loop through the `my_string` and ask if each character is in the string `vowel`. If yes, add a `\"*\"` to the variable `modified_string`. If not, add the character to `modified_string`. Finally, after the loop has run, print `modified_string`.\n\n```python\nmy_string = \"Calvin\"\nvowels = \"aeiou\"\nmodified_string = \"\"\n\nfor char in my_string:\n    if char in vowels:\n        modified_string += \"*\"\n    else:\n        modified_string += char\n\nprint(modified_string)\n```\n\n### Replace Method\nAnother way to solve this problem is to use the `replace` method. You will need two variables: `my_string` and `vowels`. Loop through `vowels` and use `replace` on `my_string` with the vowel from the loop. Overwrite `my_string` with the new version of `my_string`.\n\n```python\nmy_string = \"Hobbes\"\nvowels = \"aeiou\"\n\nfor vowel in vowels:\n    my_string = my_string.replace(vowel, \"*\")\n\nprint(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "Hello",
     "input": "",
     "output": "H*ll*",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "balloon",
     "input": "",
     "output": "b*ll**n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "aeiou",
     "input": "",
     "output": "*****",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration, string methods"
     }
    ],
    "files": [
     "code/strings/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT replace vowels in a string with an \"*\""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2841054492",
  "source": {
   "name": "coding exercise 1 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`.",
   "command": "python3 code/strings/exercise1.py",
   "preExecuteCommand": "",
   "guidance": "There are many ways to solve this problem. Here is one possible solution. Start by creating a variable `txt` to capture user input with `input()`. Remember, do not use a prompt. Create a variable called `first` and set its value to `txt[0]`. Index 0 is always the first character. Create another variable called `last` and set its value to `txt[-1]`. -1 is the index that always refers to the last character. Print these two variables with the appropriate text and the `format` method.\n\n```python\ntxt = input()\nfirst = txt[0]\nlast = txt[-1]\nprint(\"{} is the first character and {} is the last character\".format(first, last))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "balloon",
     "output": "b is the first character and n is the last character",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "!!box**",
     "output": "! is the first character and * is the last character",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "house",
     "output": "h is the first character and e is the last character",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Input, String indexes, format method"
     }
    ],
    "files": [
     "code/strings/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT capture input from the user and determine the first and last characters of a string"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3117457165",
  "source": {
   "name": "coding exercise 2 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`",
   "command": "python3 code/strings/exercise2.py",
   "preExecuteCommand": "",
   "guidance": "The code below is one possible solution for the problem. Start by creating a variable `txt` that captures input from the user. Since you need as many lines of output as there are characters in the string `txt`, write a for loop that is in the range of the length of `txt`. For each line of output, you want the the user input to appear as many times as its length, multiply `txt` by its length.\n\n```python\ntxt = input()\nfor i in range(len(txt)):\n    print(txt * len(txt))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "hike",
     "output": "hikehikehikehike\nhikehikehikehike\nhikehikehikehike\nhikehikehikehike",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "to",
     "output": "toto\ntoto",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "!",
     "output": "!",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String length, repeating a string"
     }
    ],
    "files": [
     "code/strings/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT repeat a string with a loop"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2504384012",
  "source": {
   "name": "coding exercise 3 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`\n",
   "command": "python3 code/strings/exercise3.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. You will need two variables. The first one is `txt` and it captures the user input. The second variable will hold the `u`, `l`, and `-` characters. This variable is called `second_string` and is set to an empty string. Loop through each character of `txt`. If the character is lowercase, add a `l` to `second_string`. If the character is uppercase, add a `u` to `second_string`. If the character is neither uppercase or lowercase (i.e. it is a number of a symbol), add a `-` to `second_string`. Finally print `txt` and then print `second_string`.\n\n```python\ntxt = input()\nsecond_string = \"\"\nfor char in txt:\n    if char.islower():\n        second_string += \"l\"\n    elif char.isupper():\n        second_string += \"u\"\n    else:\n        second_string += \"-\"\n\nprint(second_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "Cat!",
     "output": "Ull-",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "*h*A*t*",
     "output": "-l-u-l-",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "1$%!",
     "output": "----",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "python"
     },
     {
      "name": "Category",
      "value": "String iteration, string methods, string concatenation"
     }
    ],
    "files": [
     "code/strings/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT parse a string"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3592969337",
  "source": {
   "name": "coding exercise 4 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`.",
   "command": "python3 code/strings/exercise4.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. First, start with the variable `txt` to collect input from the user. The next thing to do is find the midpoint of `txt`. You can divide the length of `txt` by 2. However, if you use the regular division symbol (`/`), you will generate a float if the length is odd. The midpoint will be used to find the index of the string where the split should happen. Indexes are only integers. Instead, use the floor division operator (`//`) as it will only return an integer. Now that you have the midpoint, slice `txt` from index 0 up to (but not including) the midpoint. Create the second half by slicing txt from the midpoint to the end of the string. Finally, print the first half and second half.\n\n```python\ntxt = input()\nmidpoint = len(txt) // 2\nfirst_half = txt[:midpoint]\nsecond_half = txt[midpoint:]\nprint(first_half)\nprint(second_half)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "coding is fun",
     "output": "coding\n is fun",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "mouse",
     "output": "mo\nuse",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "hello world!",
     "output": "hello \nworld!",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Slice a string"
     }
    ],
    "files": [
     "code/strings/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT find the midpoint of a string and print the first and second halves"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2019961366",
  "source": {
   "name": "coding exercise 5 strings",
   "showName": false,
   "instructions": "**Reminder**, do not put a prompt when collecting user input. Just use `input()`.",
   "command": "python3 code/strings/exercise5.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. Create a variable `txt` to capture input from the user. You will also need a variable for the length of `txt`, and another variable `swapped_string` set to an empty string. \n```python\ntxt = input()\nlength = len(txt)\nswapped_string = \"\"\n```\nYou cannot use a regular for loop for this problem. First, you need to increment the index (`i`) of the loop by two because you want to swap the characters two at a time. Since you will be dealing with the character at `i` and `i + 1` you want to stop the loop from running all the way to the end of the string. If `i` is the last index and you try to access `i + 1`, that will cause an error. So stop the loop at the length of `txt` - 1. The for loop should go from index 0 to the length of `txt` - 1 and increment by 2. \n```python\nfor i in range(0, length - 1, 2):\n```\nInside the loop, take the character from `i` + 1 and concatenate it to `swapped_string`. Then concatenate the character at `i`. Once the loop has finished, print `swapped_string`.\n```python\n    swapped_string += txt[i + 1]\n    swapped_string += txt[i]\n\nprint(swapped_string)\n```\nThe final code looks like this:\n```python\ntxt = input()\nlength = len(txt)\nswapped_string = \"\"\n\nfor i in range(0, length - 1, 2):\n    swapped_string += txt[i + 1]\n    swapped_string += txt[i]\n\nprint(swapped_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "sips",
     "output": "issp",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "acac",
     "output": "caca",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "^4h-12",
     "output": "4^-h21",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String iteration, string concatenation"
     }
    ],
    "files": [
     "code/strings/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/strings/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT swap characters in a string"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1199134570",
  "source": {
   "name": "reading question writing to a file",
   "showName": false,
   "instructions": "## Reading Question\nWhat two parameters are passed to the `open` command?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "1c251c1a-3b02-9cba-0749-d5e5ed3ebd30",
     "correct": false,
     "answer": "The text to be added to the file and the file size."
    },
    {
     "_id": "4252245a-8777-b98f-ee88-d551ff0dee3d",
     "correct": true,
     "answer": "The file to be opened and the mode."
    },
    {
     "_id": "db325ca1-bb90-ac91-9f19-13bddbc29214",
     "correct": false,
     "answer": "The file extension and the file name."
    },
    {
     "_id": "e99e53d7-b602-7b20-9042-9de4fc83d0fa",
     "correct": false,
     "answer": "The file name and the text to write to the file."
    }
   ],
   "guidance": "The `open` command requires the file to be opened and the mode in which to open the file.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Open a file"
     }
    ],
    "files": [
     "code/files/writing.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/writing.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use `open` to open a file "
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1430141663",
  "source": {
   "name": "reading question writing a file with multiline strings",
   "showName": false,
   "instructions": "## Reading Questions\nRearrange the code blocks below to create a program that writes the following text to a file:\n\n```\nOnce upon a time, in\na land far, far away\nthere lived a king and queen.\n```\n\n**Note**, start with the variable declaration for `lines_to_write`. You will not use all of the code blocks.",
   "initial": "lines_to_write = [\"Once upon a time, in\\n\", \"a land far, far away\\n\", \"lived a king and queen.\"]\noutput_file = open(\"story.txt\", \"w\")\noutput_file.writelines(lines_to_write)\noutput_file.close()\noutput_file = open(\"story.txt\") #distractor\nlines_to_write = [\"Once upon a time, in\", \"a land far, far away\", \"lived a king and queen.\"] #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Since you want each line of text to appear on a separate line, use the `lines_to_write` with the newline character (`\\n`). Also, `output` needs a file name and a mode. Be sure to use the `open` command with `\"w\"`.\n\n```python\nlines_to_write = [\"Once upon a time, in\\n\", \"a land far, far away\\n\", \"lived a king and queen.\"]\noutput_file = open(\"story.txt\", \"w\")\noutput_file.writelines(lines_to_write)\noutput_file.close()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiline strings"
     }
    ],
    "files": [
     "code/files/multiline-strings-write.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/multiline-strings-write.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT write a multiline string to a file"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1777626410",
  "source": {
   "name": "reading question append mode",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below.",
   "text": "The <<<append>>> mode will add new text to a file without erasing its contents.\nThe <<<write>>> mode will overwrite the file with new text.",
   "guidance": "The append mode will add new text to a file without erasing its contents.\nThe write mode will overwrite the file with new text.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Append mode, write mode"
     }
    ],
    "files": [
     "code/files/append.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/append.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between write and append modes",
   "tokens": {
    "blank": [
     "append",
     "write"
    ],
    "text": [
     "The ",
     0,
     " mode will add new text to a file without erasing its contents.\nThe ",
     0,
     " mode will overwrite the file with new text."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3882923409",
  "source": {
   "name": "reading question reading a file",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the biggest difference between read mode and write/append modes when referencing a file that does not exist?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c1ea06f7-47d3-afdc-1ba8-9d978530a2b9",
     "correct": false,
     "answer": "All three will create a new file when reading, writing, or appending a file that does not exist."
    },
    {
     "_id": "5be44e6a-d70b-14c2-81df-9ff4b1651dd7",
     "correct": false,
     "answer": "Read and write will create a new file, but append will cause an error if the file does not exist."
    },
    {
     "_id": "44d5e19a-7263-7bbe-3f4d-53f575a64af4",
     "correct": false,
     "answer": "All three will cause an error when reading, writing, or appending a file that does not exist."
    },
    {
     "_id": "608d4a65-f992-cac1-d8b5-ef175b5be0a6",
     "correct": true,
     "answer": "Reading a file that does not exist will cause an error. Writing or appending a file that does not exist will cause the creation of this file."
    }
   ],
   "guidance": "Both write and append modes will create a file if it does not already exist. Read mode will cause an error if the file does not already exist.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read mode"
     }
    ],
    "files": [
     "code/files/read.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/read.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate how the three modes handle a file that does not exist"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2796587801",
  "source": {
   "name": "reading question file iteration for loop",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the difference between these blocks of code?\n\n### Code Block 1\n```python\nwith open(\"my_file.txt\", \"r\") as read_file:\n    print(read_file.readlines())\n```\n\n### Code Block 2\n```python\nwith open(\"my_file.txt\", \"r\") as read_file:\n    for line in read_file.readlines():\n        print(line)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4639de80-72ce-34d0-2a12-658548f9aec6",
     "correct": false,
     "answer": "Both code blocks produce lists of strings."
    },
    {
     "_id": "c7919ff1-a09a-5eda-d699-3964020ef8db",
     "correct": false,
     "answer": "Code block 1 produces a \"normal\" looking text. Code block 2 produces a list of strings."
    },
    {
     "_id": "6e88c18c-397d-f952-3413-83af24bc3f69",
     "correct": true,
     "answer": "Code block 1 produces a list of strings. Code block 2 produces a \"normal\" looking text."
    },
    {
     "_id": "1f79cb5c-410c-72c8-b3d5-193df4f3eeed",
     "correct": false,
     "answer": "Both code blocks produce \"normal\" looking text."
    }
   ],
   "guidance": "Code block 1 produces a list of all of the strings. So you will see quotation marks, square brackets (`[`), and newline characters (`\\n`).\n\nCode block 2 loops through the list of strings and prints each string. There are no square brackets, quotation marks, or newline characters. The text appears \"normal\".",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reading a file, file iteration"
     }
    ],
    "files": [
     "code/files/file-iteration.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/file-iteration.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between printing the output of readlines and looping through readlines"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2299572197",
  "source": {
   "name": "reading question readline vs readlines",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below.",
   "text": "The <<<readlines>>> method reads all of the text file at once and returns a list of all of the strings.\n\nThe <<<readline>>> method reads the text file one line at a time.",
   "guidance": "The `readlines` method reads all of the text file at once and returns a list of all of the strings.\n\nThe `readline` method reads the text file one line at a time.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "python"
     },
     {
      "name": "Category",
      "value": "Read file, readline, readlines"
     }
    ],
    "files": [
     "code/files/file-iteration.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/file-iteration.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the difference between readline and readlines",
   "tokens": {
    "blank": [
     "readlines",
     "readline"
    ],
    "text": [
     "The ",
     0,
     " method reads all of the text file at once and returns a list of all of the strings.\n\nThe ",
     0,
     " method reads the text file one line at a time."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-547217630",
  "source": {
   "name": "reading question readline vs readlines",
   "showName": false,
   "instructions": "## Reading Questions\nFill in the blanks below.",
   "text": "The <<<readlines>>> method reads all of the text file and returns all of the strings in a list.\n\nThe <<<readline>>> method reads one string at a time.",
   "guidance": "The `readlines` method reads all of the text file and returns all of the strings in a list.\n\nThe `readline` method reads one string at a time.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "File iteration, readline, readlines"
     }
    ],
    "files": [
     "code/files/while-iteration.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/while-iteration.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the difference between readline and readlines",
   "tokens": {
    "blank": [
     "readlines",
     "readline"
    ],
    "text": [
     "The ",
     0,
     " method reads all of the text file and returns all of the strings in a list.\n\nThe ",
     0,
     " method reads one string at a time."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1830585668",
  "source": {
   "name": "reading question file input seek",
   "showName": false,
   "instructions": "## Reading Question\nAssume you have opened a text file with the variable `my_text`. Which command will go to the 35th character?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4a9ae757-28d0-3004-7f37-ea4639b9d723",
     "correct": true,
     "answer": "my_text.seek(34)"
    },
    {
     "_id": "1497ecf8-b24e-e841-d90a-bbcaf849a608",
     "correct": false,
     "answer": "read_file.seek(34)"
    },
    {
     "_id": "ad9d17a9-29b0-9e48-442f-3053befe461d",
     "correct": false,
     "answer": "my_text.search(35)"
    },
    {
     "_id": "e6008954-b704-a7a2-24ed-4785bf72aa86",
     "correct": false,
     "answer": "my_text.seek(35)"
    }
   ],
   "guidance": "The variable that represents the text file is named `my_file` and the method to find a specific character is `seek`. You are looking for the 35th character, and the `seek` method starts with index 0. So the 35th character would be index `34`.\n\n`my_file.seek(34)`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Seek method"
     }
    ],
    "files": [
     "code/files/seek.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/seek.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use the seek method to find a specific character"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-4261679209",
  "source": {
   "name": "formtive assessment 1 writing to a file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a program that writes the following information to the file `tongue_twister.txt`.\n\n```\nPeter Piper picked a peck of pickled peppers\nA peck of pickled peppers Peter Piper picked\nIf Peter Piper picked a peck of pickled peppers\nWhere’s the peck of pickled peppers Peter Piper picked?\n```\n\n**Note**, not all of the code blocks will be used.",
   "initial": "with open(\"tongue_twister.txt\", \"w\") as output_file:\n    output_file.writelines(\"Peter Piper picked a peck of pickled peppers\")\n    output_file.writelines(\"A peck of pickled peppers Peter Piper picked\")\n    output_file.writelines(\"If Peter Piper picked a peck of pickled peppers\")\n    output_file.writelines(\"Where’s the peck of pickled peppers Peter Piper picked?\")\noutput_file.close() #distractor\nwith open(\"my_file.txt\", \"w\") as output_file: #distractor\n",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are two code blocks that are not a part of the solution. The first one is the block that opens the file `my_file.txt`. The instructions say to write to the file `tongue_twister.txt`. The second block that does not belong in the solution is `output_file.close()`. The `with open...` statement opens the file and automatically closes the file when done.\n\nOnce you have opened the correct file, follow the order of the tongue twister as stated in the question.\n\n```python\nwith open(\"tongue_twister.txt\", \"w\") as output_file:\n    output_file.writelines(\"Peter Piper picked a peck of pickled peppers\")\n    output_file.writelines(\"A peck of pickled peppers Peter Piper picked\")\n    output_file.writelines(\"If Peter Piper picked a peck of pickled peppers\")\n    output_file.writelines(\"Where’s the peck of pickled peppers Peter Piper picked?\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Write to a file"
     }
    ],
    "files": [
     "code/files/read-write-two-files.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/read-write-two-files.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate writing to a file"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-838048899",
  "source": {
   "name": "formative assessment  append a file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume there is a text file named `hand_grenade.txt`. Rearrange the code blocks below to create a program that will add the following text to the file. Your program should not alter any information already in the text file.\n\n```\nAnd Saint Attila raised the hand grenade up on high, saying, \"O Lord, bless this Thy hand grenade that, with it, Thou mayest blow Thine enemies to tiny bits in Thy mercy.\"\n```\n\n**Note**, not all of the code blocks will be used.",
   "initial": "with open(\"hand_grenade.txt\", \"a\") as output_file:\n    output_file.writelines('And Saint Attila raised the hand grenade up on high, saying, ')\n    output_file.writelines('\"O Lord, bless this Thy hand grenade that, with it, ')\n    output_file.writelines('Thou mayest blow Thine enemies to tiny bits in Thy mercy.\"')\nwith open(\"hand_grenade.txt\", \"w\") as output_file: #distractor\nwith open(\"hand_grenade.txt\", \"r\") as output_file: #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are three code blocks that begin `with open...`. The only difference between them is the mode. Since your program cannot alter any of the information already in the file, you need to use the append mode (`\"a\"`). The rest of the code needs to respect the order of the text as given in the question.\n\n```python\nwith open(\"hand_grenade.txt\", \"a\") as output_file:\n    output_file.writelines('And Saint Attila raised the hand grenade up on high, saying, ')\n    output_file.writelines('\"O Lord, bless this Thy hand grenade that, with it, ')\n    output_file.writelines('Thou mayest blow Thine enemies to tiny bits in Thy mercy.\"')\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Append mode"
     }
    ],
    "files": [
     "code/files/read-write-two-files.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/read-write-two-files.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize when to use append mode"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-810907680",
  "source": {
   "name": "reading question read from a file write to another",
   "showName": false,
   "instructions": "## Reading Question\nLook at the two code examples carefully. Fill in the blanks below based on these code examples.\n\n### Code Example 1\n```python\nwith open(\"source.txt\", \"r\") as source, open(\"dest.txt\", \"w\") as dest:\n    for line in source.readlines():\n        dest.write(line)\n```\n\n### Code Example 2\n```python\nwith open(\"source.txt\", \"r\") as source, open(\"dest.txt\", \"w\") as dest:\n    for line in dest.readlines():\n        source.write(line)\n```",
   "text": "In Code Example 1, Python reads from the file stored in the variable <<<source>>> and writes to file stored in variable <<<dest>>>.\n\nIn Code Example 2, Python reads from the file stored in the variable <<<dest>>> and writes to file stored in variable <<<source>>>.",
   "guidance": "In the first code example, Python is reading from the file represented by the variable `source` and writes to the file represented by the variable `dest`. \n\nIn the second code example, Python is reading from the file represented by the variable `dest` and writes to the file represented by the variable `source`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read a file, write to a file"
     }
    ],
    "files": [
     "code/files/read-write-two-files.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/read-write-two-files.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine which file is being read and which file is being written to",
   "tokens": {
    "blank": [
     "source",
     "dest",
     "dest",
     "source"
    ],
    "text": [
     "In Code Example 1, Python reads from the file stored in the variable ",
     0,
     " and writes to file stored in variable ",
     0,
     ".\n\nIn Code Example 2, Python reads from the file stored in the variable ",
     0,
     " and writes to file stored in variable ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3408853293",
  "source": {
   "name": "formative assessment reading a file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume you have a text file called `story.txt`. Rearrange the code blocks below so that the program will print the text file as you would expect it to appear. **Note**, not all of the code blocks will be used.",
   "initial": "with open(\"story.txt\", \"r\") as input_file:\n    lines = input_file.readlines()\n    for line in lines:\n        print(line)\nwith open(\"story.txt\", \"a\") as input_file: #distractor\nprint(lines) #distractor\nlines = input_file.writelines() #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "In order to print the contents of a text file, you need to read the file first. Choose the `with open...` code block that has `\"r\"` to indicate read mode. When declaring the variable `lines` be sure to use the `readlines()` method and not `writelines()`. If you use `print(lines)`, you will not see the text in a \"normal\" manner. `lines` is a list that contains strings from the text. Printing this will output square brackets, quotation marks, newline characters, etc. Instead, loop through `lines` and print each string.\n\n```python\nwith open(\"story.txt\", \"r\") as input_file:\n    lines = input_file.readlines()\n    for line in lines:\n        print(lines)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read a file"
     }
    ],
    "files": [
     "code/files/read-write-two-files.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT print each line of a text file"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1663568261",
  "source": {
   "name": "formative assessment iterating through a text file with a while loop",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume you have a text file named `my_file.txt`. Fill in the blanks below so the code reads the file and prints each line of the text file.",
   "text": "with open(\"my_file.txt\", <<<\"r\">>>) as input_file:\n    line = input_file.<<<readline()>>>\n    while line <<<!=>>> \"\":\n        print(<<<line>>>)\n        line = input_file.<<<readline()>>>",
   "guidance": "In order to print the content of a file, you need to read it first. The first blank sets the mode to read, `\"r\"`. The second blank is `readline()` so that the program can read the first line of the text file. The while loop should continue to run until it reaches the end of the file. The empty string (`\"\"`) is the end of the file. So the third blank is `!=`. To print the contents of the text file, blank four is the variable `line`. Finally, the loop needs the next line in the text file, so blank five is `readline()`.  \n\n```python\nwith open(\"my_file.txt\", \"r\") as input_file:\n    line = input_file.readline()\n    while line != \"\":\n        print(line)\n        line = input_file.readline()\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "File iteration, while loop"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT iterate through a text file with a while loop",
   "tokens": {
    "blank": [
     "\"r\"",
     "readline()",
     "!=",
     "line",
     "readline()"
    ],
    "text": [
     "with open(\"my_file.txt\", ",
     0,
     ") as input_file:\n    line = input_file.",
     0,
     "\n    while line ",
     0,
     " \"\":\n        print(",
     0,
     ")\n        line = input_file.",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-234456500",
  "source": {
   "name": "reading a csv file",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the biggest difference between reading a text file and a CSV file?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "5f1fc8dd-977d-fdc0-7c7a-fff537ddceef",
     "correct": true,
     "answer": "You have to use `csv.reader` with a CSV file."
    },
    {
     "_id": "6e9f21e3-06cf-fb26-6e85-67412e3627b1",
     "correct": false,
     "answer": "Text and CSV files are read the exact same way."
    },
    {
     "_id": "3b564438-2991-2e78-e4f9-0a9ba8594b51",
     "correct": false,
     "answer": "With a text file you set the mode to `\"r\"`, but with a CSV you set the mode to `\"csv\"`."
    },
    {
     "_id": "8aba675d-73d2-10b0-e99e-516b9db6945b",
     "correct": false,
     "answer": "You have to use `text.reader` with text files."
    }
   ],
   "guidance": "For CSV files, you need to import the `csv` module and use the `csv.reader` before you can iterate over the file.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV files"
     }
    ],
    "files": [
     "code/files/csv-basics.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/csv-basics.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between reading text and csv files"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3850148086",
  "source": {
   "name": "how is a a row of csv data stored?",
   "showName": false,
   "instructions": "## Reading Question\nHow is the data for each row in a CSV file stored once it is read?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8e332c30-b20b-a0d2-fe96-7c65c7e2677f",
     "correct": false,
     "answer": "As a string"
    },
    {
     "_id": "441c6d46-4706-a6db-c3b4-c787cb0ce655",
     "correct": true,
     "answer": "As a list of strings"
    },
    {
     "_id": "c74b7518-01ee-206a-18cf-e4ed5e3cf72b",
     "correct": false,
     "answer": "As a list of booleans"
    },
    {
     "_id": "7bfab932-bc9f-234b-00d7-9b2f4e1b127a",
     "correct": false,
     "answer": "As floats and ints"
    }
   ],
   "guidance": "Once a CSV has been read, each row is stored as a list of strings. So manipulating CSV information is based on working with lists (indexing, slicing, methods, functions, etc.) and working with strings (printing, methods, etc.).",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV"
     }
    ],
    "files": [
     "code/files/printing-csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/printing-csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify how CSV data is stored once it has been read"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2766230152",
  "source": {
   "name": "what does a delimiter do",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat is the purpose of a delimiter?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4091b7a5-3d8d-b747-695a-a3270b542246",
     "correct": true,
     "answer": "A delimiter is a character that separates units of data."
    },
    {
     "_id": "d7990903-088a-2cbb-3d88-92d7c8726f65",
     "correct": false,
     "answer": "A delimiter is a character that marks the end of a line."
    },
    {
     "_id": "35ea5434-d258-eee4-62dd-0c370ff1156f",
     "correct": false,
     "answer": "A delimiter is a character that begins a line of data."
    },
    {
     "_id": "07c4e83a-5c96-5dd9-1730-1d0e24e2a7e9",
     "correct": false,
     "answer": "A delimiter is a character that marks the end of a file."
    }
   ],
   "guidance": "A delimiter is a character that separates units of data. In a CSV file, the default delimiter is a comma. Here is an example of a file with a comma delimiter:\n\nName,Breed\nBear,German Shepherd\nRoxy,Black Lab\nBella,Yorkie\nLucky,Terrier\n\nYou can change the delimiter in Python when reading the CSV file: \n\n`reader = csv.reader(data_file, delimiter=\"new_delimiter_goes_here\")`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, delimiter"
     }
    ],
    "files": [
     "code/files/delimiters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/delimiters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a delimiter"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3611362990",
  "source": {
   "name": "what's the difference between writerow and writerows",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "text": "The <<<writerows>>> method can write either a single list of strings or a list of lists of strings to a CSV file.\n\nThe <<<writerow>>> method can write only a single list of strings to a CSV file.",
   "guidance": "The `writerows` method can write either a single list of strings or a list of lists of strings to a CSV file.\n\nThe `writerow` method can write only a single list of strings to a CSV file.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, writerow, writerows"
     }
    ],
    "files": [
     "code/files/write_csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/write_csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between writerow and writerows",
   "tokens": {
    "blank": [
     "writerows",
     "writerow"
    ],
    "text": [
     "The ",
     0,
     " method can write either a single list of strings or a list of lists of strings to a CSV file.\n\nThe ",
     0,
     " method can write only a single list of strings to a CSV file."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4246621000",
  "source": {
   "name": "what happens when you open a non-existent file in write mode",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat happens when Python tries to open a file in write mode, but the file does not exist?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6ac1e26e-4a9c-9ec8-bc32-96a507e18105",
     "correct": false,
     "answer": "An error will appear"
    },
    {
     "_id": "47dd9899-7ab4-cb3b-3236-278fd18c5efb",
     "correct": true,
     "answer": "Python will create the file"
    },
    {
     "_id": "27c1186f-7236-8e38-c86c-e347f184608e",
     "correct": false,
     "answer": "Python will ask you if you want to create the file"
    },
    {
     "_id": "385d9ab5-6bb7-dc07-7497-a1062fd361a0",
     "correct": false,
     "answer": "Nothing happens"
    }
   ],
   "guidance": "When Python tries to open a nonexistent file in write mode, the file will be created.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Open file, write mode"
     }
    ],
    "files": [
     "code/files/write_csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/write_csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain what happens when Python tries to open a nonexistent file in write mode"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3806101895",
  "source": {
   "name": "formative assessment reading a csv file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume that you have a comma delimited file called `data.csv` Rearrange the code blocks below to read the file and print the contents line by line. **Note**, not all of the code blocks will be used.",
   "initial": "import csv\nwith open(\"data.csv\", \"r\") as input_file:\n    reader = csv.reader(input_file)\n    for row in reader:\n        print(row)\nwith open(\"data.csv\", \"w\") as input_file: #distractor\nreader = input_file #distractor\nfor row in input_file: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are three code blocks that do not belong in the solution. The code block that opens the file in write mode should be ignored. The next code block to ignore is the one that says `reader = input_file`. The `csv` module provides a `csv.reader`, which should be used with a CSV file. Lastly, ignore the code block that says `for row in input_file:`. The CSV file is represented by the `reader` variable, so the loop should iterate over `reader` not `input_file`.\n\nAlways start with the import statement. Next, open the file and assign it to the variable `input_file`. Since `input_file` is a CSV file, use `csv.reader` so you can iterate over it. Use a for loop to go through the CSV file line by line. Finally, print each row of the CSV file.\n\n```python\nimport csv\nwith open(\"data.csv\", \"r\") as input_file:\n    reader = csv.reader(input_file)\n    for row in reader:\n        print(row)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "python"
     },
     {
      "name": "Category",
      "value": "CSV, csv.reader"
     }
    ],
    "files": [
     "code/files/write_csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/write_csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT iterate over a CSV and print each row"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1884365233",
  "source": {
   "name": "formative assessment unpacking a CSV file",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume there exists a tab delimited CSV file called `data.csv`. The CSV file has two columns of data: a name and a color. There is no header row in the CSV file. Rearrange the code blocks below so that the program reads the file and uses the information from each row to generate a sentence like this:\n\nPatrick's favorite color is blue.\n\n**Note**, not all of the code blocks will be used.",
   "initial": "import csv\nwith open(\"data.csv\", \"r\") as input_file:\n    reader = csv.reader(input_file, delimiter=\"\\t\")\n    for name, color in reader:\n        print(\"{}'s favorite color is {}.\".format(name, color))\nreader = csv.reader(input_file) #distractor\nfor color, name in reader: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are two code blocks to ignore. The first one is `reader = csv.reader(input_file)`. This block does not tell Python that the file is tab delimited. The other block to ignore is `for color, name in reader:`. Order matters when unpacking the CSV file. The first column is names and the second is colors. The loop however would assign the names to the variable `color` because it came first. The output would be `blue's favorite color is Patrick.`.\n\nStart by importing the `csv` module. Then open the CSV file in read mode. Instruct `csvreader` that this is a tab delimited file. Iterate over `reader` while unpacking the first column into the variable `name` and the second column into the variable `color`. Print the sentence with the `format` method.\n\n```python\nimport csv\nwith open(\"data.csv\", \"r\") as input_file:\n    reader = csv.reader(input_file, delimiter=\"\\t\")\n    for name, color in reader:\n        print(\"{}'s favorite color is {}.\".format(name, color))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, tab delimited, unpacking"
     }
    ],
    "files": [
     "code/files/write_csv.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/write_csv.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT iterate over a tab delimited CSV file and unpack the contents into variable names"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3157619027",
  "source": {
   "name": "printing the contents of a text file stored in a variable",
   "showName": false,
   "instructions": "## Lab Question\n\nWhy does the code above say `print(text[0])` instead of `print(text)`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "5bc6ec38-43d6-1cc4-35b9-f723affc9152",
     "correct": false,
     "answer": "Both `print(text)` and `print(text[0])` print the same thing."
    },
    {
     "_id": "9cf0fe74-5d6b-c30c-a0dd-47855fa21262",
     "correct": false,
     "answer": "Using `print(text)` will cause an error."
    },
    {
     "_id": "3f412ad8-5d21-e254-cdfd-2910a8ecf41a",
     "correct": true,
     "answer": "The variable `text` is a list of strings. If you print `text`, it will print the entirety of the list — including square brackets and quotes. Printing `text[0]` will print just the text, no special characters."
    },
    {
     "_id": "ac27b8a2-3bc0-ee0b-85fe-56249be20a12",
     "correct": false,
     "answer": "Text files require `print(text[0])` while CSV files require `print(text)`."
    }
   ],
   "guidance": "The variable `text` is a list of strings. If you print `text`, it will print the entirety of the list — including square brackets and quotes. Printing `text[0]` will print just the text, no special characters. If you want the text, print the string inside the list, not the list itself.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read mode, printing a file"
     }
    ],
    "files": [
     "code/files/lab1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between print(text) and print(text[0]) when reading from a text file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1780805107",
  "source": {
   "name": "changing the delimiter for CSV file",
   "showName": false,
   "instructions": "## Lab Question\n\nAssume the variable `input_file` is an opened CSV file. How would you declare the the `csv.reader` to indicate that the CSV file uses the `!` character as the delimiter?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "cc06cba8-fe73-fd54-7a52-676f5bb2f19c",
     "correct": true,
     "answer": "reader = csv.reader(input_file, delimiter=\"!\")"
    },
    {
     "_id": "bac2b38c-4299-8fab-a545-43baed4678ef",
     "correct": false,
     "answer": "reader = csv.reader(input_file, delimiter=!)"
    },
    {
     "_id": "2e5bfe3b-30ea-b415-001b-d1e592e4c8ba",
     "correct": false,
     "answer": "reader = csv.reader(input_file, delimiter=\"\\!\")"
    },
    {
     "_id": "33762c50-5b7e-5c7d-5e4c-98a14bc7da1f",
     "correct": false,
     "answer": "reader = csv.reader(input_file, delimiter=\"/!\")"
    }
   ],
   "guidance": "To change the delimiter of a CSV file, use the word `delimiter` followed by `=`. Put the delimiter between quotes, `\"!\"`. You do not need a `\\` because the exclamation point is not an escape character.\n\n```python\nreader = csv.reader(input_file, delimiter=\"!\")\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, delimiter"
     }
    ],
    "files": [
     "code/files/lab2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct the code needed to change the delimiter character of a CSV file"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1343055727",
  "source": {
   "name": "default delimiter for csv.writer",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat is the default delimiter for `csv.writer`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "ef941b0a-eb0b-ae73-0d6e-5e4f6c1a464f",
     "correct": false,
     "answer": "Space"
    },
    {
     "_id": "74fd7181-e64d-be11-fb5e-eda50c30b944",
     "correct": false,
     "answer": "Semi-colon"
    },
    {
     "_id": "094fb643-0279-f90e-89f3-c2344e1f7e28",
     "correct": false,
     "answer": "Tab"
    },
    {
     "_id": "ce768d52-7d20-9465-9b51-a6fd61263f68",
     "correct": true,
     "answer": "Comma"
    }
   ],
   "guidance": "The default delimiter for `csv.writer` is a comma. You can change the delimiter with `writer = csv.writer(file, delimiter=\"\\t\")`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, delimiter, csv.writer"
     }
    ],
    "files": [
     "code/files/lab3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the default delimiter for csv.writer"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3180548474",
  "source": {
   "name": "write versus writelines",
   "showName": false,
   "instructions": "## Lab Question\n\nHow would the output have changed if `writelines` was used instead of `write`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "49d000c4-0088-9bb0-e838-06771062ea63",
     "correct": false,
     "answer": "There would have been an error"
    },
    {
     "_id": "3f3850e4-f431-a2c0-292d-37eb68a148be",
     "correct": false,
     "answer": "The output would have been written more than once"
    },
    {
     "_id": "9b180ac7-bf94-7245-7cbd-569c5c2809e5",
     "correct": true,
     "answer": "The output would have been the exact same"
    },
    {
     "_id": "11a83227-50fa-ae00-dd77-e7d6e46b2ea8",
     "correct": false,
     "answer": "`writelines` would have added an `\"s\"` to end of each line"
    }
   ],
   "guidance": "The output would have been exactly the same. The `write` method writes one string to the output file. `writelines` can write a single string and it can write a list of strings to the output file. Since the program was only writing a single line at a time, there would have been no change in the output.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Write, writelines"
     }
    ],
    "files": [
     "code/files/lab4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between write and writelines"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3508746783",
  "source": {
   "name": "files coding exercise 1",
   "showName": false,
   "instructions": "Submit your code to be graded.",
   "command": "python3 code/files/exercise1.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution. The first three lines of your program are already given.\n\n```python\nimport os, sys\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n```\n\nYou will need two variables; one to count the number of lines and another to count the number of characters. Set these variables to 0.\n\n```python\nline_count = 0\nchar_count = 0\n```\n\nOpen the text file in read mode.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n```\n\nThis solution uses a while loop to read through the text file one line at a time. Start by reading the first line of the text file. Then start the loop, checking to see if the line from the text file is equal to `\"\"`.\n\n```python\n    line = input_file.readline()\n    while line != \"\":\n```\n\nFor each line read, increment the `line_count` variable by 1. Calculate the length of the line of text (which is a string) with the `len` function. Add this value to `char_count`. Read the next line from the text file.\n\n```python\n        line_count += 1\n        char_count += len(line)\n        line = input_file.readline()\n```\n\nOnce the loop has finished running, print the two variables with accompanying text.\n\n```python\nprint(\"{} lines\".format(line_count))\nprint(\"{} characters\".format(char_count))\n```\n\nHere is the full code:\n\n```python\nimport os, sys\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n\nline_count = 0\nchar_count = 0\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    line = input_file.readline()\n    while line != \"\":\n        line_count += 1\n        char_count += len(line)\n        line = input_file.readline()\n\nprint(\"{} lines\".format(line_count))\nprint(\"{} characters\".format(char_count))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-1-test-1.txt",
     "input": "",
     "output": "4 lines\n248 characters",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-1-test-2.txt",
     "input": "",
     "output": "7 lines\n940 characters",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-1-test-3.txt",
     "input": "",
     "output": "0 lines\n0 characters",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read a file"
     }
    ],
    "files": [
     "code/files/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read from a text file, count the number of lines of text and the number of characters"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3072203434",
  "source": {
   "name": "files coding exercise 2",
   "showName": false,
   "instructions": "Submit your code when you are ready.",
   "command": "python3 code/files/exercise2.py",
   "preExecuteCommand": "",
   "guidance": "Here is one way to solve the problem. The first three lines of the program are give, but do not forget to add the `csv` module since you are working with CSV files.\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n```\n\nThere are four columns of numbers, and you need to calculate the average of each. You need five variables: one variable for each of the four columns to calculate the total value of the column, and a fifth variable that keeps track of how many rows are in the CSV file. Set all of those variables to 0.\n\n```python\ntotal1 = 0\ntotal2 = 0\ntotal3 = 0\ntotal4 = 0\nrow_count = 0\n```\n\nNext, open the CSV file in read mode and pass it to the `csv.reader`.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file)\n```\n\nThis solution uses the unpacking technique to \"pull apart\" the four numbers in each row of the CSV file.\n\n```python\n    for num1, num2, num3, num4 in reader:\n```\n\nIncrement the variable that counts the number of rows. Then add each number (`num1`, `num2`, etc.) to the appropriate variable (`total1`, `total2`, etc.). Remember, information taken from a CSV file always comes in as a string. You need to typecast the information into an integer (or a float).\n\n```python\n        row_count += 1\n        total1 += int(num1)\n        total2 += int(num2)\n        total3 += int(num3)\n        total4 += int(num4)\n```\n\nOnce the loop has finished running, print the totals divided by the number of rows.\n\n```python\nprint(\"{} {} {} {}\".format(total1/row_count, total2/row_count, total3/row_count, total4/row_count))\n```\n\nHere is the complete program.\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n\ntotal1 = 0\ntotal2 = 0\ntotal3 = 0\ntotal4 = 0\nrow_count = 0\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file)\n    for num1, num2, num3, num4 in reader:\n        row_count += 1\n        total1 += int(num1)\n        total2 += int(num2)\n        total3 += int(num3)\n        total4 += int(num4)\n\nprint(\"{} {} {} {}\".format(total1/row_count, total2/row_count, total3/row_count, total4/row_count))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-2-test-1.csv",
     "input": "",
     "output": "15.0 2.0 8.0 4.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-2-test-2.csv",
     "input": "",
     "output": "1.0 2.0 3.0 4.0",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-2-test-3.csv",
     "input": "",
     "output": "3.0 4.0 5.0 6.0",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, read mode"
     }
    ],
    "files": [
     "code/files/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read a CSV file and find the average for each column in the file"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1691073765",
  "source": {
   "name": "Lab challenge files",
   "showName": false,
   "instructions": "When you are ready, submit your code.",
   "command": "python3 code/files/lab-challenge.py",
   "preExecuteCommand": "",
   "guidance": "Here is one solution to the problem. First, start by importing the `os` module to create the path for the text file. Create the variable `path` and set its value to the text file's location.\n\n```python\nimport os\n\npath = \"student_folder/.labs\"\n```\n\nOpen the text file in read mode and read all of the lines of the text file.\n\n```python\nwith open(os.path.join(path, \"myanmar.txt\"), \"r\") as input_file:\n    lines = input_file.readlines()\n```\n\nIterate through `lines` and if the word `\"Burma\"` appears, print the line substituting `\"Myanmar\"` for `\"Burma\"`. Adding the `end=\"\"` to the print statement is not necessary. This bit of code removes the newline character so there are no blank lines between the text.\n\n```python\n    for line in lines:\n        if \"Burma\" in line:\n            print(line.replace(\"Burma\", \"Myanmar\"), end=\"\")\n```\n\nIf the word `\"Burma\"` does not appear, print the line of text with no modification. The `end=\"\"` is optional.\n\n```python\n        else:\n            print(line, end=\"\")\n```\n\nHere is the complete code.\n\n```python\nimport os\n\npath = \"student_folder/.labs\"\n\nwith open(os.path.join(path, \"myanmar.txt\"), \"r\") as input_file:\n    lines = input_file.readlines()\n    for line in lines:\n        if \"Burma\" in line:\n            print(line.replace(\"Burma\", \"Myanmar\"), end=\"\")\n        else:\n            print(line, end=\"\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Myanmar is a country in Southeast Asia.\nThe capital of Myanmar is Naypyidaw.\nIts population is about 54 million people.\nMyanmar is a former British colony.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read a file"
     }
    ],
    "files": [
     "code/files/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read from a text file and make keyword substitutions"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1653549181",
  "source": {
   "name": "files exercise 3",
   "showName": false,
   "instructions": "Submit your code when you are ready",
   "command": "python3 code/files/exercise3.py",
   "preExecuteCommand": "",
   "guidance": "Here is one solution to the problem. The first three lines of the program are given.\n\n```python\nimport os, sys\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n```\n\nNext, open the file in read mode. Read all of the lines at once, and then reverse the order of the list.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    lines = input_file.readlines()\n    lines.reverse()\n```\n\nIterate through the list of strings and print each one. \n\n```python\n    for line in lines:\n        print(line)\n```\n\nHere is the complete code.\n\n```python\nimport os, sys\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    lines = input_file.readlines()\n    lines.reverse()\n    for line in lines:\n        print(line)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-3-test-1.txt",
     "input": "",
     "output": "For the moment, at least, I was free.\nWith a steady movement—cautious, sidelong, shrinking, and slow—I slid from the embrace of the bandage and beyond the reach of the scimitar.\nAt a wave of my hand my deliverers hurried tumultuously away.\nBut the moment of escape had arrived.\nTwice again it swung, and a sharp sense of pain shot through every nerve.\nIt had cut through the linen beneath.\nIt had divided the serge of the robe.\nBut the stroke of the pendulum already pressed upon my bosom.\nThe surcingle hung in ribands from my body.\nI at length felt that I was free.\nNor had I erred in my calculations—nor had I endured in vain.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-3-test-2.txt",
     "input": "",
     "output": "The ringing became more distinct:—It continued and became more distinct: I talked more freely to get rid of the feeling: but it continued and gained definiteness—until, at length, I found that the noise was not within my ears.\nMy head ached, and I fancied a ringing in my ears: but still they sat and still chatted.\nBut, ere long, I felt myself getting pale and wished them gone.\nThey sat, and while I answered cheerily, they chatted of familiar things.\nI was singularly at ease.\nMy manner had convinced them.\nThe officers were satisfied.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-3-test-2.txt",
     "input": "",
     "output": "Only this, and nothing more.'\n'Tis some visiter,' I muttered, 'tapping at my chamber door—\nAs of some one gently rapping, rapping at my chamber door.\nAs of some one gently rapping, rapping at my chamber door.\nWhile I nodded, nearly napping, suddenly there came a tapping,\nOver many a quaint and curious volume of forgotten lore,\nOnce upon a midnight dreary, while I pondered, weak and weary,",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Read file"
     }
    ],
    "files": [
     "code/files/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read a text file, reverse its contents, and print it"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-135786605",
  "source": {
   "name": "files exercise 4",
   "showName": false,
   "instructions": "Submit your code when you are ready.",
   "command": "python3 code/files/exercise4.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. The first three lines are given to you. Do not forget about the `csv` module.\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\n```\n\nYou will also need two more variables. One to keep track of the oldest age and another to keep track of the oldest name. Set the oldest age variable to 0 and the oldest person to an empty string.\n\n```python\noldest_age = 0\noldest_name = \"\"\n```\n\nOpen the CSV file and use the `csv.reader` to parse the CSV file. Since this is a tab delimited file, make sure to tell Python to use tabs when separating the data.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file, delimiter=\"\\t\")\n```\n\nBefore you can start searching the file for the oldest person, you need to account for the first row that has the header files. Use the `next` command to skip this row, and then start iterating over the CSV file. Use the unpacking method to give each piece of information in a row its own variable name.\n\n```python\n    next(reader)\n    for name, age, career in reader:\n```\n\nCompare the `age` in the row to the variable `oldest_age`. Remember, data in a CSV file is stored as a string. Typecast `age` as an int to make this comparison. If `age` is greater than `oldest_age`, then update `oldest_age` with `age`. Also set `oldest_name` to `name`.\n\n```python\n        if int(age) > oldest_age:\n            oldest_age = int(age)\n            oldest_name = name\n```\n\nOnce the loop has finished running, print the name of the oldest person.\n\n```python\nprint(\"The oldest person is {}.\".format(oldest_name))\n```\n\nHere is the final code:\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\noldest_age = 0\noldest_name = \"\"\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file, delimiter=\"\\t\")\n    next(reader)\n    for name, age, career in reader:\n        if int(age) > oldest_age:\n            oldest_age = int(age)\n            oldest_name = name\n            \nprint(\"The oldest person is {}.\".format(oldest_name))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-4-test-1.csv",
     "input": "",
     "output": "The oldest person is Raphael.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-4-test-2.csv",
     "input": "",
     "output": "The oldest person is Ringo.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-4-test-3.csv",
     "input": "",
     "output": "The oldest person is Agatha.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, tab delimited"
     }
    ],
    "files": [
     "code/files/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read a tab delimited CSV file and print the oldest person in the file"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4037337142",
  "source": {
   "name": "files exercise 5",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 code/files/exercise5.py",
   "preExecuteCommand": "",
   "guidance": "Here is one possible solution to the problem. The first three lines are already given. Remember, reading CSV files requires the `csv` module. You will also need an empty list to store all of the cities in the Southern Hemisphere. Declare `cities` and set it to an empty list.\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\ncities = []\n```\n\nOpen the CSV file in read mode. Then use `csv.reader` to parse the CSV file. Since the file has headers, use the `next` command to skip over them.\n\n```python\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file)\n    next(reader)\n```\n\nIterate through the CSV file while using the unpacking method to give each item in the row its own variable name. Check to see if the `latitude` is a negative number, which represents the Southern Hemisphere. Data stored in a CSV file are strings, so typecast `latitude` as an int. If the `city` is in the Southern Hemisphere, add it to the `cities` list.\n\n```python\n    for city, country, latitude, longitude in reader:\n        if int(latitude) < 0:\n            cities.append(city)\n```\n\nOnce the loop has finished running, you need to print the results. There are two parts to the results: the text `\"The following cities are in the Southern Hemisphere: \"` and the list of cities. Print the first part, but be sure to add `end=\"\"` so that the list of cities does not appear on the next line. The iterate over the list `cities`.\n\n```python\nprint(\"The following cities are in the Southern Hemisphere: \", end=\"\")\nfor city in cities:\n```\n\nAs for printing the cities, either you print the city followed by a comma and a space, or you print the city followed by a period. Check to see if the city you are printing is the last element in the list `cities`. If yes, print the city and a period. In all other cases print the city followed by a comma and a space.\n\n```python\n    if city == cities[-1]:\n        print(city + \".\")\n    else:\n        print(city, end=\", \")\n```\n\nHere is all of the code:\n\n```python\nimport os, sys, csv\n\npath = sys.argv[1]\nfile_name = sys.argv[2]\ncities = []\n\nwith open(os.path.join(path, file_name), \"r\") as input_file:\n    reader = csv.reader(input_file)\n    next(reader)\n    for city, country, latitude, longitude in reader:\n        if int(latitude) < 0:\n            cities.append(city)\n            \nprint(\"The following cities are in the Southern Hemisphere: \", end=\"\")\nfor city in cities:\n    if city == cities[-1]:\n        print(city + \".\")\n    else:\n        print(city, end=\", \")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": ".guides/secure files-exercise-5-test-1.csv",
     "input": "",
     "output": "The following cities are in the Southern Hemisphere: Santiago, Tananarive, Nairobi, Montevideo.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-5-test-2.csv",
     "input": "",
     "output": "The following cities are in the Southern Hemisphere: Lima, Rio de Janeiro.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": ".guides/secure files-exercise-5-test-3.csv",
     "input": "",
     "output": "The following cities are in the Southern Hemisphere: Melbourne, Asunción.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "File I/O"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV, read mode"
     }
    ],
    "files": [
     "code/files/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/files/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT read a CSV and print out relevant information"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1896286432",
  "source": {
   "name": "function basics reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat is the difference between defining a function and calling a function?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "84df859f-6ed9-21ed-e51f-1c4112d85e57",
     "correct": false,
     "answer": "Calling a function tells Python what actions the function will perform. Defining a function tells Python to perform those actions."
    },
    {
     "_id": "0da40bbb-6bbe-6918-07f4-42e2f3f4ea0c",
     "correct": false,
     "answer": "Defining a function creates a class, while calling a function creates a method."
    },
    {
     "_id": "fcfe8e17-c402-f9a7-395e-fdd5aacbc747",
     "correct": true,
     "answer": "Defining a function tells Python what actions the function will perform. Calling a function tells Python to perform those actions."
    },
    {
     "_id": "7753a2be-4850-6746-bbdf-cb18d1ac6998",
     "correct": false,
     "answer": "Defining a function and calling a function are interchangeable terms."
    }
   ],
   "guidance": "Defining a function tells Python what actions the function will perform. Calling a function tells Python to perform those actions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Defining a function"
     }
    ],
    "files": [
     "code/functions/call-function.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/call-function.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between a function call and a function definition"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1748259403",
  "source": {
   "name": "functions whitespace reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nHow do you tell Python that your function declaration is done?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "99f141d9-e0d6-6114-a5bd-b7cb9ed4b0f2",
     "correct": true,
     "answer": "Remove the indentation"
    },
    {
     "_id": "a2fa6206-fb56-6ef5-611f-aa46a8d01e11",
     "correct": false,
     "answer": "Use the `}` character"
    },
    {
     "_id": "0270227e-0854-ee41-b026-9dec5039b87f",
     "correct": false,
     "answer": "Use the `end` keyword"
    },
    {
     "_id": "e701b7aa-aede-5650-bcf2-02ec38c721a5",
     "correct": false,
     "answer": "Use the `)` character"
    }
   ],
   "guidance": "Python uses whitespace to differentiate between normal code and a function definition. Code for a function definition is indented (4 spaces is convention). Once code no longer has this indentation, the function definition is done. Blank lines have no affect on how Python interprets your code. Though blank lines can make your code easier to read for humans.",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/functions/whitespace.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/whitespace.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the end of a function definition"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1804598706",
  "source": {
   "name": "functions docstring reading question",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the true statements about the docstring.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "726cca93-629d-603a-2391-e85f18c8ccc6",
     "correct": true,
     "answer": "Must be indented like the function body"
    },
    {
     "_id": "a8aa3afb-9a8a-a23d-6002-88547ac71abc",
     "correct": true,
     "answer": "Will be displayed when used with the `help` function"
    },
    {
     "_id": "2c1f8719-040c-e788-70f6-463a347f7760",
     "correct": true,
     "answer": "The docstring is a form of documentation on what the function does and how to use it"
    },
    {
     "_id": "5d4efaaf-fccf-3f1d-1b0e-ee233c53202c",
     "correct": true,
     "answer": "If you do not have a docstring, there will be an error message"
    }
   ],
   "guidance": "All of the statements are true of docstrings:\n* Must be indented like the function body\n* Will be displayed when used with the `help` function\n* The docstring is a form of documentation on what the function does and how to use it\n* If you do not have a docstring, there will be an error message",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Docstring"
     }
    ],
    "files": [
     "code/functions/docstring.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/docstring.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the role of a docstring in a function"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2081035412",
  "source": {
   "name": "order a function definition and function call",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to define and call the function `caesar_quote`. **Note**, not all of the code blocs will be used.",
   "initial": "def caesar_quote():\n    \"\"\"Print the Latin version of 'I came, I saw, I conquered'\"\"\"\n    print(\"Veni, vidi, vici\")\ncaesar_quote()\ndefine caesar_quote(): #distractor\ncaesar_quote #distractor\ncaesarQuote() #distractor",
   "options": "{\n  \"sortableId\" : \"sortable\",\n  \"trashId\" : \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "A function needs to be defined before it can be called. In Python, function definitions are started with the keyword `def`. Function definitions should start with the function header, then the docstring, and finally the function body. Be sure to indent the docstring and the function body. To call a function, write the function's name (as stated in the function header) followed by parentheses. The function call should not be indented.\n\n```python\ndef caesar_quote():\n    \"\"\"Print the Latin version of 'I came, I saw, I conquered'\"\"\"\n    print(\"Veni, vidi, vici\")\ncaesar_quote()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Define a function, call a function"
     }
    ],
    "files": [
     "code/functions/whitespace.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/whitespace.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT define and call a function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1983298612",
  "source": {
   "name": "formative assessment function basics",
   "showName": false,
   "instructions": "## Formative Assessment\n\nFill in the blanks below to complete a function definition and a function call.",
   "text": "<<<def>>> my_function()<<<:>>>\n    <<<\"\"\">>>Print the string 'This is a function'.<<<\"\"\">>>\n    print(\"This is a function\")\n\n<<<my_function>>>()",
   "guidance": "Function headers start with the `def` keyword and end with a `:`. The docstring starts and ends with `\"\"\"`. Finally, you call a function by writing its name followed by parentheses.\n\n```python\ndef my_function():\n    \"\"\"Print the string 'This is a function'.\"\"\"\n    print(\"This is a function\")\n\nmy_function()\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Define a function, call a function, docstring"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT define and call a function",
   "tokens": {
    "blank": [
     "def",
     ":",
     "\"\"\"",
     "\"\"\"",
     "my_function"
    ],
    "text": [
     0,
     " my_function()",
     0,
     "\n    ",
     0,
     "Print the string 'This is a function'.",
     0,
     "\n    print(\"This is a function\")\n\n",
     0,
     "()"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1415019255",
  "source": {
   "name": "parameter values reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect all of the data types that can be passed to a function as a parameter. **Note**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "4bbc6c9d-656e-3d2a-1562-e515a59951df",
     "correct": true,
     "answer": "Numbers (floats or ints)"
    },
    {
     "_id": "4481e041-c5bd-e523-9c48-1e80c89febba",
     "correct": true,
     "answer": "Strings"
    },
    {
     "_id": "118535b0-467d-898a-2758-c87d3e5dfbba",
     "correct": true,
     "answer": "Booleans"
    },
    {
     "_id": "3cc9dcf5-ab27-b1ac-3719-d17de7e3dd8c",
     "correct": true,
     "answer": "Lists of strings, numbers, or booleans"
    }
   ],
   "guidance": "Any of the data types covered so far (plus many more) can be passed as a parameter to a function. This includes lists of strings, numbers, booleans, or a combination of those data types.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters, data types"
     }
    ],
    "files": [
     "code/functions/parameter-values.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/parameter-values.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the data types that can be passed to a function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1122179925",
  "source": {
   "name": "checking parameter values with try/except reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect all of the things that the `try... except` keywords allow you to do. **Note**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "4bd4f6c0-7aa7-a25e-516e-12a657454f58",
     "correct": true,
     "answer": "Allows your program to keep running even if there is an error."
    },
    {
     "_id": "09615322-dd7a-57de-a8bc-37c604dc0ac9",
     "correct": true,
     "answer": "Allows you to write custom error messages."
    },
    {
     "_id": "b222ac8a-9508-166f-d7b0-d00effabdb80",
     "correct": false,
     "answer": "Is the only way to detect certain errors in Python."
    },
    {
     "_id": "4c0d8949-dfc6-7ca2-f298-a2dbb9c711af",
     "correct": true,
     "answer": "Allows you to check for specific kinds of errors."
    }
   ],
   "guidance": "The following statements are true about the `try... except` keywords:\n* Allows your program to keep running even if there is an error.\n* Allows you to write custom error messages.\n* Allows you to check for specific kinds of errors.\n\nPython will still be able to detect any errors that are not explicitly stated by the `try... except` keywords.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Try/except, parameters"
     }
    ],
    "files": [
     "code/functions/check-parameters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/check-parameters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain why try/except is a useful tool for programmers"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3645586010",
  "source": {
   "name": "reading question parameters advanced topics",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below about optional parameters in Python.",
   "text": "You do not have to specify the optional parameter with the function <<<call>>>. However, you must specify the optional parameter and its default value in the function <<<definition>>>.",
   "guidance": "You do not have to specify the optional parameter with the function call. However, you must specify the optional parameter and its default value in the function definition.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Optional parameters"
     }
    ],
    "files": [
     "code/functions/advanced-parameters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/advanced-parameters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate using optional variables in function calls and function definitions",
   "tokens": {
    "blank": [
     "call",
     "definition"
    ],
    "text": [
     "You do not have to specify the optional parameter with the function ",
     0,
     ". However, you must specify the optional parameter and its default value in the function ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2941508962",
  "source": {
   "name": "defining and calling a function",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a program that prints the following output:\n\n```text\nClouds are white.\nFiretrucks are red.\nGrass is green.\n```\n\n**Note**, not all of the code blocks will be used.",
   "initial": "def color_sentences(white, red, green):\n    print(\"{} are white.\\n{} are red.\\n{} is green.\".format(white, red, green)\ncolor_sentences(\"Clouds\", \"Firetrucks\", \"Grass\")\ncolors(\"Clouds\", \"Firetrucks\", \"Grass\") #distractor\ncolor_sentences(\"Firetrucks\", \"Clouds\", \"Grass\") #distractor\ndef color_sentences(red, green, white): #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There are two choices for the function header. Since there are no named parameters in the function calls, the order of the function header and the function call must align so that the string `\"Clouds\"` is stored in the parameter `white`, the string `\"Firetrucks\"` is stored in the parameter `red`, and `\"Grass\"` is stored in the parameter `green`. The only combination where this works is `def color_sentences(white, red, green):` and `color_sentences(\"Clouds\", \"Firetrucks\", \"Grass\")`. There is only one print statement to choose.\n\n```python\ndef color_sentences(white, red, green):\n    print(\"{} are white.\\n{} are red.\\n{} is green.\".format(white, red, green)\ncolor_sentences(\"Clouds\", \"Firetrucks\", \"Grass\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters, function definition, function call"
     }
    ],
    "files": [
     "code/functions/check-parameters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/check-parameters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a function definition and function call to match a predetermined set of output"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1267559242",
  "source": {
   "name": "formative assessment try/except parameters",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a program that divides the first parameter by the second. The function should check for division by zero and print an appropriate message. **Note**, not all of the code blocks will be used.",
   "initial": "def division(num1, num2):\n    try:\n        print(num1 / num2)\n    except ZeroDivisionError:\n        print(\"Division by zero is not allowed\")\nexcept: #distractor\nexcept TypeError: #distractor\ntry print(num1 / num2): #distractor\nprint(num3, num4) #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There is only one code block with a function definition. The `try` keyword exists on its own, so the block that says `try print(num1 / num2):` should be ignored. The function header declares two parameters with `num1` and `num2`. So the code block that says `print(num3 / num4)` should be ignored because those variables do not exist. The key to this program is that it has to check for a division by zero error. So ignore the code block that says `except:` because that checks for any error, not just division by zero. Also ignore `except TypeError:` because this checks only for type errors.\n\n```python\ndef division(num1, num2):\n    try:\n        print(num1 / num2)\n    except ZeroDivisionError:\n        print(\"Division by zero is not allowed\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters, try/except"
     }
    ],
    "files": [
     "code/functions/check-parameters.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/check-parameters.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT design a function that checks for division by zero"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-18589681",
  "source": {
   "name": "variable scope reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below on variable scope.",
   "text": "<<<Local>>> scope allows for two variables to have the same name but be independent of each other.\n<<<Global>>> scope allows for a single variable to exist throughout an entire program, even inside functions.",
   "guidance": "Variable scope allows for two variables to have the same name but be independent of each other.\nGlobal scope allows for a single variable to exist throughout an entire program, even inside functions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Variable Scope"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Local scope, global scope"
     }
    ],
    "files": [
     "code/functions/variable-scope.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/variable-scope.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between global and local scope",
   "tokens": {
    "blank": [
     "Local",
     "Global"
    ],
    "text": [
     0,
     " scope allows for two variables to have the same name but be independent of each other.\n",
     0,
     " scope allows for a single variable to exist throughout an entire program, even inside functions."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1787984748",
  "source": {
   "name": "reading question global scope",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat does the `global` keyword do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "cad81e54-eede-8aea-69b1-9571e28c1b4c",
     "correct": false,
     "answer": "Without the `global` keyword, all variables will be local variables."
    },
    {
     "_id": "f5d3a338-e1c6-0159-e3af-104d412ad144",
     "correct": true,
     "answer": "The `global` keyword allows for a global variable to be modified inside a function."
    },
    {
     "_id": "e3c3a8aa-15d7-dd69-6a3a-c868d736de59",
     "correct": false,
     "answer": "The `global` keyword allows for a global variable to be \"seen\" inside a function, but it cannot be modified."
    },
    {
     "_id": "3f7a7fc0-3c57-88a4-eaeb-7b49446c1516",
     "correct": false,
     "answer": "The `global` keyword is required for all variable declarations. You will get an error message if you do not use it."
    }
   ],
   "guidance": "All variables declared in the main program are global variables. This means they can be \"seen\" inside all functions. However, the global variables cannot be modified by the functions. The `global` keyword allows functions to modify global variables.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Variable scope, global variables"
     }
    ],
    "files": [
     "code/functions/global-scope.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/global-scope.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the function of the global keyword"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1906116983",
  "source": {
   "name": "reading question returning values",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat does the `return` keyword do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6b8e436f-9241-e2df-e261-74abd8114603",
     "correct": true,
     "answer": "Returns a value calculated by a function back to the program."
    },
    {
     "_id": "dd9c9c0e-8f3d-76b7-0f74-57c7ae4d66eb",
     "correct": false,
     "answer": "Prints a value to the screen."
    },
    {
     "_id": "d4ebefaa-d251-be41-6545-6becc50fa564",
     "correct": false,
     "answer": "The `return` keyword must be used to terminate a function."
    },
    {
     "_id": "15a91a35-ed10-a6f6-091b-4670c0dd4227",
     "correct": false,
     "answer": "The `return` keyword is only used with ints and floats. Other values cannot be used with `return`."
    }
   ],
   "guidance": "The `return` keyword returns a value calculated by a function back to the program. `reuturn` does not print anything to the screen. Functions do not require `return` when they terminate (think of all of the functions you wrote that use `print` at the end). Functions can return any datatype that is valid in Python.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Return value"
     }
    ],
    "files": [
     "code/functions/returning-values.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/returning-values.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the role of the return keyword"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-145527699",
  "source": {
   "name": "formative assessment variable scope",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below so that the program has a global variable called `my_var`. The function `add_5` should add 5 to `my_var`.",
   "initial": "my_var = 5\ndef add_5():\n    print(my_var + 5)\nadd_5()",
   "options": "{\n  \"sortableId\" : \"sortable\",\n  \"trashId\" : \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Since `my_var` has to be a global variable, it must be declared outside of the function.\n\n```python\nmy_var = 5\ndef add_5():\n    print(my_var + 5)\nadd_5()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Variable scope, global variable"
     }
    ],
    "files": [
     "code/functions/returning-values.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/returning-values.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT implement a global variable that is used (but not modified) in a function"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1374456814",
  "source": {
   "name": "formative assessment global variable",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a program with the global variable `my_var`. Define and call the function `change_var`, which should be able to modify the value of `my_var`. **Note**, not all of the code blocks will be used.",
   "initial": "my_var = 0\ndef change_var():\n    global my_var\n    my_var += 1\nchange_var()\nglobal(my_var) #distractor\nmy_var.global() #distractor",
   "options": "{\n  \"sortableId\" : \"sortable\",\n  \"trashId\" : \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Start with declaring the global variable `my_var`. Then declare the function `change_var`. In order to modify the a global variable in a function, use the keyword `global` followed by the variable name. Change the value of `my_var` (in this case add 1). Finally call the function `change_var`.\n\n```python\nmy_var = 0\ndef change_var():\n    global my_var\n    my_var += 1\nchange_var()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Global variables"
     }
    ],
    "files": [
     "code/functions/returning-values.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/returning-values.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the global keyword to modify the value of a global variable in a function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-511526029",
  "source": {
   "name": "reading question side effects",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat is a side effect?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "906f3b29-e505-3606-21cf-f0d014c31e62",
     "correct": false,
     "answer": "When your code has a bug in it, the error message is a side effect of bad code."
    },
    {
     "_id": "1e502fe4-faf5-0e54-840a-79ca885a57d4",
     "correct": false,
     "answer": "A side effect is when a function causes a change that is internal to the function."
    },
    {
     "_id": "ae001e6c-cd59-a6d0-84a1-ee0692d58880",
     "correct": true,
     "answer": "A side effect is when a function causes a change that is external to the function itself."
    },
    {
     "_id": "3d1bd9e5-da1d-a188-17fc-ca44f2030377",
     "correct": false,
     "answer": "A side effect is an unwanted change in your program."
    }
   ],
   "guidance": "A side effect is when a function causes a change that is external to the function itself. While some programmers try to limit the amount of side effects in their code, sometimes side effects are the desired result. Examples of side effects include modifying a global variable, printing to the screen, writing to a file, etc.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Side effects"
     }
    ],
    "files": [
     "code/functions/side-effects.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/side-effects.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a side effect"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-908435280",
  "source": {
   "name": "reading question local scope",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "text": "<<<Variables>>> declared inside a function have <<<local>>> scope. This means you can only reference the variable from <<<inside>>> the function. Trying to reference the variable from <<<outside>>> the function will cause an error.",
   "guidance": "Variables declared inside a function have local scope. This means you can only reference the variable from inside the function. Trying to reference the variable from outside the function will cause an error.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/functions/local-scope.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/local-scope.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "Variables",
     "local",
     "inside",
     "outside"
    ],
    "text": [
     0,
     " declared inside a function have ",
     0,
     " scope. This means you can only reference the variable from ",
     0,
     " the function. Trying to reference the variable from ",
     0,
     " the function will cause an error."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1907306637",
  "source": {
   "name": "reading question global vs local scope",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below.",
   "text": "When you have a local and global variable with the same name and there is no `global` keyword, the <<<local>>> scope variable takes precedence.\n\nWhen you have a local and global variable with the same name and the `global` keyword is being used, the <<<global>>> scope variable takes precedence.",
   "guidance": "When there are a local and global variable with the same name and the `global` keyword **is not** being used, then the local scope variable takes precedence.\n\nWhen there are a local and global variable with the same name and the `global` keyword **is** being used, then the global scope variable takes precedence.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Global scope, local scope"
     }
    ],
    "files": [
     "code/functions/variable-scope.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/variable-scope.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine precedence between locally and globally scoped variables",
   "tokens": {
    "blank": [
     "local",
     "global"
    ],
    "text": [
     "When you have a local and global variable with the same name and there is no `global` keyword, the ",
     0,
     " scope variable takes precedence.\n\nWhen you have a local and global variable with the same name and the `global` keyword is being used, the ",
     0,
     " scope variable takes precedence."
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-539536156",
  "source": {
   "name": "formative assessment return statement",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create the function `is_even` that takes the parameter `num`. The function should return a boolean to indicate if a number is even. **Note**, not all of the code blocks will be used.",
   "initial": "def is_even(num):\n    return(num % 2 == 0)\ndef is_even(): #distractor\nprint(num % 2 == 0) #distractor\nreturn(num % 2) #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Two important pieces of information were give about the function `is_even`. One, it has a parameter `num`. Two, the function returns a boolean statement. So the function header should have the parameter `num` and the function body should have a `return` statement.\n\n```python\ndef is_even(num):\n    return(num % 2 == 0)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Return value"
     }
    ],
    "files": [
     "code/functions/variable-scope.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a function that returns a boolean value"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3356937133",
  "source": {
   "name": "formative assessment side effects",
   "showName": false,
   "instructions": "## Formative Assessment\n\nThe function below that has a side effect (printing).\n\n```python\ndef has_vowel(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowels:\n        if vowel in string:\n            print(\"{} has a vowel.\".format(string))\n            break\n    print(\"{} does not have a vowel.\".format(string))\nhas_vowel(\"apple\")\n```\n\nRearrange the code blocks below to create new version of the function `has_vowel` that does not have a side effect. Instead it returns the appropriate string. Print the string from outside the function.",
   "initial": "def has_vowel(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowels:\n        if vowel in string:\n            return(\"{} has a vowel.\".format(string))\n            break\n    return(\"{} does not have a vowel.\".format(string))\nprint(has_vowel(\"apple\"))\nprint(\"{} does not have a vowel.\".format(string)) #distractor\nprint(\"{} has a vowel.\".format(string)) #distractor\nhas_vowel(\"apple\") #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The side effects in the original program were the print statements. Replace `print` with `return` and the function no longer has any side effects. You still need to print the result, and this code will be outside of the function. Print the result of the function `has_vowel` with the parameter `\"apple\"`.\n\n```python\ndef has_vowel(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for vowel in vowels:\n        if vowel in string:\n            return(\"{} has a vowel.\".format(string))\n            break\n    return(\"{} does not have a vowel.\".format(string))\nprint(has_vowel(\"apple\"))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Side effects"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT convert a function with side effects to a function without them"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3101012097",
  "source": {
   "name": "formative assessment side effects",
   "showName": false,
   "instructions": "## Formative Assessment\n\nThe code below has a side effect (printing).\n\n```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        print(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        print(\"{} does not have the letter 'a' in it.\".format(word))\nhas_letter_a(\"apple\")\n```\n\nWhich of the code samples below produces the same output but without having any side effects in the function `has_letter_a`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9e32d51e-a625-6712-2a8d-b2cfaf9896fa",
     "correct": false,
     "answer": "```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        return(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        return(\"{} does not have the letter 'a' in it.\".format(word))\nhas_letter_a(\"apple\")\n```"
    },
    {
     "_id": "302cb9b9-6c55-c24f-f0b4-494f59d1fe92",
     "correct": false,
     "answer": "```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        print(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        print(\"{} does not have the letter 'a' in it.\".format(word))\nprint(has_letter_a(\"apple\"))\n```"
    },
    {
     "_id": "feff14bc-8395-0d20-87a3-72efb506e810",
     "correct": true,
     "answer": "```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        return(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        return(\"{} does not have the letter 'a' in it.\".format(word))\nprint(has_letter_a(\"apple\"))\n```"
    },
    {
     "_id": "d5f3f4d6-5cfa-ca96-b6a0-cbdfe7c6ffda",
     "correct": false,
     "answer": "```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        return(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        return(\"{} does not have the letter 'a' in it.\".format(word))\nprint(has_letter_a)\n```"
    }
   ],
   "guidance": "The side effects in the original function are the print statements. The solution should not have print statements in the function `has_letter_a`. Replace the print statements with `return` statements. Finally the print statement should come outside the function, and you want to print the results of `has_letter_a(\"apple\")`.\n\n```python\ndef has_letter_a(word):\n    if \"a\" in word:\n        return(\"{} has the letter 'a' in it.\".format(word))\n    else:\n        return(\"{} does not have the letter 'a' in it.\".format(word))\nprint(has_letter_a(\"apple\"))\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Side effects"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT convert a function with side effects into a function without side effects"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-531814659",
  "source": {
   "name": "reading question when to use a function",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat are the benefits to using functions? **Note**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "1adcdb70-d947-0b17-f5eb-fe88324a535b",
     "correct": true,
     "answer": "Breakdown complex problems into smaller problems."
    },
    {
     "_id": "70ec27d3-d5c1-04fb-a9f8-ef819d74ddd1",
     "correct": true,
     "answer": "The smaller problems are easier to reason about."
    },
    {
     "_id": "7d64b454-2ced-5ffd-de72-9fe89c716134",
     "correct": true,
     "answer": "The smaller problems are easier to debug."
    },
    {
     "_id": "198aafb9-4279-8396-1a3e-f06175d4d3cf",
     "correct": true,
     "answer": "Combine many simple functions to solve complex problems."
    }
   ],
   "guidance": "Using functions in your programs allows for the following things:\n* Breakdown complex problems into smaller problems.\n* These smaller problems are easier to reason about.\n* It is easier to debug a simple function as compared to a complex block of code.\n* Simple functions can be combined to solve complex problems.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Benefits of functions"
     }
    ],
    "files": [
     "code/functions/when-functions.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/when-functions.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the benefits of using functions in their programs"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2677448801",
  "source": {
   "name": "reading question modularity",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat are the benefits to modular functions? **Note**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "3ddf333c-b1ad-2c1e-18ef-765b49f97a9d",
     "correct": true,
     "answer": "Modular functions make them more reusable."
    },
    {
     "_id": "428ba8bc-8ac2-e354-0fd9-77ca7dcd0003",
     "correct": false,
     "answer": "blah"
    }
   ],
   "guidance": "",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Modularity"
     }
    ],
    "files": [
     "code/functions/modularity.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/modularity.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the benefits of modular functions"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1330281496",
  "source": {
   "name": "reading question helper functions",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the best definition for a helper function.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "362256bd-2b47-d459-8026-d88843fe66ab",
     "correct": false,
     "answer": "Helper functions are any functions that are defined with `def_helper`."
    },
    {
     "_id": "61b6e1ac-38cc-ac52-4395-9dbc4ced22fa",
     "correct": true,
     "answer": "Helper functions provide a calculation used by another function."
    },
    {
     "_id": "44fb718c-5714-58a0-e5c7-2c84d04d2874",
     "correct": false,
     "answer": "A function is a helper function **only** if it is declared inside another function."
    },
    {
     "_id": "33e08af0-b411-4355-4d3b-2e6b2ab2b777",
     "correct": false,
     "answer": "Helper functions are functions that are used independently from any other functions."
    }
   ],
   "guidance": "Helper functions are any functions which provide a result that is used by another function. Helper functions can be declared outside of the function it helps. Or, a helper function can be declared inside the function it helps.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Helper functions"
     }
    ],
    "files": [
     "code/functions/helper-functions.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/helper-functions.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a helper function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2948315125",
  "source": {
   "name": "reading question function composition",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the code sample below that represents function composition.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "df7c5383-c010-c8de-dc57-fc53d38f2a68",
     "correct": false,
     "answer": "function1(12)\nfunction2(7)"
    },
    {
     "_id": "513e934b-7eb9-7b69-28e5-8a603c47ac01",
     "correct": false,
     "answer": "function2(7)\nfunction1(12)"
    },
    {
     "_id": "23ff7b75-4f1c-bf59-580a-4d1f90baa779",
     "correct": true,
     "answer": "function1(function2(7))"
    },
    {
     "_id": "31ef4110-c04d-d998-337a-f113e565d4ac",
     "correct": false,
     "answer": "It is impossible to combine the two functions."
    }
   ],
   "guidance": "Function composition is when a function call is a parameter to another function.\n\n```python\nfunction1(function2(7))\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Function composition"
     }
    ],
    "files": [
     "code/functions/function-composition.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/function-composition.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define function composition"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1135497979",
  "source": {
   "name": "formative assessment helper functions",
   "showName": false,
   "instructions": "## Formative Assessment\n\nIn physics, force can be calculated with the equation `force = mass * acceleration` and acceleration can be defined as `acceleration = change in velocity / time`. Rearrange the code blocks below to create function declarations for `force` and `acceleration`. The `acceleration` function must be an **internal helper** function for `force`.",
   "initial": "def force(dv, time, mass):\n    \"\"\"Calculate force\"\"\"\n    def acceleration(dv, time):\n        \"\"\"Calculate acceleration\"\"\"\n        return(dv / time)\n    return(mass * acceleration(dv, time))",
   "options": "{\n  \"sortableId\":\"sortable\"\n}",
   "grader": "",
   "guidance": "\n\n```python\ndef force(dv, time, mass):\n    \"\"\"Calculate force\"\"\"\n    def acceleration(dv, time):\n        \"\"\"Calculate acceleration\"\"\"\n        return(dv / time)\n    return(mass * acceleration(dv, time))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Helper function"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT define an internal helper function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3788114319",
  "source": {
   "name": "formative assessment function composition",
   "showName": false,
   "instructions": "## Formative Assessment\n\nIn physics, velocity can be defined as `velocity = change in position / time` and a change in position can be defined as `position_change = final_position - starting_position`. Fill in the blanks below to make a function composition of the `velocity` and `position_change` functions. Assume the starting position is 0, the final position is 100 and the time is 30.",
   "text": "<<<velocity>>>(<<<position_change>>>(0, 100), <<<30>>>)",
   "guidance": "Since the `velocity` function is dependent upon the `position_change` function, `velocity` is the outermost function. In addition, 0 and 100 were given as the starting and final positions for the `position_change` function, which is on the inside. Lastly, the `velocity` also requires a time parameter (30), which is the final blank.\n\n```python\nvelocity(position_change(0, 100), 30)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Function composition"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a function composition",
   "tokens": {
    "blank": [
     "velocity",
     "position_change",
     "30"
    ],
    "text": [
     0,
     "(",
     0,
     "(0, 100), ",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-984962408",
  "source": {
   "name": "reading question recursion",
   "showName": false,
   "instructions": "## Reading Question\n\nUnder what circumstances does it make sense to use recursion?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a4ce7daa-523b-e966-319d-c98ea4d6f1c4",
     "correct": false,
     "answer": "Recursion can be used at any time"
    },
    {
     "_id": "6c2de0c0-b9ea-1e43-832c-42fff6a4686f",
     "correct": true,
     "answer": "Recursion works best when the solution is self-similar"
    },
    {
     "_id": "9f1dc886-32fe-cdeb-2c53-2aea3c99d177",
     "correct": false,
     "answer": "Recursion is too hard; avoid it at all costs"
    },
    {
     "_id": "ca1dcd95-bbb2-c8bc-6095-5986c9f21122",
     "correct": false,
     "answer": "Recursion only works with mathematical concepts like factorial and the Fibonacci sequence"
    }
   ],
   "guidance": "Recursion works best when the solution is self-similar. That is, when the problem is broken down into smaller parts, and the smaller parts are a variation of the large problem.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "When to use recursion"
     }
    ],
    "files": [
     "code/recursion/what-is-recursion.py",
     "code/functions/what-is-recursion.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/what-is-recursion.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify when recursion can be used"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3252681714",
  "source": {
   "name": "reading question base case",
   "showName": true,
   "instructions": "## Reading Question\n\nWhat is the purpose of the base case in recursion?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "91c96d70-d65a-81f1-34e5-d52678a9c70f",
     "correct": false,
     "answer": "The base case tells the function to call itself."
    },
    {
     "_id": "948ddd45-b5d3-afc9-5a15-83286b5a69cd",
     "correct": false,
     "answer": "The base case is another name for recursion."
    },
    {
     "_id": "01004f1c-88b7-5844-8bdf-03267b6f516a",
     "correct": false,
     "answer": "The base case is the name of the recursive function."
    },
    {
     "_id": "73a46e8d-7f79-8cb2-7417-7b028cb40554",
     "correct": true,
     "answer": "When true, the base case stops the recursive calls and returns a value."
    }
   ],
   "guidance": "When true, the base case stops the recursive calls and returns a value. In the example of factorial, the base case is when `n` is less than or equal to 1. The function returns `1` and the long line of multiplication happens.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Base case"
     }
    ],
    "files": [
     "code/functions/fibonacci.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/fibonacci.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define the base case in recursion"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3779446017",
  "source": {
   "name": "Formative assessment recursive sum function",
   "showName": false,
   "instructions": "## Formative Assessment\n\nRearrange the code blocks below to create a recursive function that finds the sum of `n` integers. For example, `find_sum(5)` would add up the numbers 0 to 5. **Note**, not all of the blocks will be used.",
   "initial": "def find_sum(n):\n    \"\"\"Recursively calculate the sum of the first n numbers\"\"\"\n    if n == 0:\n        return 0\n    else:\n        return(n + find_sum(n-1))\nprint(0) #distractor\nreturn(n - find_sum(n-1)) #distractor\nreturn(n + find_sum(n+1)) #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Start off with the function header and docstring. The next line of code is the base case `if n == 0:`. Recursive functions return values, they do not print them. Ignore the code block that says `print(0)`, and use `return 0`. Next is the else statement. There are two incorrect blocks for the recursive case. First, ignore the code block that says `return(n - find_sum(n-1))`. The function should find the sum, but this code block is subtracting from `n`. Also, the recursive function call should move `n` closer to the base case. Since the base case is 0, `n` should get smaller. Use the code block that says, `return(n + find_sum(n-1))`.\n\n```python\ndef find_sum(n):\n    \"\"\"Recursively calculate the sum of the first n numbers\"\"\"\n    if n == 0:\n        return 0\n    else:\n        return(n + find_sum(n-1))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Create a recursive function"
     }
    ],
    "files": [
     "code/functions/fibonacci.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT create a recursive function to find the sum"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2191119400",
  "source": {
   "name": "formative assessment base case",
   "showName": false,
   "instructions": "## Formative Assessment\n\nAssume you want to write a recursive function that multiplies each element in a list by the number 5. What should the base case be?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "11b8a146-3b0b-68d2-92e3-4f6699221d09",
     "correct": true,
     "answer": "When the length of the list is 1"
    },
    {
     "_id": "7dff1abd-e3bd-f347-dc59-9ffae1d28801",
     "correct": false,
     "answer": "When the length of the list is 0"
    },
    {
     "_id": "3fc230e7-36e4-745a-f9ac-1834e49e5f5c",
     "correct": false,
     "answer": "When the list is equal to 1"
    },
    {
     "_id": "b48dcc1f-ddae-23c0-e6e3-d2f268f6bd99",
     "correct": false,
     "answer": "When the list is equal to 0"
    }
   ],
   "guidance": "The program should keep recursing until the **length** of the list is 1. A length of 1 means there is only one element left in the list. There is no reason to keep calling the function when once the list is empty.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Base case"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify the base case for a recursive function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4064605767",
  "source": {
   "name": "helper function question",
   "showName": false,
   "instructions": "## Lab Question\n\nWhat is the relationship between the `draw_triangle` function and the `sierpinski` function?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "70ac8d41-80db-1937-3af8-3ecd1529c939",
     "correct": false,
     "answer": "`sierpinski` is a helper function for `draw_triangle`"
    },
    {
     "_id": "8296b2c1-93b2-19d4-9030-0933f0c0f1ed",
     "correct": true,
     "answer": "`draw_triangle` is a helper function for `sierpinski`"
    },
    {
     "_id": "e211a818-dd47-d5fb-7233-ca25456eb24a",
     "correct": false,
     "answer": "`draw_triangle` is declared inside `sierpinski`"
    },
    {
     "_id": "2dda4d3f-ddd0-6eff-19d8-a1e4ac80cec5",
     "correct": false,
     "answer": "`draw_triangle` is called as a parameter for the `sierpinski` function"
    }
   ],
   "guidance": "`draw_triangle` is a helper function for `sierpinski` because the `sierpinski` function calls `draw_triangle`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Helper function"
     }
    ],
    "files": [
     "code/functions/lab1.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/lab1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT identify a helper function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-932559392",
  "source": {
   "name": "global vs local variables for functions",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blanks below.",
   "text": "A <<<local>>> variable is declared inside a function and cannot be accessed outside of the function.\n\nA <<<global>>> variable is declared outside of a function and can be accessed inside a function.",
   "guidance": "A local variable is declared inside a function and cannot be accessed outside the function.\n\nA global variable is declared outside a function and can be accessed inside a function.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Global variable, local variable, variable scope"
     }
    ],
    "files": [
     "code/functions/movie-app.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/movie-app.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between global and local variables",
   "tokens": {
    "blank": [
     "local",
     "global"
    ],
    "text": [
     "A ",
     0,
     " variable is declared inside a function and cannot be accessed outside of the function.\n\nA ",
     0,
     " variable is declared outside of a function and can be accessed inside a function."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2002012187",
  "source": {
   "name": "optional parameters lab question",
   "showName": false,
   "instructions": "## Lab Question\n\nLook at the function definition below and determine what the output will be for the two print statements.\n\n```python\ndef my_function(x=5):\n    print(x)\n\nprint(my_function())\nprint(my_function(7))\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c1f56315-cdb8-d06f-e244-e7b7f0cd7977",
     "correct": false,
     "answer": "7\n5"
    },
    {
     "_id": "04e01f9e-1cc9-be48-a27a-1281fda8c52c",
     "correct": false,
     "answer": "12\n2"
    },
    {
     "_id": "1663bd65-8e1d-ef8d-b3df-395d5bcbe87a",
     "correct": false,
     "answer": "5\n5"
    },
    {
     "_id": "850420ca-4ed4-b7e8-1ac4-6636620d92a6",
     "correct": true,
     "answer": "5\n7"
    }
   ],
   "guidance": "The parameter `x` is an optional parameter. That means the function can be called with no parameters, and Python will assign `x` the value of five`. If `7` is passed as a parameter to the function, then `7` will be used for the value of `x`.\n\n```\n5\n7\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Optional parameter"
     }
    ],
    "files": [
     "code/functions/movie-app.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/movie-app.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT determine the output of a function with an optional parameter"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-188190556",
  "source": {
   "name": "lab question function composition",
   "showName": false,
   "instructions": "## Lab Question\n\nLook at this code and fill in the blank below.\n\n```python\nprint_movie_data(sort_movie_data(movie_data, 2, True))\n```\n",
   "text": "The function `print_movie_data` has another function, `sort_movie_data` as a parameter. This is an example of <<<function composition>>>.",
   "guidance": "When a function has another function as a parameter, this is called function composition.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/functions/movie-app.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/movie-app.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify function composition from a code snippet",
   "tokens": {
    "blank": [
     "function composition"
    ],
    "text": [
     "The function `print_movie_data` has another function, `sort_movie_data` as a parameter. This is an example of ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-858907768",
  "source": {
   "name": "lab question helper functions",
   "showName": false,
   "instructions": "## Lab Question\n\nFill in the blank below.\n",
   "text": "The function `user_interface` calls several functions like `ask_column` and `ask_order`. This is an example of <<<helper functions>>>.",
   "guidance": "When a function calls another function, this is an example of helper functions. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Helper functions"
     }
    ],
    "files": [
     "code/functions/movie-app.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/movie-app.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify helper functions",
   "tokens": {
    "blank": [
     "helper functions"
    ],
    "text": [
     "The function `user_interface` calls several functions like `ask_column` and `ask_order`. This is an example of ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "test",
  "taskId": "test-2255079836",
  "source": {
   "name": "functions lab challenge unit test",
   "showName": false,
   "instructions": "Submit your code when you are ready.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"python\",\"subtype\":\"unittest\",\"files\":[\".guides/secure/unit_tests/functions/lab_challenge_test.py\"],\"partialPoints\":true,\"maxPoints\":1,\"executable\":\"python3\",\"pythonwd\":\"\"}",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 300,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/functions/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1551096855",
  "source": {
   "name": "not changing a parameter with recursion",
   "showName": false,
   "instructions": "## Lab Question\n\nLook at the code below. Select the answer that best describes why the code is problematic.\n\n```python\ndef recursive_function(num):\n    if num < 0:\n        return 1\n    else:\n        return num + recursive_function(num)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "cb36641b-3f06-7792-07d2-00a1afc85136",
     "correct": false,
     "answer": "There is nothing wrong with the function"
    },
    {
     "_id": "1a70320b-2560-04aa-84c6-e1f37783fadc",
     "correct": false,
     "answer": "The base case should be `if num < 5:`"
    },
    {
     "_id": "b470a048-d4bd-0c9b-a41b-5c403e48baf8",
     "correct": true,
     "answer": "When using recursion, `num` should get smaller so that the base case becomes true"
    },
    {
     "_id": "45ea59b6-924a-4c9c-9d35-c70edae8137d",
     "correct": false,
     "answer": "It should be `return num - recursive_function(num)`"
    }
   ],
   "guidance": "```python\ndef recursive_function(num):\n    if num < 0:\n        return 1\n    else:\n        return num + recursive_function(num)\n```\n\nIn the code above, `recursive_function` is called with `num` staying the same value. If it never gets smaller, then `num` will never be less than 0. The function will be stuck in an infinite loop. The parameter in the recursive function should change so that the base case becomes true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Base case, parameter"
     }
    ],
    "files": [
     "code/recursion/recursive_tree.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/recursive_tree.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT identify the need for a parameter to change when using recursion"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-499923326",
  "source": {
   "name": "put recursion in order",
   "showName": false,
   "instructions": "## Lab Question\n\nRearrange the blocks below to create a recursive function. Assume that the recursive function is called with this code:\n\n`my_recursive_function(15)`\n\n**Note**, not all of the code blocks will be used.",
   "initial": "def my_recursive_function(num):\n    \"\"\"Creates a recursive function\"\"\"\n    if num < 0:\n        return 1\n    else:\n        return num + my_recursive_function(num - 1)\nprint(1) #distractor\nreturn num + my_recursive_function(num + 1) #distractor\nprint(num + my_recursive_function(num - 1)) #distractor",
   "options": "{\n  \"sortableId\":\"sortable\",\n  \"trashId\":\"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Recursive functions need to return values, not print them. So you can ignore the code blocks that say `print`. Since the base case is testing if `num` is less than 0 and `my_recursive_function` was initially called with a parameter of 15, you need to use the code block that says `return num + my_recursive_function(num - 1)`. The value of `num` must get to be equal to or less than 0. If not, the recursive function will become an infinite loop.\n\n```python\ndef my_recursive_function(num):\n    \"\"\"Creates a recursive function\"\"\"\n    if num < 0:\n        return 1\n    else:\n        return num + my_recursive_function(num - 1)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Create a recursive function"
     }
    ],
    "files": [
     "code/recursion/hilbert.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/hilbert.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a recursive function"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2340776475",
  "source": {
   "name": "recursion lab challenge",
   "showName": false,
   "instructions": "Rearrange the code blocks below to create a recursive function that draws this image:\n\n![Square Spiral](.guides/images/square_spiral.png)\n\n**Note**, not all of the code blocks will be used.",
   "initial": "import turtle\nt = turtle.Turtle()\ndef square_spiral(dist):\n    \"\"\"Recursively draw a spiral with right angles\"\"\"\n    if dist > 5:\n      t.forward(dist)\n      t.right(90)\n      square_spiral(dist - 5)\nsquare_spiral(80)\nt.right(dist) #distractor\nsquare_spiral(dist + 5) #distractor\nsquare_spiral(dist) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"turtleModelCode\": \"def square_spiral(dist):\\n\\tif dist> 5:\\n\\tmodelTurtle.forward(dist)\\n\\tmodelTurtle.right(90)\\n\\tsquare_spiral(dist - 5)\\nsquare_spiral(80)\",\n  \"executable_code\": \"for i in range(0,4):\\nmyTurtle.forward(100)\\nmyTurtle.left(120)\\npass\",\n  \"programmingLang\": \"python\"\n}",
   "grader": "5",
   "guidance": "",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Create a recursive function"
     }
    ],
    "files": [
     "code/recursion/exercise5.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT generate recursive function that draws a spiral with right angles"
  }
 },
 {
  "type": "test",
  "taskId": "test-3719855423",
  "source": {
   "name": "'affjglakg",
   "showName": false,
   "instructions": "",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"python\",\"subtype\":\"style\",\"files\":[\".guides/secure/unit_tests/functions/lab_challenge_test.py\"],\"partialPoints\":false,\"maxPoints\":1}",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 300,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "code/functions/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-1891014617",
  "source": {
   "name": "check lab challenge functions",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/lab_challenge_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The problem asks you to create function named `to_upper` that receives a string parameter and returns the text in uppercase. The easiest way to do that is to use the `upper()` method on the string that is passed to the function.\n\n```python\ndef to_upper(txt):\n    return(txt.upper())\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Parameters"
     }
    ],
    "files": [
     "code/functions/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT write their own function"
  }
 },
 {
  "type": "test",
  "taskId": "test-4057934440",
  "source": {
   "name": "functions exercise 1 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/exercise1_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The function needs to do two things. One, test to make sure that the two parameters are can be added together and then divided. Use a `try/except` block. You can check for a `TypeError` and return the string `Please use two numbers as parameters`. Otherwise return the sum of the two parameters divided by two.\n\n```python\ndef avg(n1, n2):\n    \"\"\"Return average of two numbers\n    Return a message is a non-number is passed\"\"\"\n    try:\n      return(n1 + n2) / 2\n    except TypeError:\n      return(\"Please use two numbers as parameters\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Try/except"
     }
    ],
    "files": [
     "code/functions/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a function that uses try/except to catch bad parameters"
  }
 },
 {
  "type": "test",
  "taskId": "test-3957105420",
  "source": {
   "name": "functions exercise 2 code test",
   "showName": false,
   "instructions": "Submit your code when ready.",
   "command": "python3 .guides/secure/unit_tests/functions/exercise2_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The function will do one of two things, either return all of the even numbers from a list or return all of the odd numbers from a list. The first thing to do is to create an empty list that the function will return. If the boolean parameter is True, then iterate through the list passed to the function. Check to see if each number is even (`num % 2 == 0`), and append the number to the list if even. If the boolean parameter is False, check if each element in the given list is odd. Append it to the list that will be returned. Here is one possible solution to the problem:\n\n```python\ndef odds_or_evens(my_bool, nums):\n    \"\"\"Returns all of the odd or\n    even numbers from a list\"\"\"\n    return_list = []\n    for num in nums:\n      if my_bool:\n          if num % 2 == 0:\n              return_list.append(num)\n      else:\n          if num % 2 != 0:\n              return_list.append(num)\n                \n    return return_list\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Return a list"
     }
    ],
    "files": [
     "code/functions/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to define a function that  has multiple parameters and returns a list"
  }
 },
 {
  "type": "test",
  "taskId": "test-1820725404",
  "source": {
   "name": "functions exercise 3 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/exercise3_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The function `search_list` needs a list of strings parameter and a string parameter. Iterate through the list and check each item against the search term (string parameter). The key is to put both strings (the item from the list and the search term) into the same case for the comparison. If there is a match, return the index of the item with the list method `.index()`. If there is no match, return `-1`. Here is one possible solution:\n\n```python\ndef search_list(lst, term):\n    \"\"\"Search for item in a list\n    Return the index if found\n    Return -1 if not found\"\"\"\n    for item in lst:\n        if item.lower() == term.lower():\n            return lst.index(item)\n    return -1\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functiosn"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiple parameters, string comparison"
     }
    ],
    "files": [
     "code/functions/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a function that searches a list fora specific term"
  }
 },
 {
  "type": "test",
  "taskId": "test-3993992507",
  "source": {
   "name": "functions exercise 4 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/exercise4_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Even though goal of this activity is to write a function, you will need some important pieces of information outside of the function. First, you need to import the `os` and `csv` modules. You also need to create the global variables `file_name` and `file_path` as given by the problem. Once the `best_team` function has been declared, open a CSV file. Then use the `csv.reader` method on the opened CSV file. As stated in the problem, the first row are headers; skip this row with the `next` function. You will need two variables to keep track of the most wins and the team name who has the most wins. Set the variable for the wins to 0, and make the variable for the team name an empty string. Then iterate through the CSV file. Compare wins in each row (element 3) to the variable that stores the most wins. Remember, all data in a CSV file is stored as a string. So you need to type cast the CSV wins into an integer for the comparison. If the team in the row has more wins, set the wins variable to the number of wins from the row (element 3). Again, be sure to type cast these wins to an integer. Then give the team name variable the name from the row (element 0). Once you have iterated through the file, return the variable with the team name. Here is one possible solution:\n\n```python\nimport csv, os\n\nfile_name = \"mlb_data.csv\"\nfile_path = \"student_folder/.exercises\"\n\ndef best_team(f_name, f_path):\n    \"\"\"Read a CSV of baseball data.\n    Return the team name with the most wins\"\"\"\n    with open(os.path.join(f_path, f_name), \"r\") as csv_file:\n        reader = csv.reader(csv_file)\n        next(reader)\n        most_wins = 0\n        best_team = \"\"\n        for row in reader:\n            if int(row[3]) > most_wins:\n                most_wins = int(row[3])\n                best_team = row[0]\n        return best_team\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "CSV"
     }
    ],
    "files": [
     "code/functions/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT write a function that reads a CSV file and returns specific information"
  }
 },
 {
  "type": "test",
  "taskId": "test-3501190018",
  "source": {
   "name": "functions exercise 5 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/functions/exercise5_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The solution to this problem has two parts. First, reverse the string passed as a parameter. The second part is to compare the original string and the reversed string and then return True or False. One way to reverse a string is to create an empty string. The iterate backwards through the original string. Take each character and concatenate it with the reversed string. This was done using a while loop. Calculate how many times the loop needs to run. Because strings start counting each character with 0, the last character in the string is the string's length minus 1. Store this number that will represent the position as you iterate backwards through the string. Start at this variable, concatenate the character, and and subtract one from the position variable. Finally, compare the original string and the reversed string. Return True if they are the same, return false if they are different. Here is one possible solution:\n\n```python\ndef is_palindrome(string):\n    reversed_string= \"\"\n    position = len(string) - 1\n    while position >= 0:\n        reversed_string += string[position]\n        position -= 1\n    if string == reversed_string:\n        return True\n    else:\n        return False\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Functions"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse a string, iteration"
     }
    ],
    "files": [
     "code/functions/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/functions/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to creates a function that determines if a string is a palindrome"
  }
 },
 {
  "type": "test",
  "taskId": "test-1411085874",
  "source": {
   "name": "recursion exercise 1 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise1_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to take the num passed as a parameter and add it to `recursive_sum` with the number minus 1. The base case is when the number passed is 0. `recursive_sum` should return 0 when the parameter is 0. Here is a solution to the problem:\n\n```python\ndef recursive_sum(num):\n    \"\"\"Recursively calculate sum from 0 to the parameter\"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num + recursive_sum(num - 1)\n        \nprint(recursive_sum(17))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Calculate sum"
     }
    ],
    "files": [
     "code/recursion/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function that find the sum for all numbers 0 to the original parameter"
  }
 },
 {
  "type": "test",
  "taskId": "test-552501310",
  "source": {
   "name": "recursion exercise 2 code test",
   "showName": false,
   "instructions": "Submit your code when you are ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise2_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to take the first item from the list and add it to the `list_sum` of the original list from element 1 to the end of the list. The base case is when the list has just one element in it; return this last element. Here is a possible solution:\n\n```python\ndef list_sum(my_list):\n    \"\"\"Recursively calculate the sum of a list of numbers\"\"\"\n    if len(my_list) == 1:\n        return my_list[0]\n    else:\n        return my_list[0] + list_sum(my_list[1:])\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Lists"
     }
    ],
    "files": [
     "code/recursion/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function to calculate the sum of a list"
  }
 },
 {
  "type": "test",
  "taskId": "test-1580311453",
  "source": {
   "name": "recursion exercise 3 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise3_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The problem is asking you to perform multiplication between 2 and the number of bunnies. The recursive pattern is adding 2 then calling `bunny_ears` with the number of bunnies minus 1. The base case is when the number of bunnies is 0. Here is a possible solution:\n\n```python\ndef bunny_ears(bunnies):\n    \"\"\"Recursively determine the number of bunny ears (2 per bunny)\"\"\"\n    if bunnies == 0:\n        return 0\n    else:\n        return 2 + bunny_ears(bunnies - 1)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiplication"
     }
    ],
    "files": [
     "code/recursion/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function that calculates the product of 2 and another number"
  }
 },
 {
  "type": "test",
  "taskId": "test-1726150510",
  "source": {
   "name": "recursion exercise 4 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise4_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to take the last character from the string pass to the recursive function and concatenate it with the `reverse_string` using the string minus the last character. This is done with the slice operator (`[:-1]`). The base case is when the length of the string is 1, then you return the last character. Here is one possible solution:\n\n```python\ndef reverse_string(word):\n    if len(word) == 1:\n        return word[0]\n    else:\n        return word[-1] + reverse_string(word[:-1])\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Slice operator"
     }
    ],
    "files": [
     "code/recursion/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT recursively reverse a string"
  }
 },
 {
  "type": "test",
  "taskId": "test-178541446",
  "source": {
   "name": "recursion exercise 5 code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/exercise5_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to select the largest value between the first number in the list and `get_max` which takes the rest of the list. The base case is when the list only has one number in it. In this case, return the number in the list. Here is one example of the solution:\n\n```python\ndef get_max(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums[0], get_max(nums[1:]))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Max function"
     }
    ],
    "files": [
     "code/recursion/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function to find the largest number in a list"
  }
 },
 {
  "type": "test",
  "taskId": "test-366499718",
  "source": {
   "name": "recursion lab challenge code test",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/unit_tests/recursion/lab_challenge_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The recursive pattern is to multiply the base by `recursive_power` with the exponent decreased by one. The base case is when the exponent is 0. In this case, return 1. Here is one possible solution:\n\n```python\ndef recursive_power(base, exp):\n    if exp == 0:\n        return 1\n    else:\n        return base * recursive_power(base, exp - 1)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Recursion"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Two parameters, exponents"
     }
    ],
    "files": [
     "code/recursion/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/recursion/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a recursive function to calculate a number raised to a power"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3785924639",
  "source": {
   "name": "reading question subtraction",
   "showName": false,
   "instructions": "## Reading Question\nRewrite the code below using the `-=` operator.\n\n```python\na = 42\nb = 17\na = a - b\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "05fa8057-c4d7-9821-e81e-d11a070813cc",
     "correct": false,
     "answer": "a = a - b"
    },
    {
     "_id": "4d5e9894-b2d8-7471-80c0-1f135f8d62c0",
     "correct": false,
     "answer": "a =- b"
    },
    {
     "_id": "176ee3e7-7186-d047-7750-91058114d24f",
     "correct": true,
     "answer": "a -= b"
    },
    {
     "_id": "6477c7f6-3e9e-3920-6c5e-477935c7be38",
     "correct": false,
     "answer": "a += b"
    }
   ],
   "guidance": "The correct answer is `a -= b`. The `-` must come before the `=`. Using `+=` would perform addition, not subtraction. Finally, `a = a - b` does not make use of the `-=` operator.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Subtraction"
     }
    ],
    "files": [
     "code/operators/playground-subtract.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-subtract.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use the -= operator"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1940684776",
  "source": {
   "name": "formative assessment 2 printing",
   "showName": false,
   "instructions": "Which statement below will print `Hi!` **without** a newline character?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "0241f855-16b7-0ecd-7679-295ace8629b2",
     "correct": true,
     "answer": "`print(\"Hi!\", end='')`"
    },
    {
     "_id": "9f6cdfee-9c02-0383-9cd8-a2c1a2beb78c",
     "correct": false,
     "answer": "`print(\"Hi!\", end=N/A)`"
    },
    {
     "_id": "fec7e9d1-095f-3337-b6a6-55d1a3769450",
     "correct": false,
     "answer": "`print(\"Hi!\", stop='')`"
    },
    {
     "_id": "d63202cf-da3c-ff1b-c466-4ca9b8e25c14",
     "correct": false,
     "answer": "'print(\"Hi!\")"
    }
   ],
   "guidance": "By default, the `print` statement will add a newline character. To remove it, add `end=''` or `end=\"\"` to the print statement. The solution is `print(\"Hi!\", end='')`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Print "
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT remove newline character from the print statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3042873713",
  "source": {
   "name": "reading question integers",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect all of the properly formatted integers from the list below. **Note**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "7f62604f-2694-a6d7-7483-06f613c6d9b3",
     "correct": false,
     "answer": "\"20000\""
    },
    {
     "_id": "c3a1b475-5d9a-ba1a-b566-d441647192da",
     "correct": true,
     "answer": "20000"
    },
    {
     "_id": "6503f305-75a3-6d32-f42b-4331a982692f",
     "correct": false,
     "answer": "20,000"
    },
    {
     "_id": "a53ec453-8cf5-c1e3-488a-99ece062a5dc",
     "correct": true,
     "answer": "020000"
    }
   ],
   "guidance": "The correct answers are `20000` and 020000`. Commas are not used with larger numbers. Leading zeros do not affect Python's ability to work with integers. However, leading zeros can be confusing to programmers so they should be avoided. Quotation marks around an integer mean that the data type is a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Integers"
     }
    ],
    "files": [
     "code/fundamentals/playground-types-int.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/playground-types-int.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Identify an integer"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-905140979",
  "source": {
   "name": "reading question increment",
   "showName": false,
   "instructions": "## Reading Question\nSelect the line of code below that increments the variable `a` by 1.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "dbd076c4-a17b-414f-7e63-c9845258c2ad",
     "correct": false,
     "answer": "a++"
    },
    {
     "_id": "2b1319d4-b622-95bd-4e38-52cb9ab72618",
     "correct": false,
     "answer": "a = 1"
    },
    {
     "_id": "7694eb12-94e4-bd7a-41b6-c9dd78f361cf",
     "correct": false,
     "answer": "a -= 1"
    },
    {
     "_id": "413ebd87-8338-d5e0-39d0-91525b4b5024",
     "correct": true,
     "answer": "a = a + 1"
    }
   ],
   "guidance": "The correct answer is `a = a + 1`. Increment means to increase the value, so `a -= 1` would not be acceptable. While some programming languages use `a++` to increment a variable by 1, Python does not do this. Finally, `a = 1` assigns the value of `a` to 1. It does not add 1 to the previous value of `a`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Increment"
     }
    ],
    "files": [
     "code/operators/playground-increment.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-increment.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT increment a variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3260112178",
  "source": {
   "name": "reading question string concatenation",
   "showName": false,
   "instructions": "## Reading Question\n\nThe code below should produce the output `I love string concatenation!`. \n\n```python\na = \"I love\"\nb = ???\nc = ???\nprint(c)\n```\n\nSelect the correct declarations for variables `b` and `c`. **Hint**, there are two answers for this question.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "8938927a-3ed9-d025-561e-5eec85a29026",
     "correct": false,
     "answer": "c = b + a"
    },
    {
     "_id": "0e75e9e9-dcdf-c2db-8e26-0e7b4c4d151c",
     "correct": true,
     "answer": "b = \" string concatenation!\""
    },
    {
     "_id": "9d90f685-e58d-dee0-d124-981c804241b0",
     "correct": true,
     "answer": "c = a + b"
    },
    {
     "_id": "066432e3-79a1-07e7-4454-4c5fede5e45e",
     "correct": false,
     "answer": "b = \"string concatenation\""
    }
   ],
   "guidance": "The correct answers are:\n\n```python\nb = \" string concatenation!\"\nc = a + b\n```\n\n`b = \"string concatenation\"` is incorrect because there needs to be a space between `love` and `string`. It is also missing the `!`. The response `c = b + a` would put `I love` at the end of the output, not the beginning.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Arithmetic Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String Concatenation"
     }
    ],
    "files": [
     "code/operators/playground-concatenation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-concatenation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT concatenate two strings"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4102006681",
  "source": {
   "name": "reading question mulitiplication",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the line of code below that prints the product of the variables `a` and `b`.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "f83d3d01-9ab1-89d0-09df-7b17a9c673f5",
     "correct": false,
     "answer": "print(ab)"
    },
    {
     "_id": "1b6d094a-9761-15ca-d2a3-4f1d521b0acc",
     "correct": false,
     "answer": "print(a * c)"
    },
    {
     "_id": "92806582-b75e-1f14-e423-3ecef4f44d7b",
     "correct": false,
     "answer": "print(a x b)"
    },
    {
     "_id": "cdea5912-4892-2cb9-1af9-a62b0c7a7594",
     "correct": true,
     "answer": "print(a * b)"
    }
   ],
   "guidance": "Multiplication is done with the `*` operator. So the correct answer is `print(a * b)`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Arithmetic Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiplication"
     }
    ],
    "files": [
     "code/operators/playground-multiply.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-multiply.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the proper symbol used for multiplication"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2214264847",
  "source": {
   "name": "reading question powers",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the line of code that would raise 7 to the power of 4.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "857d63f1-e988-ac13-df1f-1986c4796dcb",
     "correct": false,
     "answer": "7 * 4"
    },
    {
     "_id": "35a077bc-e9a0-6ead-7c6d-475acd77b32e",
     "correct": true,
     "answer": "7 ** 4"
    },
    {
     "_id": "912c4fb0-3434-e730-a6f7-f262e68f3320",
     "correct": false,
     "answer": "7 ^ 4"
    },
    {
     "_id": "3147e2ff-9c31-935e-c5b4-96bfb5158c38",
     "correct": false,
     "answer": "4 ** 7"
    }
   ],
   "guidance": "The `**` operator is used to raise a number to a specific power. Since 7 is the base and 4 is the exponent, the answer is `7 ** 4`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Arithmetic Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Powers"
     }
    ],
    "files": [
     "code/operators/playground-powers.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-powers.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT raise a number to a power"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1619853519",
  "source": {
   "name": "lab question order of operations",
   "showName": false,
   "instructions": "## Order of Operations\n\nLooking at the expression below, identify the order of operations.\n\n`(1 + 2) * 4 ** 2 - 10`",
   "text": "Step 1: <<<1 + 2>>>\nStep 2: <<<4 ** 2>>>\nStep 3: <<<3 * 16>>>\nStep 4: <<<54 - 10>>>",
   "guidance": "Here is the solution:\n\n```\nStep 1: 1 + 2\nStep 2: 4 ** 2\nStep 3: 3 * 16\nStep 4: 54 - 10\n```\n\n`1 + 2` comes first because it is inside of parentheses. \n`4 ** 2` is second because it is an exponent (a power)\n`3 * 16` is the third step because multiplication and division come after exponents\n`54 - 10` is final step because addition and subtraction come last in order of operation",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Arithmetic Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [
     "code/operators/lab-order-of-operations.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-order-of-operations.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT apply order of operations to an expression",
   "tokens": {
    "blank": [
     "1 + 2",
     "4 ** 2",
     "3 * 16",
     "54 - 10"
    ],
    "text": [
     "Step 1: ",
     0,
     "\nStep 2: ",
     0,
     "\nStep 3: ",
     0,
     "\nStep 4: ",
     0
    ]
   }
  }
 },
 {
  "type": "test",
  "taskId": "test-3470894254",
  "source": {
   "name": "lab challenge question",
   "showName": false,
   "instructions": "## Lab Challenge\n\nWrite a boolean expression that incorporates one of the equality operators, one of the less than operators, one of the greater than operators, and two of the logical operators. The result of your boolean expression must be `False`.",
   "command": "python3 .guides/secure/operators-lab-challenge-test.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are many possible solutions to this problem.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to write a complex boolean expression"
  }
 },
 {
  "type": "test",
  "taskId": "test-927174089",
  "source": {
   "name": "fundamentals exercise 1",
   "showName": false,
   "instructions": "## Exercise 1\nDeclare a variable `my_boolean` and assign it the boolean value of true. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-1-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are two parts to this problem. The first is to declare the variable `my_boolean` and assign it the value of `True`. The second is to print the value of the variable. Your code should look like this:\n\n```python\nmy_boolean = True\nprint(my_boolean)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT create and print a boolean variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-4000027711",
  "source": {
   "name": "fundamentals exercise 2",
   "showName": false,
   "instructions": "## Exercise 2\nDeclare a variable `my_int` and assign it the integer value of 3. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-2-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Your program should declare the variable `my_int`, assign it the value of `3`, and then print the variable.\n\n```python\nmy_int = 3\nprint(my_int)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Integer Variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print an integer variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-704473075",
  "source": {
   "name": "fundamentals exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nDeclare a variable `my_string` and assign it the string value of:\n\n`This is a string`\n\nPrint the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-3-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "You need to create the variable `my_string`, assign it the value of `This is a string`, and then print the variable.\n\n```python\nmy_string = \"This is a string\"\nprint(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String Variable"
     }
    ],
    "files": [
     "code/fundamentals/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a string variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-3755746604",
  "source": {
   "name": "fundamentals exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nDeclare a variable `my_float` and assign it the floating point value of `3.0`. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-4-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Your program should declare the variable `my_float`, assign it the value of `3.0`, and then print the variable.\n\n```python\nmy_float = 3.0\nprint(my_float)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Float Variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a float variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-4241539602",
  "source": {
   "name": "fundamentals exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nUse **two** print statements to write the following string:\n\n`Okay, it is time to learn about operators.`",
   "command": "python3 .guides/secure/fundamentals-exercise-5-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are several ways to solve this problem, so there is no single solution. The key to this problem is removing the newline character from the first print statement. This will ensure that two print statements will produce a single line of output. Here is one possible solution.\n\n```python\nprint(\"Okay, \", end='')\nprint(\"it is time to learn about operators.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Print "
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline Character"
     }
    ],
    "files": [
     "code/fundamentals/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT remove newline character from a print statement"
  }
 },
 {
  "type": "test",
  "taskId": "test-4112651185",
  "source": {
   "name": "operators exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nWrite a program that outputs `Hello world`. Your program must do the following things:\n\n* Use two variables, one with `Hello ` and the other with `world`.\n* Use a single print statement.",
   "command": "python3 .guides/secure/operators-exercise-3-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are many ways to solve this problem. The key is to use the `+` operator so you can concatenate the two string variables so that you only need one print statement. Here is on possible solution.\n\n```python\nvar_1 = \"Hello\"\nvar_2 = \" world\"\nprint(var_1 + var_2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String concatenation"
     }
    ],
    "files": [
     "code/operators/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT concatenate two strings"
  }
 },
 {
  "type": "test",
  "taskId": "test-2308401645",
  "source": {
   "name": "operations exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nWrite a program that divides 7 by 2, but prints `3`.",
   "command": "python3 .guides/secure/operators-exercise-4-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Division in Python always returns a float, but your program is expected to return an int. Use the floor division operator (`//`) to return an int. Floor division also truncates `3.5` to `3`.\n\n```python\nprint(7 // 2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Floor Division"
     }
    ],
    "files": [
     "code/operators/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-1772684521",
  "source": {
   "name": "operators exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nDeclare the variable `a` with the value `3.0`. Declare the variable `b` with the value `\"2\"`. Print `a` plus `b`, **but** have the output be `5`.",
   "command": "python3 .guides/secure/operators-exercise-5-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "You are asked to add a float to a string and print an integer. You need to be able to typecast `a` and `b` so that the result is `5`.\n\n```python\na = 3.0\nb = \"2\"\nprint(int(a) + int(b))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Typecasting"
     }
    ],
    "files": [
     "code/operators/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to typecast variables"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-58370162",
  "source": {
   "name": "reading question while loops",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below with either `while` or `for`.",
   "text": "A <<<while>>> loop runs as long as a condition is true.\nA <<<for>>> loop automatically increments the counting variable.\nA <<<for>>> loop runs for a predetermined amount of times.\nA <<<while>>> loop must declare a counting variable.",
   "guidance": "A **while** loop runs as long as a condition is true.\nA **for** loop automatically increments the counting variable.\nA **for** loop runs for a predetermined amount of times.\nA **while** loop must declare a counting variable.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "For loop, While loop"
     }
    ],
    "files": [
     "code/loops/playground-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/playground-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between a for loop and a while loop",
   "tokens": {
    "blank": [
     "while",
     "for",
     "for",
     "while"
    ],
    "text": [
     "A ",
     0,
     " loop runs as long as a condition is true.\nA ",
     0,
     " loop automatically increments the counting variable.\nA ",
     0,
     " loop runs for a predetermined amount of times.\nA ",
     0,
     " loop must declare a counting variable."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3591284404",
  "source": {
   "name": "break statement reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat purpose does the `break` statement serve?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "0e8163a6-88d1-95db-2a0e-5d751809370a",
     "correct": false,
     "answer": "The `break` statement is used to let your code take a short pause."
    },
    {
     "_id": "45fd8e48-9dc4-81b0-659a-c1260c89afb2",
     "correct": false,
     "answer": "The `break` statement is required for every while loop."
    },
    {
     "_id": "bb268559-553f-476b-3e5f-eadf0578b32a",
     "correct": false,
     "answer": "The `break` statement is used to begin a loop."
    },
    {
     "_id": "b9028345-0a81-0ca5-1cfc-266134d9a55c",
     "correct": true,
     "answer": "The `break` statement is used to exit a loop."
    }
   ],
   "guidance": "The `break` statement is used to exit a loop.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Break statement"
     }
    ],
    "files": [
     "code/loops/playground-break-statement.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/playground-break-statement.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define the purpose of the break statement"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2059482387",
  "source": {
   "name": "formative assessment while loops",
   "showName": false,
   "instructions": "Fill in the blanks below so that the loop prints `Python` ten times.",
   "text": "<<<count>>> = 0\nwhile count <<<<>>> 10:\n    print(\"Python\")\n    count = count <<<+>>> 1",
   "guidance": "The first blank is `count`. You know this because in the while loop, Python is determining if `count` is less than 10. The second blank is `<`. Other boolean operators like `>` or `==` will not work. The condition would be false, and `Python` would not print. The third blank is `+`. The only way for this loop to end is for `count` to be greater than or equal to 10. Since `count` starts at 0, the variable must be incremented.\n\n```python\ncount = 0\nwhile count < 10:\n    print(\"Python\")\n    count = count + 1\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "While loops"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT to create a while loop",
   "tokens": {
    "blank": [
     "count",
     "<",
     "+"
    ],
    "text": [
     0,
     " = 0\nwhile count ",
     0,
     " 10:\n    print(\"Python\")\n    count = count ",
     0,
     " 1"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3201003218",
  "source": {
   "name": "reading question nested loops",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich definition best describes a nested loop?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "5ff0acf6-455b-307d-ae32-ac9f211002ef",
     "correct": false,
     "answer": "A nested loop is when you have two loops, one after the other."
    },
    {
     "_id": "1a22c05b-53cf-dadb-8406-fe2157a4cd1a",
     "correct": false,
     "answer": "A nested loop is when you have a while loop and a for loop in the same program."
    },
    {
     "_id": "1374afbb-9a74-0182-9399-dd2deb7ee391",
     "correct": true,
     "answer": "A nested loop is when a loop is inside another loop."
    },
    {
     "_id": "212ea34c-7e43-49a7-a8ea-e172e05213fa",
     "correct": false,
     "answer": "A nested loop is when you have more than one loop in your program."
    }
   ],
   "guidance": "A nested loop is when you have a loop inside of another loop.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Nested loops"
     }
    ],
    "files": [
     "code/loops/playground-nested-loops.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/playground-nested-loops.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a nested loop"
  }
 },
 {
  "type": "test",
  "taskId": "test-1602144414",
  "source": {
   "name": "loops exercise 5 test",
   "showName": false,
   "instructions": "## Submit your work\nOnce you get your code working properly, submit it by clicking the button below.",
   "command": "python3 .guides/secure/loops-exercise-5-test.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Star with a loop for the numbers on each line. Since the numbers go from 1 to 5, the loop will be `for num in range(1,6):`. The next loop will print the`.` characters for each line. The pattern for the number of `.` is  `5 - num`. So the second loop is `for dots in range(5 - num, 0, -1)`. The `-1` means the loop counts down from `5 - num` to 0. Print the `.`, but be sure to remove the newline character with `end='`. Finally, print `num` at the end of the line.\n\n```python\nfor num in range(1,6):\n  for dots in range(5-num, 0, -1):\n    print(\".\", end='')\n  print(num)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Nested loops"
     }
    ],
    "files": [
     "code/loops/exercise-5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/exercise-5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a nested loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2506931680",
  "source": {
   "name": "reading question reverse method",
   "showName": false,
   "instructions": "## Reading Question\nSelect the correct result after performing the `reverse` method on the list `my_list`.\n\n`my_list = [\"hat\", 421, 37.2, False, \"Zebra\"]`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "1cbba3c5-d8e1-dbbd-2148-b38b909e7b92",
     "correct": false,
     "answer": "[37.2, 421, False, \"hat\", \"Zebra\"]"
    },
    {
     "_id": "b79e6ede-d857-b551-596c-b56e5a98a567",
     "correct": true,
     "answer": "[\"Zebra\", False, 37.2, 421, \"hat\"]"
    },
    {
     "_id": "8d48006e-68e9-172b-3064-01ffe24b6eaa",
     "correct": false,
     "answer": "[\"hat\", 421, 37.2, False, \"Zebra\"]"
    },
    {
     "_id": "cf3e75a2-d8db-6720-a500-ae84afee96f7",
     "correct": false,
     "answer": "[\"tah\", 124, 2.73, eslaF, \"arbeZ\"]"
    }
   ],
   "guidance": "The `reverse` method reverses the order of the original list. The correct answer is:\n`[\"Zebra\", False, 37.2, 421, \"hat\"]`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse method"
     }
    ],
    "files": [
     "code/lists/list-reverse.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-reverse.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT reverse a list"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2380011685",
  "source": {
   "name": "formative assessment 2 list methods",
   "showName": false,
   "instructions": "## List Methods\nYou are given the following code: `my_list = [\"Methods\", \"Python\"]`. You want the list to end up being: `my_list = [\"Python\", \"List\", \"Methods\"]`. What two methods do you need to use on `my_list` to get the desired result?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8e605f1e-3e02-8abf-8a04-7163f575919a",
     "correct": true,
     "answer": "```python\nmy_list.reverse()\nmy_list.insert(1, \"List\")\n```"
    },
    {
     "_id": "e43a1877-45d2-b356-b299-c1bcd7e62153",
     "correct": false,
     "answer": "```python\nmy_list.reverse()\nmy_list.sort()\n```"
    },
    {
     "_id": "0208bee0-bc8f-9ea0-1e10-1be3d8e94832",
     "correct": false,
     "answer": "```python\nmy_list.reverse()\nmy_list.append(\"List\")\n```"
    },
    {
     "_id": "6ef3972e-fec1-5924-a5bd-858b8585cc45",
     "correct": false,
     "answer": "```python\nmy_list.reverse()\nmy_list.pop(\"List\")\n```"
    }
   ],
   "guidance": "There two things that need to be done. One is make `\"Python\"` come before `\"Methods\"` in the list. That is accomplished with the `reverse` method. The next thing to do is to add `\"List\"` between `\"Python\"` and `\"Methods\"`. Use the `insert` method to do this.\n\n```python\nmy_list.reverse()\nmy_list.insert(1, \"List\")\n```",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse method, insert method"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use reverse and insert methods to modify a list"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2984696218",
  "source": {
   "name": "reading question for loops",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich one of the for loop below will run 10 times?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9c95c7dc-0d28-fd9c-df6c-39fc1b8385ef",
     "correct": false,
     "answer": "`for i in range(9):`"
    },
    {
     "_id": "8eb54521-0a78-e3d3-b4f9-f8d9d2a59b5b",
     "correct": false,
     "answer": "`for i in range(0, 10, 2):`"
    },
    {
     "_id": "35d6ae75-5765-b609-c56f-3bc360b668b3",
     "correct": false,
     "answer": "`for i in range(1, 10):`"
    },
    {
     "_id": "ced4dffb-22c4-50de-c93d-14e866486f52",
     "correct": true,
     "answer": "`for i in range(10):`"
    }
   ],
   "guidance": "The correct answer is: `for i in range(10)`. For loops in Python loops start counting with 0 and run up to but not including the number in `range`. The loop with `range(9)` runs 9 times. When two numbers are used with `range`, the first number is the starting number. So `range(1, 10)` runs 9 times because it starts at one and goes to 9. Three numbers used with `range` mean the starting number, the stopping number, and the increment. So `range(0, 10, 2)` starts at 2, goes up to (but not including) 10, and increments by 2. This loop runs 5 times.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "For loops"
     }
    ],
    "files": [
     "code/loops/playground-for-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/playground-for-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine how many times a for loop will run"
  }
 }
]